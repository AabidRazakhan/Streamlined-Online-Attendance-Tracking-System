<?php
/**
 * A PHP class to provide the basic functionality to create a pdf document without
 * any requirement for additional modules.
 *
 * Extended by Orion Richardson to support Unicode / UTF-8 characters using
 * TCPDF and others as a guide.
 *
 * @author  Wayne Munro <pdf@ros.co.nz>
 * @author  Orion Richardson <orionr@yahoo.com>
 * @author  Helmut Tischer <htischer@weihenstephan.org>
 * @author  Ryan H. Masten <ryan.masten@gmail.com>
 * @author  Brian Sweeney <eclecticgeek@gmail.com>
 * @author  Fabien MÃ©nager <fabien.menager@gmail.com>
 * @license Public Domain http://creativecommons.org/licenses/publicdomain/
 * @package Cpdf
 */

namespace Svg\Surface;

class CPdf
{
    const PDF_VERSION = '1.7';

    const ACROFORM_SIG_SIGNATURESEXISTS = 0x0001;
    const ACROFORM_SIG_APPENDONLY =       0x0002;

    const ACROFORM_FIELD_BUTTON =   'Btn';
    const ACROFORM_FIELD_TEXT =     'Tx';
    const ACROFORM_FIELD_CHOICE =   'Ch';
    const ACROFORM_FIELD_SIG =      'Sig';

    const ACROFORM_FIELD_READONLY =               0x0001;
    const ACROFORM_FIELD_REQUIRED =               0x0002;

    const ACROFORM_FIELD_TEXT_MULTILINE =         0x1000;
    const ACROFORM_FIELD_TEXT_PASSWORD =          0x2000;
    const ACROFORM_FIELD_TEXT_RICHTEXT =         0x10000;

    const ACROFORM_FIELD_CHOICE_COMBO =          0x20000;
    const ACROFORM_FIELD_CHOICE_EDIT =           0x40000;
    const ACROFORM_FIELD_CHOICE_SORT =           0x80000;
    const ACROFORM_FIELD_CHOICE_MULTISELECT =   0x200000;

    const XOBJECT_SUBTYPE_FORM = 'Form';

    /**
     * @var integer The current number of pdf objects in the document
     */
    public $numObj = 0;

    /**
     * @var array This array contains all of the pdf objects, ready for final assembly
     */
    public $objects = [];

    /**
     * @var integer The objectId (number within the objects array) of the document catalog
     */
    public $catalogId;

    /**
     * @var integer The objectId (number within the objects array) of indirect references (Javascript EmbeddedFiles)
     */
    protected $indirectReferenceId = 0;

    /**
     * @var integer The objectId (number within the objects array)
     */
    protected $embeddedFilesId = 0;

    /**
     * AcroForm objectId
     *
     * @var integer
     */
    public $acroFormId;

    /**
     * @var int
     */
    public $signatureMaxLen = 5000;

    /**
     * @var array Array carrying information about the fonts that the system currently knows about
     * Used to ensure that a font is not loaded twice, among other things
     */
    public $fonts = [];

    /**
     * @var string The default font metrics file to use if no other font has been loaded.
     * The path to the directory containing the font metrics should be included
     */
    public $defaultFont = './fonts/Helvetica.afm';

    /**
     * @string A record of the current font
     */
    public $currentFont = '';

    /**
     * @var string The current base font
     */
    public $currentBaseFont = '';

    /**
     * @var integer The number of the current font within the font array
     */
    public $currentFontNum = 0;

    /**
     * @var integer
     */
    public $currentNode;

    /**
     * @var integer Object number of the current page
     */
    public $currentPage;

    /**
     * @var integer Object number of the currently active contents block
     */
    public $currentContents;

    /**
     * @var integer Number of fonts within the system
     */
    public $numFonts = 0;

    /**
     * @var integer Number of graphic state resources used
     */
    private $numStates = 0;

    /**
     * @var array Number of graphic state resources used
     */
    private $gstates = [];

    /**
     * @var array Current color for fill operations, defaults to inactive value,
     * all three components should be between 0 and 1 inclusive when active
     */
    public $currentColor = null;

    /**
     * @var array Current color for stroke operations (lines etc.)
     */
    public $currentStrokeColor = null;

    /**
     * @var string Fill rule (nonzero or evenodd)
     */
    public $fillRule = "nonzero";

    /**
     * @var string Current style that lines are drawn in
     */
    public $currentLineStyle = '';

    /**
     * @var array Current line transparency (partial graphics state)
     */
    public $currentLineTransparency = ["mode" => "Normal", "opacity" => 1.0];

    /**
     * array Current fill transparency (partial graphics state)
     */
    public $currentFillTransparency = ["mode" => "Normal", "opacity" => 1.0];

    /**
     * @var array An array which is used to save the state of the document, mainly the colors and styles
     * it is used to temporarily change to another state, then change back to what it was before
     */
    public $stateStack = [];

    /**
     * @var integer Number of elements within the state stack
     */
    public $nStateStack = 0;

    /**
     * @var integer Number of page objects within the document
     */
    public $numPages = 0;

    /**
     * @var array Object Id storage stack
     */
    public $stack = [];

    /**
     * @var integer Number of elements within the object Id storage stack
     */
    public $nStack = 0;

    /**
     * an array which contains information about the objects which are not firmly attached to pages
     * these have been added with the addObject function
     */
    public $looseObjects = [];

    /**
     * array contains information about how the loose objects are to be added to the document
     */
    public $addLooseObjects = [];

    /**
     * @var integer The objectId of the information object for the document
     * this contains authorship, title etc.
     */
    public $infoObject = 0;

    /**
     * @var integer Number of images being tracked within the document
     */
    public $numImages = 0;

    /**
     * @var array An array containing options about the document
     * it defaults to turning on the compression of the objects
     */
    public $options = ['compression' => true];

    /**
     * @var integer The objectId of the first page of the document
     */
    public $firstPageId;

    /**
     * @var integer The object Id of the procset object
     */
    public $procsetObjectId;

    /**
     * @var array Store the information about the relationship between font families
     * this used so that the code knows which font is the bold version of another font, etc.
     * the value of this array is initialised in the constructor function.
     */
    public $fontFamilies = [];

    /**
     * @var string Folder for php serialized formats of font metrics files.
     * If empty string, use same folder as original metrics files.
     * This can be passed in from class creator.
     * If this folder does not exist or is not writable, Cpdf will be **much** slower.
     * Because of potential trouble with php safe mode, folder cannot be created at runtime.
     */
    public $fontcache = '';

    /**
     * @var integer The version of the font metrics cache file.
     * This value must be manually incremented whenever the internal font data structure is modified.
     */
    public $fontcacheVersion = 6;

    /**
     * @var string Temporary folder.
     * If empty string, will attempt system tmp folder.
     * This can be passed in from class creator.
     */
    public $tmp = '';

    /**
     * @var string Track if the current font is bolded or italicised
     */
    public $currentTextState = '';

    /**
     * @var string Messages are stored here during processing, these can be selected afterwards to give some useful debug information
     */
    public $messages = '';

    /**
     * @var string The encryption array for the document encryption is stored here
     */
    public $arc4 = '';

    /**
     * @var integer The object Id of the encryption information
     */
    public $arc4_objnum = 0;

    /**
     * @var string The file identifier, used to uniquely identify a pdf document
     */
    public $fileIdentifier = '';

    /**
     * @var boolean A flag to say if a document is to be encrypted or not
     */
    public $encrypted = false;

    /**
     * @var string The encryption key for the encryption of all the document content (structure is not encrypted)
     */
    public $encryptionKey = '';

    /**
     * @var array Array which forms a stack to keep track of nested callback functions
     */
    public $callback = [];

    /**
     * @var integer The number of callback functions in the callback array
     */
    public $nCallback = 0;

    /**
     * @var array Store label->id pairs for named destinations, these will be used to replace internal links
     * done this way so that destinations can be defined after the location that links to them
     */
    public $destinations = [];

    /**
     * @var array Store the stack for the transaction commands, each item in here is a record of the values of all the
     * publiciables within the class, so that the user can rollback at will (from each 'start' command)
     * note that this includes the objects array, so these can be large.
     */
    public $checkpoint = '';

    /**
     * @var array Table of Image origin filenames and image labels which were already added with o_image().
     * Allows to merge identical images
     */
    public $imagelist = [];

    /**
     * @var array Table of already added alpha and plain image files for transparent PNG images.
     */
    protected $imageAlphaList = [];

    /**
     * @var array List of temporary image files to be deleted after processing.
     */
    protected $imageCache = [];

    /**
     * @var boolean Whether the text passed in should be treated as Unicode or just local character set.
     */
    public $isUnicode = false;

    /**
     * @var string the JavaScript code of the document
     */
    public $javascript = '';

    /**
     * @var boolean whether the compression is possible
     */
    protected $compressionReady = false;

    /**
     * @var array Current page size
     */
    protected $currentPageSize = ["width" => 0, "height" => 0];

    /**
     * @var array All the chars that will be required in the font subsets
     */
    protected $stringSubsets = [];

    /**
     * @var string The target internal encoding
     */
    protected static $targetEncoding = 'Windows-1252';

    /**
     * @var array
     */
    protected $byteRange = array();

    /**
     * @var array The list of the core fonts
     */
    protected static $coreFonts = [
        'courier',
        'courier-bold',
        'courier-oblique',
        'courier-boldoblique',
        'helvetica',
        'helvetica-bold',
        'helvetica-oblique',
        'helvetica-boldoblique',
        'times-roman',
        'times-bold',
        'times-italic',
        'times-bolditalic',
        'symbol',
        'zapfdingbats'
    ];

    /**
     * Class constructor
     * This will start a new document
     *
     * @param array   $pageSize  Array of 4 numbers, defining the bottom left and upper right corner of the page. first two are normally zero.
     * @param boolean $isUnicode Whether text will be treated as Unicode or not.
     * @param string  $fontcache The font cache folder
     * @param string  $tmp       The temporary folder
     */
    function __construct($pageSize = [0, 0, 612, 792], $isUnicode = false, $fontcache = '', $tmp = '')
    {
        $this->isUnicode = $isUnicode;
        $this->fontcache = rtrim($fontcache, DIRECTORY_SEPARATOR."/\\");
        $this->tmp = ($tmp !== '' ? $tmp : sys_get_temp_dir());
        $this->newDocument($pageSize);

        $this->compressionReady = function_exists('gzcompress');

        if (in_array('Windows-1252', mb_list_encodings())) {
            self::$targetEncoding = 'Windows-1252';
        }

        // also initialize the font families that are known about already
        $this->setFontFamily('init');
    }

    public function __destruct()
    {
        foreach ($this->imageCache as $file) {
            if (file_exists($file)) {
                unlink($file);
            }
        }
    }

    /**
     * Document object methods (internal use only)
     *
     * There is about one object method for each type of object in the pdf document
     * Each function has the same call list ($id,$action,$options).
     * $id = the object ID of the object, or what it is to be if it is being created
     * $action = a string specifying the action to be performed, though ALL must support:
     *           'new' - create the object with the id $id
     *           'out' - produce the output for the pdf object
     * $options = optional, a string or array containing the various parameters for the object
     *
     * These, in conjunction with the output function are the ONLY way for output to be produced
     * within the pdf 'file'.
     */

    /**
     * Destination object, used to specify the location for the user to jump to, presently on opening
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return string|null
     */
    protected function o_destination($id, $action, $options = '')
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'destination', 'info' => []];
                $tmp = '';
                switch ($options['type']) {
                    case 'XYZ':
                    /** @noinspection PhpMissingBreakStatementInspection */
                    case 'FitR':
                        $tmp = ' ' . $options['p3'] . $tmp;
                    case 'FitH':
                    case 'FitV':
                    case 'FitBH':
                    /** @noinspection PhpMissingBreakStatementInspection */
                    case 'FitBV':
                        $tmp = ' ' . $options['p1'] . ' ' . $options['p2'] . $tmp;
                    case 'Fit':
                    case 'FitB':
                        $tmp = $options['type'] . $tmp;
                        $this->objects[$id]['info']['string'] = $tmp;
                        $this->objects[$id]['info']['page'] = $options['page'];
                }
                break;

            case 'out':
                $o = &$this->objects[$id];

                $tmp = $o['info'];
                $res = "\n$id 0 obj\n" . '[' . $tmp['page'] . ' 0 R /' . $tmp['string'] . "]\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * set the viewer preferences
     *
     * @param $id
     * @param $action
     * @param string|array $options
     * @return string|null
     */
    protected function o_viewerPreferences($id, $action, $options = '')
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'viewerPreferences', 'info' => []];
                break;

            case 'add':
                $o = &$this->objects[$id];

                foreach ($options as $k => $v) {
                    switch ($k) {
                        // Boolean keys
                        case 'HideToolbar':
                        case 'HideMenubar':
                        case 'HideWindowUI':
                        case 'FitWindow':
                        case 'CenterWindow':
                        case 'DisplayDocTitle':
                        case 'PickTrayByPDFSize':
                            $o['info'][$k] = (bool)$v;
                            break;

                        // Integer keys
                        case 'NumCopies':
                            $o['info'][$k] = (int)$v;
                            break;

                        // Name keys
                        case 'ViewArea':
                        case 'ViewClip':
                        case 'PrintClip':
                        case 'PrintArea':
                            $o['info'][$k] = (string)$v;
                            break;

                        // Named with limited valid values
                        case 'NonFullScreenPageMode':
                            if (!in_array($v, ['UseNone', 'UseOutlines', 'UseThumbs', 'UseOC'])) {
                                break;
                            }
                            $o['info'][$k] = $v;
                            break;

                        case 'Direction':
                            if (!in_array($v, ['L2R', 'R2L'])) {
                                break;
                            }
                            $o['info'][$k] = $v;
                            break;

                        case 'PrintScaling':
                            if (!in_array($v, ['None', 'AppDefault'])) {
                                break;
                            }
                            $o['info'][$k] = $v;
                            break;

                        case 'Duplex':
                            if (!in_array($v, ['None', 'Simplex', 'DuplexFlipShortEdge', 'DuplexFlipLongEdge'])) {
                                break;
                            }
                            $o['info'][$k] = $v;
                            break;

                        // Integer array
                        case 'PrintPageRange':
                            // Cast to integer array
                            foreach ($v as $vK => $vV) {
                                $v[$vK] = (int)$vV;
                            }
                            $o['info'][$k] = array_values($v);
                            break;
                    }
                }
                break;

            case 'out':
                $o = &$this->objects[$id];
                $res = "\n$id 0 obj\n<< ";

                foreach ($o['info'] as $k => $v) {
                    if (is_string($v)) {
                        $v = '/' . $v;
                    } elseif (is_int($v)) {
                        $v = (string) $v;
                    } elseif (is_bool($v)) {
                        $v = ($v ? 'true' : 'false');
                    } elseif (is_array($v)) {
                        $v = '[' . implode(' ', $v) . ']';
                    }
                    $res .= "\n/$k $v";
                }
                $res .= "\n>>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * define the document catalog, the overall controller for the document
     *
     * @param $id
     * @param $action
     * @param string|array $options
     * @return string|null
     */
    protected function o_catalog($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'catalog', 'info' => []];
                $this->catalogId = $id;
                break;

            case 'acroform':
            case 'outlines':
            case 'pages':
            case 'openHere':
            case 'names':
                $o['info'][$action] = $options;
                break;

            case 'viewerPreferences':
                if (!isset($o['info']['viewerPreferences'])) {
                    $this->numObj++;
                    $this->o_viewerPreferences($this->numObj, 'new');
                    $o['info']['viewerPreferences'] = $this->numObj;
                }

                $vp = $o['info']['viewerPreferences'];
                $this->o_viewerPreferences($vp, 'add', $options);

                break;

            case 'out':
                $res = "\n$id 0 obj\n<< /Type /Catalog";

                foreach ($o['info'] as $k => $v) {
                    switch ($k) {
                        case 'outlines':
                            $res .= "\n/Outlines $v 0 R";
                            break;

                        case 'pages':
                            $res .= "\n/Pages $v 0 R";
                            break;

                        case 'viewerPreferences':
                            $res .= "\n/ViewerPreferences $v 0 R";
                            break;

                        case 'openHere':
                            $res .= "\n/OpenAction $v 0 R";
                            break;

                        case 'names':
                            $res .= "\n/Names $v 0 R";
                            break;

                        case 'acroform':
                            $res .= "\n/AcroForm $v 0 R";
                            break;
                    }
                }

                $res .= " >>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * object which is a parent to the pages in the document
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return string|null
     */
    protected function o_pages($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'pages', 'info' => []];
                $this->o_catalog($this->catalogId, 'pages', $id);
                break;

            case 'page':
                if (!is_array($options)) {
                    // then it will just be the id of the new page
                    $o['info']['pages'][] = $options;
                } else {
                    // then it should be an array having 'id','rid','pos', where rid=the page to which this one will be placed relative
                    // and pos is either 'before' or 'after', saying where this page will fit.
                    if (isset($options['id']) && isset($options['rid']) && isset($options['pos'])) {
                        $i = array_search($options['rid'], $o['info']['pages']);
                        if (isset($o['info']['pages'][$i]) && $o['info']['pages'][$i] == $options['rid']) {

                            // then there is a match
                            // make a space
                            switch ($options['pos']) {
                                case 'before':
                                    $k = $i;
                                    break;

                                case 'after':
                                    $k = $i + 1;
                                    break;

                                default:
                                    $k = -1;
                                    break;
                            }

                            if ($k >= 0) {
                                for ($j = count($o['info']['pages']) - 1; $j >= $k; $j--) {
                                    $o['info']['pages'][$j + 1] = $o['info']['pages'][$j];
                                }

                                $o['info']['pages'][$k] = $options['id'];
                            }
                        }
                    }
                }
                break;

            case 'procset':
                $o['info']['procset'] = $options;
                break;

            case 'mediaBox':
                $o['info']['mediaBox'] = $options;
                // which should be an array of 4 numbers
                $this->currentPageSize = ['width' => $options[2], 'height' => $options[3]];
                break;

            case 'font':
                $o['info']['fonts'][] = ['objNum' => $options['objNum'], 'fontNum' => $options['fontNum']];
                break;

            case 'extGState':
                $o['info']['extGStates'][] = ['objNum' => $options['objNum'], 'stateNum' => $options['stateNum']];
                break;

            case 'xObject':
                $o['info']['xObjects'][] = ['objNum' => $options['objNum'], 'label' => $options['label']];
                break;

            case 'out':
                if (count($o['info']['pages'])) {
                    $res = "\n$id 0 obj\n<< /Type /Pages\n/Kids [";
                    foreach ($o['info']['pages'] as $v) {
                        $res .= "$v 0 R\n";
                    }

                    $res .= "]\n/Count " . count($this->objects[$id]['info']['pages']);

                    if ((isset($o['info']['fonts']) && count($o['info']['fonts'])) ||
                        isset($o['info']['procset']) ||
                        (isset($o['info']['extGStates']) && count($o['info']['extGStates']))
                    ) {
                        $res .= "\n/Resources <<";

                        if (isset($o['info']['procset'])) {
                            $res .= "\n/ProcSet " . $o['info']['procset'] . " 0 R";
                        }

                        if (isset($o['info']['fonts']) && count($o['info']['fonts'])) {
                            $res .= "\n/Font << ";
                            foreach ($o['info']['fonts'] as $finfo) {
                                $res .= "\n/F" . $finfo['fontNum'] . " " . $finfo['objNum'] . " 0 R";
                            }
                            $res .= "\n>>";
                        }

                        if (isset($o['info']['xObjects']) && count($o['info']['xObjects'])) {
                            $res .= "\n/XObject << ";
                            foreach ($o['info']['xObjects'] as $finfo) {
                                $res .= "\n/" . $finfo['label'] . " " . $finfo['objNum'] . " 0 R";
                            }
                            $res .= "\n>>";
                        }

                        if (isset($o['info']['extGStates']) && count($o['info']['extGStates'])) {
                            $res .= "\n/ExtGState << ";
                            foreach ($o['info']['extGStates'] as $gstate) {
                                $res .= "\n/GS" . $gstate['stateNum'] . " " . $gstate['objNum'] . " 0 R";
                            }
                            $res .= "\n>>";
                        }

                        $res .= "\n>>";
                        if (isset($o['info']['mediaBox'])) {
                            $tmp = $o['info']['mediaBox'];
                            $res .= "\n/MediaBox [" . sprintf(
                                    '%.3F %.3F %.3F %.3F',
                                    $tmp[0],
                                    $tmp[1],
                                    $tmp[2],
                                    $tmp[3]
                                ) . ']';
                        }
                    }

                    $res .= "\n >>\nendobj";
                } else {
                    $res = "\n$id 0 obj\n<< /Type /Pages\n/Count 0\n>>\nendobj";
                }

                return $res;
        }

        return null;
    }

    /**
     * define the outlines in the doc, empty for now
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return string|null
     */
    protected function o_outlines($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'outlines', 'info' => ['outlines' => []]];
                $this->o_catalog($this->catalogId, 'outlines', $id);
                break;

            case 'outline':
                $o['info']['outlines'][] = $options;
                break;

            case 'out':
                if (count($o['info']['outlines'])) {
                    $res = "\n$id 0 obj\n<< /Type /Outlines /Kids [";
                    foreach ($o['info']['outlines'] as $v) {
                        $res .= "$v 0 R ";
                    }

                    $res .= "] /Count " . count($o['info']['outlines']) . " >>\nendobj";
                } else {
                    $res = "\n$id 0 obj\n<< /Type /Outlines /Count 0 >>\nendobj";
                }

                return $res;
        }

        return null;
    }

    /**
     * an object to hold the font description
     *
     * @param $id
     * @param $action
     * @param string|array $options
     * @return string|null
     * @throws FontNotFoundException
     */
    protected function o_font($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = [
                    't'    => 'font',
                    'info' => [
                        'name'         => $options['name'],
                        'fontFileName' => $options['fontFileName'],
                        'SubType'      => 'Type1',
                        'isSubsetting'   => $options['isSubsetting']
                    ]
                ];
                $fontNum = $this->numFonts;
                $this->objects[$id]['info']['fontNum'] = $fontNum;

                // deal with the encoding and the differences
                if (isset($options['differences'])) {
                    // then we'll need an encoding dictionary
                    $this->numObj++;
                    $this->o_fontEncoding($this->numObj, 'new', $options);
                    $this->objects[$id]['info']['encodingDictionary'] = $this->numObj;
                } else {
                    if (isset($options['encoding'])) {
                        // we can specify encoding here
                        switch ($options['encoding']) {
                            case 'WinAnsiEncoding':
                            case 'MacRomanEncoding':
                            case 'MacExpertEncoding':
                                $this->objects[$id]['info']['encoding'] = $options['encoding'];
                                break;

                            case 'none':
                                break;

                            default:
                                $this->objects[$id]['info']['encoding'] = 'WinAnsiEncoding';
                                break;
                        }
                    } else {
                        $this->objects[$id]['info']['encoding'] = 'WinAnsiEncoding';
                    }
                }

                if ($this->fonts[$options['fontFileName']]['isUnicode']) {
                    // For Unicode fonts, we need to incorporate font data into
                    // sub-sections that are linked from the primary font section.
                    // Look at o_fontGIDtoCID and o_fontDescendentCID functions
                    // for more information.
                    //
                    // All of this code is adapted from the excellent changes made to
                    // transform FPDF to TCPDF (http://tcpdf.sourceforge.net/)

                    $toUnicodeId = ++$this->numObj;
                    $this->o_toUnicode($toUnicodeId, 'new');
                    $this->objects[$id]['info']['toUnicode'] = $toUnicodeId;

                    $cidFontId = ++$this->numObj;
                    $this->o_fontDescendentCID($cidFontId, 'new', $options);
                    $this->objects[$id]['info']['cidFont'] = $cidFontId;
                }

                // also tell the pages node about the new font
                $this->o_pages($this->currentNode, 'font', ['fontNum' => $fontNum, 'objNum' => $id]);
                break;

            case 'add':
                $font_options = $this->processFont($id, $o['info']);

                if ($font_options !== false) {
                    foreach ($font_options as $k => $v) {
                        switch ($k) {
                            case 'BaseFont':
                                $o['info']['name'] = $v;
                                break;
                            case 'FirstChar':
                            case 'LastChar':
                            case 'Widths':
                            case 'FontDescriptor':
                            case 'SubType':
                                $this->addMessage('o_font ' . $k . " : " . $v);
                                $o['info'][$k] = $v;
                                break;
                        }
                    }

                    // pass values down to descendent font
                    if (isset($o['info']['cidFont'])) {
                        $this->o_fontDescendentCID($o['info']['cidFont'], 'add', $font_options);
                    }
                }
                break;

            case 'out':
                if ($this->fonts[$this->objects[$id]['info']['fontFileName']]['isUnicode']) {
                    // For Unicode fonts, we need to incorporate font data into
                    // sub-sections that are linked from the primary font section.
                    // Look at o_fontGIDtoCID and o_fontDescendentCID functions
                    // for more information.
                    //
                    // All of this code is adapted from the excellent changes made to
                    // transform FPDF to TCPDF (http://tcpdf.sourceforge.net/)

                    $res = "\n$id 0 obj\n<</Type /Font\n/Subtype /Type0\n";
                    $res .= "/BaseFont /" . $o['info']['name'] . "\n";

                    // The horizontal identity mapping for 2-byte CIDs; may be used
                    // with CIDFonts using any Registry, Ordering, and Supplement values.
                    $res .= "/Encoding /Identity-H\n";
                    $res .= "/DescendantFonts [" . $o['info']['cidFont'] . " 0 R]\n";
                    $res .= "/ToUnicode " . $o['info']['toUnicode'] . " 0 R\n";
                    $res .= ">>\n";
                    $res .= "endobj";
                } else {
                    $res = "\n$id 0 obj\n<< /Type /Font\n/Subtype /" . $o['info']['SubType'] . "\n";
                    $res .= "/Name /F" . $o['info']['fontNum'] . "\n";
                    $res .= "/BaseFont /" . $o['info']['name'] . "\n";

                    if (isset($o['info']['encodingDictionary'])) {
                        // then place a reference to the dictionary
                        $res .= "/Encoding " . $o['info']['encodingDictionary'] . " 0 R\n";
                    } else {
                        if (isset($o['info']['encoding'])) {
                            // use the specified encoding
                            $res .= "/Encoding /" . $o['info']['encoding'] . "\n";
                        }
                    }

                    if (isset($o['info']['FirstChar'])) {
                        $res .= "/FirstChar " . $o['info']['FirstChar'] . "\n";
                    }

                    if (isset($o['info']['LastChar'])) {
                        $res .= "/LastChar " . $o['info']['LastChar'] . "\n";
                    }

                    if (isset($o['info']['Widths'])) {
                        $res .= "/Widths " . $o['info']['Widths'] . " 0 R\n";
                    }

                    if (isset($o['info']['FontDescriptor'])) {
                        $res .= "/FontDescriptor " . $o['info']['FontDescriptor'] . " 0 R\n";
                    }

                    $res .= ">>\n";
                    $res .= "endobj";
                }

                return $res;
        }

        return null;
    }

    protected function getFontSubsettingTag(array $font): string
    {
        // convert font num to hexavigesimal numeral system letters A - Z only
        $base_26 = strtoupper(base_convert($font['fontNum'], 10, 26));
        for ($i = 0; $i < strlen($base_26); $i++) {
            $char = $base_26[$i];
            if ($char <= "9") {
                $base_26[$i] = chr(65 + intval($char));
            } else {
                $base_26[$i] = chr(ord($char) + 10);
            }
        }

        return 'SUB' . str_pad($base_26, 3 , 'A', STR_PAD_LEFT);
    }

    /**
     * @param int $fontObjId
     * @param array $object_info
     * @return array|false
     * @throws FontNotFoundException
     */
    private function processFont(int $fontObjId, array $object_info)
    {
        $fontFileName = $object_info['fontFileName'];
        if (!isset($this->fonts[$fontFileName])) {
            return false;
        }

        $font = &$this->fonts[$fontFileName];

        $fileSuffix = $font['fileSuffix'];
        $fileSuffixLower = strtolower($font['fileSuffix']);
        $fbfile = "$fontFileName.$fileSuffix";
        $isTtfFont = $fileSuffixLower === 'ttf';
        $isPfbFont = $fileSuffixLower === 'pfb';

        $this->addMessage('selectFont: checking for - ' . $fbfile);

        if (!$fileSuffix) {
            $this->addMessage(
                'selectFont: pfb or ttf file not found, ok if this is one of the 14 standard fonts'
            );

            return false;
        } else {
            $adobeFontName = isset($font['PostScriptName']) ? $font['PostScriptName'] : $font['FontName'];
            //        $fontObj = $this->numObj;
            $this->addMessage("selectFont: adding font file - $fbfile - $adobeFontName");

            // find the array of font widths, and put that into an object.
            $firstChar = -1;
            $lastChar = 0;
            $widths = [];
            $cid_widths = [];

            foreach ($font['C'] as $num => $d) {
                if (intval($num) > 0 || $num == '0') {
                    if (!$font['isUnicode']) {
                        // With Unicode, widths array isn't used
                        if ($lastChar > 0 && $num > $lastChar + 1) {
                            for ($i = $lastChar + 1; $i < $num; $i++) {
                                $widths[] = 0;
                            }
                        }
                    }

                    $widths[] = $d;

                    if ($font['isUnicode']) {
                        $cid_widths[$num] = $d;
                    }

                    if ($firstChar == -1) {
                        $firstChar = $num;
                    }

                    $lastChar = $num;
                }
            }

            // also need to adjust the widths for the differences array
            if (isset($object['differences'])) {
                foreach ($object['differences'] as $charNum => $charName) {
                    if ($charNum > $lastChar) {
                        if (!$object['isUnicode']) {
                            // With Unicode, widths array isn't used
                            for ($i = $lastChar + 1; $i <= $charNum; $i++) {
                                $widths[] = 0;
                            }
                        }

                        $lastChar = $charNum;
                    }

                    if (isset($font['C'][$charName])) {
                        $widths[$charNum - $firstChar] = $font['C'][$charName];
                        if ($font['isUnicode']) {
                            $cid_widths[$charName] = $font['C'][$charName];
                        }
                    }
                }
            }

            if ($font['isUnicode']) {
                $font['CIDWidths'] = $cid_widths;
            }

            $this->addMessage('selectFont: FirstChar = ' . $firstChar);
            $this->addMessage('selectFont: LastChar = ' . $lastChar);

            $widthid = -1;

            if (!$font['isUnicode']) {
                // With Unicode, widths array isn't used

                $this->numObj++;
                $this->o_contents($this->numObj, 'new', 'raw');
                $this->objects[$this->numObj]['c'] .= '[' . implode(' ', $widths) . ']';
                $widthid = $this->numObj;
            }

            $missing_width = 500;
            $stemV = 70;

            if (isset($font['MissingWidth'])) {
                $missing_width = $font['MissingWidth'];
            }
            if (isset($font['StdVW'])) {
                $stemV = $font['StdVW'];
            } else {
                if (isset($font['Weight']) && preg_match('!(bold|black)!i', $font['Weight'])) {
                    $stemV = 120;
                }
            }

            // load the pfb file, and put that into an object too.
            // note that pdf supports only binary format type 1 font files, though there is a
            // simple utility to convert them from pfa to pfb.
            $data = file_get_contents($fbfile);

            // create the font descriptor
            $this->numObj++;
            $fontDescriptorId = $this->numObj;

            $this->numObj++;
            $pfbid = $this->numObj;

            // determine flags (more than a little flakey, hopefully will not matter much)
            $flags = 0;

            if ($font['ItalicAngle'] != 0) {
                $flags += pow(2, 6);
            }

            if ($font['IsFixedPitch'] === 'true') {
                $flags += 1;
            }

            $flags += pow(2, 5); // assume non-sybolic
            $list = [
                'Ascent'       => 'Ascender',
                'CapHeight'    => 'Ascender', //FIXME: php-font-lib is not grabbing this value, so we'll fake it and use the Ascender value // 'CapHeight'
                'MissingWidth' => 'MissingWidth',
                'Descent'      => 'Descender',
                'FontBBox'     => 'FontBBox',
                'ItalicAngle'  => 'ItalicAngle'
            ];
            $fdopt = [
                'Flags'    => $flags,
                'FontName' => $adobeFontName,
                'StemV'    => $stemV
            ];

            foreach ($list as $k => $v) {
                if (isset($font[$v])) {
                    $fdopt[$k] = $font[$v];
                }
            }

            if ($isPfbFont) {
                $fdopt['FontFile'] = $pfbid;
            } elseif ($isTtfFont) {
                $fdopt['FontFile2'] = $pfbid;
            }

            $this->o_fontDescriptor($fontDescriptorId, 'new', $fdopt);

            // embed the font program
            $this->o_contents($this->numObj, 'new');
            $this->objects[$pfbid]['c'] .= $data;

            // determine the cruicial lengths within this file
            if ($isPfbFont) {
                $l1 = strpos($data, 'eexec') + 6;
                $l2 = strpos($data, '00000000') - $l1;
                $l3 = mb_strlen($data, '8bit') - $l2 - $l1;
                $this->o_contents(
                    $this->numObj,
                    'add',
                    ['Length1' => $l1, 'Length2' => $l2, 'Length3' => $l3]
                );
            } elseif ($isTtfFont) {
                $l1 = mb_strlen($data, '8bit');
                $this->o_contents($this->numObj, 'add', ['Length1' => $l1]);
            }

            // tell the font object about all this new stuff
            $options = [
                'BaseFont'       => $adobeFontName,
                'MissingWidth'   => $missing_width,
                'Widths'         => $widthid,
                'FirstChar'      => $firstChar,
                'LastChar'       => $lastChar,
                'FontDescriptor' => $fontDescriptorId
            ];

            if ($isTtfFont) {
                $options['SubType'] = 'TrueType';
            }

            $this->addMessage("adding extra info to font.($fontObjId)");

            foreach ($options as $fk => $fv) {
                $this->addMessage("$fk : $fv");
            }
        }

        return $options;
    }

    /**
     * A toUnicode section, needed for unicode fonts
     *
     * @param $id
     * @param $action
     * @return null|string
     */
    protected function o_toUnicode($id, $action)
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = [
                    't'    => 'toUnicode'
                ];
                break;
            case 'add':
                break;
            case 'out':
                $ordering = 'UCS';
                $registry = 'Adobe';

                if ($this->encrypted) {
                    $this->encryptInit($id);
                    $ordering = $this->ARC4($ordering);
                    $registry = $this->filterText($this->ARC4($registry), false, false);
                }

                $stream = <<<EOT
/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<</Registry ($registry)
/Ordering ($ordering)
/Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
1 beginbfrange
<0000> <FFFF> <0000>
endbfrange
endcmap
CMapName currentdict /CMap defineresource pop
end
end
EOT;

                $res = "\n$id 0 obj\n";
                $res .= "<</Length " . mb_strlen($stream, '8bit') . " >>\n";
                $res .= "stream\n" . $stream . "\nendstream" . "\nendobj";;

                return $res;
        }

        return null;
    }

    /**
     * a font descriptor, needed for including additional fonts
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_fontDescriptor($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'fontDescriptor', 'info' => $options];
                break;

            case 'out':
                $res = "\n$id 0 obj\n<< /Type /FontDescriptor\n";
                foreach ($o['info'] as $label => $value) {
                    switch ($label) {
                        case 'Ascent':
                        case 'CapHeight':
                        case 'Descent':
                        case 'Flags':
                        case 'ItalicAngle':
                        case 'StemV':
                        case 'AvgWidth':
                        case 'Leading':
                        case 'MaxWidth':
                        case 'MissingWidth':
                        case 'StemH':
                        case 'XHeight':
                        case 'CharSet':
                            if (mb_strlen($value, '8bit')) {
                                $res .= "/$label $value\n";
                            }

                            break;
                        case 'FontFile':
                        case 'FontFile2':
                        case 'FontFile3':
                            $res .= "/$label $value 0 R\n";
                            break;

                        case 'FontBBox':
                            $res .= "/$label [$value[0] $value[1] $value[2] $value[3]]\n";
                            break;

                        case 'FontName':
                            $res .= "/$label /$value\n";
                            break;
                    }
                }

                $res .= ">>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * the font encoding
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_fontEncoding($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                // the options array should contain 'differences' and maybe 'encoding'
                $this->objects[$id] = ['t' => 'fontEncoding', 'info' => $options];
                break;

            case 'out':
                $res = "\n$id 0 obj\n<< /Type /Encoding\n";
                if (!isset($o['info']['encoding'])) {
                    $o['info']['encoding'] = 'WinAnsiEncoding';
                }

                if ($o['info']['encoding'] !== 'none') {
                    $res .= "/BaseEncoding /" . $o['info']['encoding'] . "\n";
                }

                $res .= "/Differences \n[";

                $onum = -100;

                foreach ($o['info']['differences'] as $num => $label) {
                    if ($num != $onum + 1) {
                        // we cannot make use of consecutive numbering
                        $res .= "\n$num /$label";
                    } else {
                        $res .= " /$label";
                    }

                    $onum = $num;
                }

                $res .= "\n]\n>>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * a descendent cid font, needed for unicode fonts
     *
     * @param $id
     * @param $action
     * @param string|array $options
     * @return null|string
     */
    protected function o_fontDescendentCID($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'fontDescendentCID', 'info' => $options];

                // we need a CID system info section
                $cidSystemInfoId = ++$this->numObj;
                $this->o_cidSystemInfo($cidSystemInfoId, 'new');
                $this->objects[$id]['info']['cidSystemInfo'] = $cidSystemInfoId;

                // and a CID to GID map
                $cidToGidMapId = ++$this->numObj;
                $this->o_fontGIDtoCIDMap($cidToGidMapId, 'new', $options);
                $this->objects[$id]['info']['cidToGidMap'] = $cidToGidMapId;
                break;

            case 'add':
                foreach ($options as $k => $v) {
                    switch ($k) {
                        case 'BaseFont':
                            $o['info']['name'] = $v;
                            break;

                        case 'FirstChar':
                        case 'LastChar':
                        case 'MissingWidth':
                        case 'FontDescriptor':
                        case 'SubType':
                            $this->addMessage("o_fontDescendentCID $k : $v");
                            $o['info'][$k] = $v;
                            break;
                    }
                }

                // pass values down to cid to gid map
                $this->o_fontGIDtoCIDMap($o['info']['cidToGidMap'], 'add', $options);
                break;

            case 'out':
                $res = "\n$id 0 obj\n";
                $res .= "<</Type /Font\n";
                $res .= "/Subtype /CIDFontType2\n";
                $res .= "/BaseFont /" . $o['info']['name'] . "\n";
                $res .= "/CIDSystemInfo " . $o['info']['cidSystemInfo'] . " 0 R\n";
                //      if (isset($o['info']['FirstChar'])) {
                //        $res.= "/FirstChar ".$o['info']['FirstChar']."\n";
                //      }

                //      if (isset($o['info']['LastChar'])) {
                //        $res.= "/LastChar ".$o['info']['LastChar']."\n";
                //      }
                if (isset($o['info']['FontDescriptor'])) {
                    $res .= "/FontDescriptor " . $o['info']['FontDescriptor'] . " 0 R\n";
                }

                if (isset($o['info']['MissingWidth'])) {
                    $res .= "/DW " . $o['info']['MissingWidth'] . "\n";
                }

                if (isset($o['info']['fontFileName']) && isset($this->fonts[$o['info']['fontFileName']]['CIDWidths'])) {
                    $cid_widths = &$this->fonts[$o['info']['fontFileName']]['CIDWidths'];
                    $w = '';
                    foreach ($cid_widths as $cid => $width) {
                        $w .= "$cid [$width] ";
                    }
                    $res .= "/W [$w]\n";
                }

                $res .= "/CIDToGIDMap " . $o['info']['cidToGidMap'] . " 0 R\n";
                $res .= ">>\n";
                $res .= "endobj";

                return $res;
        }

        return null;
    }

    /**
     * CID system info section, needed for unicode fonts
     *
     * @param $id
     * @param $action
     * @return null|string
     */
    protected function o_cidSystemInfo($id, $action)
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = [
                    't' => 'cidSystemInfo'
                ];
                break;
            case 'add':
                break;
            case 'out':
                $ordering = 'UCS';
                $registry = 'Adobe';

                if ($this->encrypted) {
                    $this->encryptInit($id);
                    $ordering = $this->ARC4($ordering);
                    $registry = $this->ARC4($registry);
                }


                $res = "\n$id 0 obj\n";

                $res .= '<</Registry (' . $registry . ")\n"; // A string identifying an issuer of character collections
                $res .= '/Ordering (' . $ordering . ")\n"; // A string that uniquely names a character collection issued by a specific registry
                $res .= "/Supplement 0\n"; // The supplement number of the character collection.
                $res .= ">>";

                $res .= "\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * a font glyph to character map, needed for unicode fonts
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_fontGIDtoCIDMap($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'fontGIDtoCIDMap', 'info' => $options];
                break;

            case 'out':
                $res = "\n$id 0 obj\n";
                $fontFileName = $o['info']['fontFileName'];
                $tmp = $this->fonts[$fontFileName]['CIDtoGID'] = base64_decode($this->fonts[$fontFileName]['CIDtoGID']);

                $compressed = isset($this->fonts[$fontFileName]['CIDtoGID_Compressed']) &&
                    $this->fonts[$fontFileName]['CIDtoGID_Compressed'];

                if (!$compressed && isset($o['raw'])) {
                    $res .= $tmp;
                } else {
                    $res .= "<<";

                    if (!$compressed && $this->compressionReady && $this->options['compression']) {
                        // then implement ZLIB based compression on this content stream
                        $compressed = true;
                        $tmp = gzcompress($tmp, 6);
                    }
                    if ($compressed) {
                        $res .= "\n/Filter /FlateDecode";
                    }

                    if ($this->encrypted) {
                        $this->encryptInit($id);
                        $tmp = $this->ARC4($tmp);
                    }

                    $res .= "\n/Length " . mb_strlen($tmp, '8bit') . ">>\nstream\n$tmp\nendstream";
                }

                $res .= "\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * the document procset, solves some problems with printing to old PS printers
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_procset($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'procset', 'info' => ['PDF' => 1, 'Text' => 1]];
                $this->o_pages($this->currentNode, 'procset', $id);
                $this->procsetObjectId = $id;
                break;

            case 'add':
                // this is to add new items to the procset list, despite the fact that this is considered
                // obsolete, the items are required for printing to some postscript printers
                switch ($options) {
                    case 'ImageB':
                    case 'ImageC':
                    case 'ImageI':
                        $o['info'][$options] = 1;
                        break;
                }
                break;

            case 'out':
                $res = "\n$id 0 obj\n[";
                foreach ($o['info'] as $label => $val) {
                    $res .= "/$label ";
                }
                $res .= "]\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * define the document information
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_info($id, $action, $options = '')
    {
        switch ($action) {
            case 'new':
                $this->infoObject = $id;
                $date = 'D:' . @date('Ymd');
                $this->objects[$id] = [
                    't'    => 'info',
                    'info' => [
                        'Producer'      => 'CPDF (dompdf)',
                        'CreationDate' => $date
                    ]
                ];
                break;
            case 'Title':
            case 'Author':
            case 'Subject':
            case 'Keywords':
            case 'Creator':
            case 'Producer':
            case 'CreationDate':
            case 'ModDate':
            case 'Trapped':
                $this->objects[$id]['info'][$action] = $options;
                break;

            case 'out':
                $encrypted = $this->encrypted;
                if ($encrypted) {
                    $this->encryptInit($id);
                }

                $res = "\n$id 0 obj\n<<\n";
                $o = &$this->objects[$id];
                foreach ($o['info'] as $k => $v) {
                    $res .= "/$k (";

                    // dates must be outputted as-is, without Unicode transformations
                    if ($k !== 'CreationDate' && $k !== 'ModDate') {
                        $v = $this->filterText($v, true, false);
                    }

                    if ($encrypted) {
                        $v = $this->ARC4($v);
                    }

                    $res .= $v;
                    $res .= ")\n";
                }

                $res .= ">>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * an action object, used to link to URLS initially
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_action($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                if (is_array($options)) {
                    $this->objects[$id] = ['t' => 'action', 'info' => $options, 'type' => $options['type']];
                } else {
                    // then assume a URI action
                    $this->objects[$id] = ['t' => 'action', 'info' => $options, 'type' => 'URI'];
                }
                break;

            case 'out':
                if ($this->encrypted) {
                    $this->encryptInit($id);
                }

                $res = "\n$id 0 obj\n<< /Type /Action";
                switch ($o['type']) {
                    case 'ilink':
                        if (!isset($this->destinations[(string)$o['info']['label']])) {
                            break;
                        }

                        // there will be an 'label' setting, this is the name of the destination
                        $res .= "\n/S /GoTo\n/D " . $this->destinations[(string)$o['info']['label']] . " 0 R";
                        break;

                    case 'URI':
                        $res .= "\n/S /URI\n/URI (";
                        if ($this->encrypted) {
                            $res .= $this->filterText($this->ARC4($o['info']), false, false);
                        } else {
                            $res .= $this->filterText($o['info'], false, false);
                        }

                        $res .= ")";
                        break;
                }

                $res .= "\n>>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * an annotation object, this will add an annotation to the current page.
     * initially will support just link annotations
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_annotation($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                // add the annotation to the current page
                $pageId = $this->currentPage;
                $this->o_page($pageId, 'annot', $id);

                // and add the action object which is going to be required
                switch ($options['type']) {
                    case 'link':
                        $this->objects[$id] = ['t' => 'annotation', 'info' => $options];
                        $this->numObj++;
                        $this->o_action($this->numObj, 'new', $options['url']);
                        $this->objects[$id]['info']['actionId'] = $this->numObj;
                        break;

                    case 'ilink':
                        // this is to a named internal link
                        $label = $options['label'];
                        $this->objects[$id] = ['t' => 'annotation', 'info' => $options];
                        $this->numObj++;
                        $this->o_action($this->numObj, 'new', ['type' => 'ilink', 'label' => $label]);
                        $this->objects[$id]['info']['actionId'] = $this->numObj;
                        break;
                }
                break;

            case 'out':
                $res = "\n$id 0 obj\n<< /Type /Annot";
                switch ($o['info']['type']) {
                    case 'link':
                    case 'ilink':
                        $res .= "\n/Subtype /Link";
                        break;
                }
                $res .= "\n/A " . $o['info']['actionId'] . " 0 R";
                $res .= "\n/Border [0 0 0]";
                $res .= "\n/H /I";
                $res .= "\n/Rect [ ";

                foreach ($o['info']['rect'] as $v) {
                    $res .= sprintf("%.4F ", $v);
                }

                $res .= "]";
                $res .= "\n>>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * a page object, it also creates a contents object to hold its contents
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_page($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->numPages++;
                $this->objects[$id] = [
                    't'    => 'page',
                    'info' => [
                        'parent'  => $this->currentNode,
                        'pageNum' => $this->numPages,
                        'mediaBox' => $this->objects[$this->currentNode]['info']['mediaBox']
                    ]
                ];

                if (is_array($options)) {
                    // then this must be a page insertion, array should contain 'rid','pos'=[before|after]
                    $options['id'] = $id;
                    $this->o_pages($this->currentNode, 'page', $options);
                } else {
                    $this->o_pages($this->currentNode, 'page', $id);
                }

                $this->currentPage = $id;
                //make a contents object to go with this page
                $this->numObj++;
                $this->o_contents($this->numObj, 'new', $id);
                $this->currentContents = $this->numObj;
                $this->objects[$id]['info']['contents'] = [];
                $this->objects[$id]['info']['contents'][] = $this->numObj;

                $match = ($this->numPages % 2 ? 'odd' : 'even');
                foreach ($this->addLooseObjects as $oId => $target) {
                    if ($target === 'all' || $match === $target) {
                        $this->objects[$id]['info']['contents'][] = $oId;
                    }
                }
                break;

            case 'content':
                $o['info']['contents'][] = $options;
                break;

            case 'annot':
                // add an annotation to this page
                if (!isset($o['info']['annot'])) {
                    $o['info']['annot'] = [];
                }

                // $options should contain the id of the annotation dictionary
                $o['info']['annot'][] = $options;
                break;

            case 'out':
                $res = "\n$id 0 obj\n<< /Type /Page";
                if (isset($o['info']['mediaBox'])) {
                    $tmp = $o['info']['mediaBox'];
                    $res .= "\n/MediaBox [" . sprintf(
                            '%.3F %.3F %.3F %.3F',
                            $tmp[0],
                            $tmp[1],
                            $tmp[2],
                            $tmp[3]
                        ) . ']';
                }
                $res .= "\n/Parent " . $o['info']['parent'] . " 0 R";

                if (isset($o['info']['annot'])) {
                    $res .= "\n/Annots [";
                    foreach ($o['info']['annot'] as $aId) {
                        $res .= " $aId 0 R";
                    }
                    $res .= " ]";
                }

                $count = count($o['info']['contents']);
                if ($count == 1) {
                    $res .= "\n/Contents " . $o['info']['contents'][0] . " 0 R";
                } else {
                    if ($count > 1) {
                        $res .= "\n/Contents [\n";

                        // reverse the page contents so added objects are below normal content
                        //foreach (array_reverse($o['info']['contents']) as $cId) {
                        // Back to normal now that I've got transparency working --Benj
                        foreach ($o['info']['contents'] as $cId) {
                            $res .= "$cId 0 R\n";
                        }
                        $res .= "]";
                    }
                }

                $res .= "\n>>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * the contents objects hold all of the content which appears on pages
     *
     * @param $id
     * @param $action
     * @param string|array $options
     * @return null|string
     */
    protected function o_contents($id, $action, $options = '')
    {
        if ($action !== 'new') {
            $o = &$this->objects[$id];
        }

        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'contents', 'c' => '', 'info' => []];
                if (mb_strlen($options, '8bit') && intval($options)) {
                    // then this contents is the primary for a page
                    $this->objects[$id]['onPage'] = $options;
                } else {
                    if ($options === 'raw') {
                        // then this page contains some other type of system object
                        $this->objects[$id]['raw'] = 1;
                    }
                }
                break;

            case 'add':
                // add more options to the declaration
                foreach ($options as $k => $v) {
                    $o['info'][$k] = $v;
                }

            case 'out':
                $tmp = $o['c'];
                $res = "\n$id 0 obj\n";

                if (isset($this->objects[$id]['raw'])) {
                    $res .= $tmp;
                } else {
                    $res .= "<<";
                    if ($this->compressionReady && $this->options['compression']) {
                        // then implement ZLIB based compression on this content stream
                        $res .= " /Filter /FlateDecode";
                        $tmp = gzcompress($tmp, 6);
                    }

                    if ($this->encrypted) {
                        $this->encryptInit($id);
                        $tmp = $this->ARC4($tmp);
                    }

                    foreach ($o['info'] as $k => $v) {
                        $res .= "\n/$k $v";
                    }

                    $res .= "\n/Length " . mb_strlen($tmp, '8bit') . " >>\nstream\n$tmp\nendstream";
                }

                $res .= "\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * @param $id
     * @param $action
     * @return string|null
     */
    protected function o_embedjs($id, $action)
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = [
                    't'    => 'embedjs',
                    'info' => [
                        'Names' => '[(EmbeddedJS) ' . ($id + 1) . ' 0 R]'
                    ]
                ];
                break;

            case 'out':
                $o = &$this->objects[$id];
                $res = "\n$id 0 obj\n<< ";
                foreach ($o['info'] as $k => $v) {
                    $res .= "\n/$k $v";
                }
                $res .= "\n>>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * @param $id
     * @param $action
     * @param string $code
     * @return null|string
     */
    protected function o_javascript($id, $action, $code = '')
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = [
                    't'    => 'javascript',
                    'info' => [
                        'S'  => '/JavaScript',
                        'JS' => '(' . $this->filterText($code, true, false) . ')',
                    ]
                ];
                break;

            case 'out':
                $o = &$this->objects[$id];
                $res = "\n$id 0 obj\n<< ";

                foreach ($o['info'] as $k => $v) {
                    $res .= "\n/$k $v";
                }
                $res .= "\n>>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * an image object, will be an XObject in the document, includes description and data
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_image($id, $action, $options = '')
    {
        switch ($action) {
            case 'new':
                // make the new object
                $this->objects[$id] = ['t' => 'image', 'data' => &$options['data'], 'info' => []];

                $info =& $this->objects[$id]['info'];

                $info['Type'] = '/XObject';
                $info['Subtype'] = '/Image';
                $info['Width'] = $options['iw'];
                $info['Height'] = $options['ih'];

                if (isset($options['masked']) && $options['masked']) {
                    $info['SMask'] = ($this->numObj - 1) . ' 0 R';
                }

                if (!isset($options['type']) || $options['type'] === 'jpg') {
                    if (!isset($options['channels'])) {
                        $options['channels'] = 3;
                    }

                    switch ($options['channels']) {
                        case 1:
                            $info['ColorSpace'] = '/DeviceGray';
                            break;
                        case 4:
                            $info['ColorSpace'] = '/DeviceCMYK';
                            break;
                        default:
                            $info['ColorSpace'] = '/DeviceRGB';
                            break;
                    }

                    if ($info['ColorSpace'] === '/DeviceCMYK') {
                        $info['Decode'] = '[1 0 1 0 1 0 1 0]';
                    }

                    $info['Filter'] = '/DCTDecode';
                    $info['BitsPerComponent'] = 8;
                } else {
                    if ($options['type'] === 'png') {
                        $info['Filter'] = '/FlateDecode';
                        $info['DecodeParms'] = '<< /Predictor 15 /Colors ' . $options['ncolor'] . ' /Columns ' . $options['iw'] . ' /BitsPerComponent ' . $options['bitsPerComponent'] . '>>';

                        if ($options['isMask']) {
                            $info['ColorSpace'] = '/DeviceGray';
                        } else {
                            if (mb_strlen($options['pdata'], '8bit')) {
                                $tmp = ' [ /Indexed /DeviceRGB ' . (mb_strlen($options['pdata'], '8bit') / 3 - 1) . ' ';
                                $this->numObj++;
                                $this->o_contents($this->numObj, 'new');
                                $this->objects[$this->numObj]['c'] = $options['pdata'];
                                $tmp .= $this->numObj . ' 0 R';
                                $tmp .= ' ]';
                                $info['ColorSpace'] = $tmp;

                                if (isset($options['transparency'])) {
                                    $transparency = $options['transparency'];
                                    switch ($transparency['type']) {
                                        case 'indexed':
                                            $tmp = ' [ ' . $transparency['data'] . ' ' . $transparency['data'] . '] ';
                                            $info['Mask'] = $tmp;
                                            break;

                                        case 'color-key':
                                            $tmp = ' [ ' .
                                                $transparency['r'] . ' ' . $transparency['r'] .
                                                $transparency['g'] . ' ' . $transparency['g'] .
                                                $transparency['b'] . ' ' . $transparency['b'] .
                                                ' ] ';
                                            $info['Mask'] = $tmp;
                                            break;
                                    }
                                }
                            } else {
                                if (isset($options['transparency'])) {
                                    $transparency = $options['transparency'];

                                    switch ($transparency['type']) {
                                        case 'indexed':
                                            $tmp = ' [ ' . $transparency['data'] . ' ' . $transparency['data'] . '] ';
                                            $info['Mask'] = $tmp;
                                            break;

                                        case 'color-key':
                                            $tmp = ' [ ' .
                                                $transparency['r'] . ' ' . $transparency['r'] . ' ' .
                                                $transparency['g'] . ' ' . $transparency['g'] . ' ' .
                                                $transparency['b'] . ' ' . $transparency['b'] .
                                                ' ] ';
                                            $info['Mask'] = $tmp;
                                            break;
                                    }
                                }
                                $info['ColorSpace'] = '/' . $options['color'];
                            }
                        }

                        $info['BitsPerComponent'] = $options['bitsPerComponent'];
                    }
                }

                // assign it a place in the named resource dictionary as an external object, according to
                // the label passed in with it.
                $this->o_pages($this->currentNode, 'xObject', ['label' => $options['label'], 'objNum' => $id]);

                // also make sure that we have the right procset object for it.
                $this->o_procset($this->procsetObjectId, 'add', 'ImageC');
                break;

            case 'out':
                $o = &$this->objects[$id];
                $tmp = &$o['data'];
                $res = "\n$id 0 obj\n<<";

                foreach ($o['info'] as $k => $v) {
                    $res .= "\n/$k $v";
                }

                if ($this->encrypted) {
                    $this->encryptInit($id);
                    $tmp = $this->ARC4($tmp);
                }

                $res .= "\n/Length " . mb_strlen($tmp, '8bit') . ">>\nstream\n$tmp\nendstream\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * graphics state object
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_extGState($id, $action, $options = "")
    {
        static $valid_params = [
            "LW",
            "LC",
            "LC",
            "LJ",
            "ML",
            "D",
            "RI",
            "OP",
            "op",
            "OPM",
            "Font",
            "BG",
            "BG2",
            "UCR",
            "TR",
            "TR2",
            "HT",
            "FL",
            "SM",
            "SA",
            "BM",
            "SMask",
            "CA",
            "ca",
            "AIS",
            "TK"
        ];

        switch ($action) {
            case "new":
                $this->objects[$id] = ['t' => 'extGState', 'info' => $options];

                // Tell the pages about the new resource
                $this->numStates++;
                $this->o_pages($this->currentNode, 'extGState', ["objNum" => $id, "stateNum" => $this->numStates]);
                break;

            case "out":
                $o = &$this->objects[$id];
                $res = "\n$id 0 obj\n<< /Type /ExtGState\n";

                foreach ($o["info"] as $k => $v) {
                    if (!in_array($k, $valid_params)) {
                        continue;
                    }
                    $res .= "/$k $v\n";
                }

                $res .= ">>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * @param integer $id
     * @param string $action
     * @param mixed $options
     * @return string
     */
    protected function o_xobject($id, $action, $options = '')
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'xobject', 'info' => $options, 'c' => ''];
                break;

            case 'procset':
                $this->objects[$id]['procset'] = $options;
                break;

            case 'font':
                $this->objects[$id]['fonts'][$options['fontNum']] = [
                  'objNum' => $options['objNum'],
                  'fontNum' => $options['fontNum']
                ];
                break;

            case 'xObject':
                $this->objects[$id]['xObjects'][] = ['objNum' => $options['objNum'], 'label' => $options['label']];
                break;

            case 'out':
                $o = &$this->objects[$id];
                $res = "\n$id 0 obj\n<< /Type /XObject\n";

                foreach ($o["info"] as $k => $v) {
                    switch($k)
                    {
                        case 'Subtype':
                            $res .= "/Subtype /$v\n";
                            break;
                        case 'bbox':
                            $res .= "/BBox [";
                            foreach ($v as $value) {
                                $res .= sprintf("%.4F ", $value);
                            }
                            $res .= "]\n";
                            break;
                        default:
                            $res .= "/$k $v\n";
                            break;
                    }
                }
                $res .= "/Matrix[1.0 0.0 0.0 1.0 0.0 0.0]\n";

                $res .= "/Resources <<";
                if (isset($o['procset'])) {
                    $res .= "\n/ProcSet " . $o['procset'] . " 0 R";
                } else {
                    $res .= "\n/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]";
                }
                if (isset($o['fonts']) && count($o['fonts'])) {
                    $res .= "\n/Font << ";
                    foreach ($o['fonts'] as $finfo) {
                        $res .= "\n/F" . $finfo['fontNum'] . " " . $finfo['objNum'] . " 0 R";
                    }
                    $res .= "\n>>";
                }
                if (isset($o['xObjects']) && count($o['xObjects'])) {
                    $res .= "\n/XObject << ";
                    foreach ($o['xObjects'] as $finfo) {
                        $res .= "\n/" . $finfo['label'] . " " . $finfo['objNum'] . " 0 R";
                    }
                    $res .= "\n>>";
                }
                $res .= "\n>>\n";

                $tmp = $o["c"];
                if ($this->compressionReady && $this->options['compression']) {
                    // then implement ZLIB based compression on this content stream
                    $res .= " /Filter /FlateDecode\n";
                    $tmp = gzcompress($tmp, 6);
                }

                if ($this->encrypted) {
                    $this->encryptInit($id);
                    $tmp = $this->ARC4($tmp);
                }

                $res .= "/Length " . mb_strlen($tmp, '8bit') . " >>\n";
                $res .= "stream\n" . $tmp . "\nendstream" . "\nendobj";;

                return $res;
        }

        return null;
    }

    /**
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_acroform($id, $action, $options = '')
    {
        switch ($action) {
            case "new":
                $this->o_catalog($this->catalogId, 'acroform', $id);
                $this->objects[$id] = array('t' => 'acroform', 'info' => $options);
                break;

            case 'addfield':
                $this->objects[$id]['info']['Fields'][] = $options;
                break;

            case 'font':
                $this->objects[$id]['fonts'][$options['fontNum']] = [
                  'objNum' => $options['objNum'],
                  'fontNum' => $options['fontNum']
                ];
                break;

            case "out":
                $o = &$this->objects[$id];
                $res = "\n$id 0 obj\n<<";

                foreach ($o["info"] as $k => $v) {
                    switch($k) {
                        case 'Fields':
                            $res .= " /Fields [";
                            foreach ($v as $i) {
                                $res .= "$i 0 R ";
                            }
                            $res .= "]\n";
                            break;
                        default:
                            $res .= "/$k $v\n";
                    }
                }

                $res .= "/DR <<\n";
                if (isset($o['fonts']) && count($o['fonts'])) {
                    $res .= "/Font << \n";
                    foreach ($o['fonts'] as $finfo) {
                        $res .= "/F" . $finfo['fontNum'] . " " . $finfo['objNum'] . " 0 R\n";
                    }
                    $res .= ">>\n";
                }
                $res .= ">>\n";

                $res .= ">>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * @param $id
     * @param $action
     * @param mixed $options
     * @return null|string
     */
    protected function o_field($id, $action, $options = '')
    {
        switch ($action) {
            case "new":
                $this->o_page($options['pageid'], 'annot', $id);
                $this->o_acroform($this->acroFormId, 'addfield', $id);
                $this->objects[$id] = ['t' => 'field', 'info' => $options];
                break;

            case 'set':
                $this->objects[$id]['info'] = array_merge($this->objects[$id]['info'], $options);
                break;

            case "out":
                $o = &$this->objects[$id];
                $res = "\n$id 0 obj\n<< /Type /Annot /Subtype /Widget \n";

                $encrypted = $this->encrypted;
                if ($encrypted) {
                    $this->encryptInit($id);
                }

                foreach ($o["info"] as $k => $v) {
                    switch ($k) {
                        case 'pageid':
                            $res .= "/P $v 0 R\n";
                            break;
                        case 'value':
                            if ($encrypted) {
                                $v = $this->filterText($this->ARC4($v), false, false);
                            }
                            $res .= "/V ($v)\n";
                            break;
                        case 'refvalue':
                            $res .= "/V $v 0 R\n";
                            break;
                        case 'da':
                            if ($encrypted) {
                                $v = $this->filterText($this->ARC4($v), false, false);
                            }
                            $res .= "/DA ($v)\n";
                            break;
                        case 'options':
                            $res .= "/Opt [\n";
                            foreach ($v as $opt) {
                                if ($encrypted) {
                                    $opt = $this->filterText($this->ARC4($opt), false, false);
                                }
                                $res .= "($opt)\n";
                            }
                            $res .= "]\n";
                            break;
                        case 'rect':
                            $res .= "/Rect [";
                            foreach ($v as $value) {
                                $res .= sprintf("%.4F ", $value);
                            }
                            $res .= "]\n";
                            break;
                        case 'appearance':
                            $res .= "/AP << ";
                            foreach ($v as $a => $ref) {
                                $res .= "/$a $ref 0 R ";
                            }
                            $res .= ">>\n";
                            break;
                        case 'T':
                            if($encrypted) {
                                $v = $this->filterText($this->ARC4($v), false, false);
                            }
                            $res .= "/T ($v)\n";
                            break;
                        default:
                            $res .= "/$k $v\n";
                    }

                }

                $res .= ">>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return null|string
     */
    protected function o_sig($id, $action, $options = '')
    {
        $sign_maxlen = $this->signatureMaxLen;

        switch ($action) {
            case "new":
                $this->objects[$id] = array('t' => 'sig', 'info' => $options);
                $this->byteRange[$id] = ['t' => 'sig'];
                break;

            case 'byterange':
                $o = &$this->objects[$id];
                $content =& $options['content'];
                $content_len = strlen($content);
                $pos = strpos($content, sprintf("/ByteRange [ %'.010d", $id));
                $len = strlen('/ByteRange [ ********** ********** ********** ********** ]');
                $rangeStartPos = $pos + $len + 1 + 10; // before '<'
                $content = substr_replace($content, str_pad(sprintf('/ByteRange [ 0 %u %u %u ]', $rangeStartPos, $rangeStartPos + $sign_maxlen + 2, $content_len - 2 - $sign_maxlen - $rangeStartPos ), $len, ' ', STR_PAD_RIGHT), $pos, $len);

                $fuid = uniqid();
                $tmpInput = $this->tmp . "/pkcs7.tmp." . $fuid . '.in';
                $tmpOutput = $this->tmp . "/pkcs7.tmp." . $fuid . '.out';

                if (file_put_contents($tmpInput, substr($content, 0, $rangeStartPos)) === false) {
                    throw new \Exception("Unable to write temporary file for signing.");
                }
                if (file_put_contents($tmpInput, substr($content, $rangeStartPos + 2 + $sign_maxlen),
                    FILE_APPEND) === false) {
                    throw new \Exception("Unable to write temporary file for signing.");
                }

                if (openssl_pkcs7_sign($tmpInput, $tmpOutput,
                    $o['info']['SignCert'],
                    array($o['info']['PrivKey'], $o['info']['Password']),
                    array(), PKCS7_BINARY | PKCS7_DETACHED) === false) {
                    throw new \Exception("Failed to prepare signature.");
                }

                $signature = file_get_contents($tmpOutput);

                unlink($tmpInput);
                unlink($tmpOutput);

                $sign = substr($signature, (strpos($signature, "%%EOF\n\n------") + 13));
                list($head, $signature) = explode("\n\n", $sign);

                $signature = base64_decode(trim($signature));

                $signature = current(unpack('H*', $signature));
                $signature = str_pad($signature, $sign_maxlen, '0');
                $siglen = strlen($signature);
                if (strlen($signature) > $sign_maxlen) {
                    throw new \Exception("Signature length ($siglen) exceeds the $sign_maxlen limit.");
                }

                $content = substr_replace($content, $signature, $rangeStartPos + 1, $sign_maxlen);
                break;

            case "out":
                $res = "\n$id 0 obj\n<<\n";

                $encrypted = $this->encrypted;
                if ($encrypted) {
                    $this->encryptInit($id);
                }

                $res .= "/ByteRange " .sprintf("[ %'.010d ********** ********** ********** ]\n", $id);
                $res .= "/Contents <" . str_pad('', $sign_maxlen, '0') . ">\n";
                $res .= "/Filter/Adobe.PPKLite\n"; //PPKMS \n";
                $res .= "/Type/Sig/SubFilter/adbe.pkcs7.detached \n";

                $date = "D:" . substr_replace(date('YmdHisO'), '\'', -2, 0) . '\'';
                if ($encrypted) {
                    $date = $this->ARC4($date);
                }

                $res .= "/M ($date)\n";
                $res .= "/Prop_Build << /App << /Name /DomPDF >> /Filter << /Name /Adobe.PPKLite >> >>\n";

                $o = &$this->objects[$id];
                foreach ($o['info'] as $k => $v) {
                    switch($k) {
                        case 'Name':
                        case 'Location':
                        case 'Reason':
                        case 'ContactInfo':
                            if ($v !== null && $v !== '') {
                                $res .= "/$k (" .
                                  ($encrypted ? $this->filterText($this->ARC4($v), false, false) : $v) . ") \n";
                            }
                            break;
                    }
                }
                $res .= ">>\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * encryption object.
     *
     * @param $id
     * @param $action
     * @param string $options
     * @return string|null
     */
    protected function o_encryption($id, $action, $options = '')
    {
        switch ($action) {
            case 'new':
                // make the new object
                $this->objects[$id] = ['t' => 'encryption', 'info' => $options];
                $this->arc4_objnum = $id;
                break;

            case 'keys':
                // figure out the additional parameters required
                $pad = chr(0x28) . chr(0xBF) . chr(0x4E) . chr(0x5E) . chr(0x4E) . chr(0x75) . chr(0x8A) . chr(0x41)
                    . chr(0x64) . chr(0x00) . chr(0x4E) . chr(0x56) . chr(0xFF) . chr(0xFA) . chr(0x01) . chr(0x08)
                    . chr(0x2E) . chr(0x2E) . chr(0x00) . chr(0xB6) . chr(0xD0) . chr(0x68) . chr(0x3E) . chr(0x80)
                    . chr(0x2F) . chr(0x0C) . chr(0xA9) . chr(0xFE) . chr(0x64) . chr(0x53) . chr(0x69) . chr(0x7A);

                $info = $this->objects[$id]['info'];

                $len = mb_strlen($info['owner'], '8bit');

                if ($len > 32) {
                    $owner = substr($info['owner'], 0, 32);
                } else {
                    if ($len < 32) {
                        $owner = $info['owner'] . substr($pad, 0, 32 - $len);
                    } else {
                        $owner = $info['owner'];
                    }
                }

                $len = mb_strlen($info['user'], '8bit');
                if ($len > 32) {
                    $user = substr($info['user'], 0, 32);
                } else {
                    if ($len < 32) {
                        $user = $info['user'] . substr($pad, 0, 32 - $len);
                    } else {
                        $user = $info['user'];
                    }
                }

                $tmp = $this->md5_16($owner);
                $okey = substr($tmp, 0, 5);
                $this->ARC4_init($okey);
                $ovalue = $this->ARC4($user);
                $this->objects[$id]['info']['O'] = $ovalue;

                // now make the u value, phew.
                $tmp = $this->md5_16(
                    $user . $ovalue . chr($info['p']) . chr(255) . chr(255) . chr(255) . hex2bin($this->fileIdentifier)
                );

                $ukey = substr($tmp, 0, 5);
                $this->ARC4_init($ukey);
                $this->encryptionKey = $ukey;
                $this->encrypted = true;
                $uvalue = $this->ARC4($pad);
                $this->objects[$id]['info']['U'] = $uvalue;
                // initialize the arc4 array
                break;

            case 'out':
                $o = &$this->objects[$id];

                $res = "\n$id 0 obj\n<<";
                $res .= "\n/Filter /Standard";
                $res .= "\n/V 1";
                $res .= "\n/R 2";
                $res .= "\n/O (" . $this->filterText($o['info']['O'], false, false) . ')';
                $res .= "\n/U (" . $this->filterText($o['info']['U'], false, false) . ')';
                // and the p-value needs to be converted to account for the twos-complement approach
                $o['info']['p'] = (($o['info']['p'] ^ 255) + 1) * -1;
                $res .= "\n/P " . ($o['info']['p']);
                $res .= "\n>>\nendobj";

                return $res;
        }

        return null;
    }

    protected function o_indirect_references($id, $action, $options = null)
    {
        switch ($action) {
            case 'new':
            case 'add':
                if ($id === 0) {
                    $id = ++$this->numObj;
                    $this->o_catalog($this->catalogId, 'names', $id);
                    $this->objects[$id] = ['t' => 'indirect_references', 'info' => $options];
                    $this->indirectReferenceId = $id;
                } else {
                    $this->objects[$id]['info'] = array_merge($this->objects[$id]['info'], $options);
                }
                break;
            case 'out':
                $res = "\n$id 0 obj << ";

                foreach($this->objects[$id]['info'] as $referenceObjName => $referenceObjId) {
                    $res .= "/$referenceObjName $referenceObjId 0 R ";
                }

                $res .= ">> endobj";
                return $res;
        }

        return null;
    }

    protected function o_names($id, $action, $options = null)
    {
        switch ($action) {
            case 'new':
            case 'add':
                if ($id === 0) {
                    $id = ++$this->numObj;
                    $this->objects[$id] = ['t' => 'names', 'info' => [$options]];
                    $this->o_indirect_references($this->indirectReferenceId, 'add', ['EmbeddedFiles' => $id]);
                    $this->embeddedFilesId = $id;
                } else {
                    $this->objects[$id]['info'][] = $options;
                }
                break;
            case 'out':
                $info = &$this->objects[$id]['info'];
                $res = '';
                if (count($info) > 0) {
                    $res = "\n$id 0 obj << /Names [ ";

                    if ($this->encrypted) {
                        $this->encryptInit($id);
                    }

                    foreach ($info as $entry) {
                        if ($this->encrypted) {
                            $filename = $this->ARC4($entry['filename']);
                        } else {
                            $filename = $entry['filename'];
                        }

                        $res .= "($filename) " . $entry['dict_reference'] . " 0 R ";
                    }

                    $res .= "] >> endobj";
                }
                return $res;
        }

        return null;
    }

    protected function o_embedded_file_dictionary($id, $action, $options = null)
    {
        switch ($action) {
            case 'new':
                $embeddedFileId = ++$this->numObj;
                $options['embedded_reference'] = $embeddedFileId;
                $this->objects[$id] = ['t' => 'embedded_file_dictionary', 'info' => $options];
                $this->o_embedded_file($embeddedFileId, 'new', $options);
                $options['dict_reference'] = $id;
                $this->o_names($this->embeddedFilesId, 'add', $options);
                break;
            case 'out':
                $info = &$this->objects[$id]['info'];

                if ($this->encrypted) {
                    $this->encryptInit($id);
                    $filename = $this->ARC4($info['filename']);
                    $description = $this->ARC4($info['description']);
                } else {
                    $filename = $info['filename'];
                    $description = $info['description'];
                }

                $res = "\n$id 0 obj <</Type /Filespec /EF";
                $res .= " <</F " . $info['embedded_reference'] . " 0 R >>";
                $res .= " /F ($filename) /UF ($filename) /Desc ($description)";
                $res .= " >> endobj";
                return $res;
        }

        return null;
    }

    protected function o_embedded_file($id, $action, $options = null): ?string
    {
        switch ($action) {
            case 'new':
                $this->objects[$id] = ['t' => 'embedded_file', 'info' => $options];
                break;
            case 'out':
                $info = &$this->objects[$id]['info'];

                if ($this->compressionReady) {
                    $filepath = $info['filepath'];
                    $checksum = md5_file($filepath);
                    $f = fopen($filepath, "rb");

                    $file_content_compressed = '';
                    $deflateContext = deflate_init(ZLIB_ENCODING_DEFLATE, ['level' => 6]);
                    while (($block = fread($f, 8192))) {
                        $file_content_compressed .= deflate_add($deflateContext, $block, ZLIB_NO_FLUSH);
                    }
                    $file_content_compressed .= deflate_add($deflateContext, '', ZLIB_FINISH);
                    $file_size_uncompressed = ftell($f);
                    fclose($f);
                } else {
                    $file_content = file_get_contents($info['filepath']);
                    $file_size_uncompressed = mb_strlen($file_content, '8bit');
                    $checksum = md5($file_content);
                }

                if ($this->encrypted) {
                    $this->encryptInit($id);
                    $checksum = $this->ARC4($checksum);
                    $file_content_compressed = $this->ARC4($file_content_compressed);
                }
                $file_size_compressed = mb_strlen($file_content_compressed, '8bit');

                $res = "\n$id 0 obj <</Params <</Size $file_size_uncompressed /CheckSum ($checksum) >>" .
                    " /Type/EmbeddedFile /Filter/FlateDecode" .
                    " /Length $file_size_compressed >> stream\n$file_content_compressed\nendstream\nendobj";

                return $res;
        }

        return null;
    }

    /**
     * ARC4 functions
     * A series of function to implement ARC4 encoding in PHP
     */

    /**
     * calculate the 16 byte version of the 128 bit md5 digest of the string
     *
     * @param $string
     * @return string
     */
    function md5_16($string)
    {
        $tmp = md5($string);
        $out = '';
        for ($i = 0; $i <= 30; $i = $i + 2) {
            $out .= chr(hexdec(substr($tmp, $i, 2)));
        }

        return $out;
    }

    /**
     * initialize the encryption for processing a particular object
     *
     * @param $id
     */
    function encryptInit($id)
    {
        $tmp = $this->encryptionKey;
        $hex = dechex($id);
        if (mb_strlen($hex, '8bit') < 6) {
            $hex = substr('000000', 0, 6 - mb_strlen($hex, '8bit')) . $hex;
        }
        $tmp .= chr(hexdec(substr($hex, 4, 2)))
            . chr(hexdec(substr($hex, 2, 2)))
            . chr(hexdec(substr($hex, 0, 2)))
            . chr(0)
            . chr(0)
        ;
        $key = $this->md5_16($tmp);
        $this->ARC4_init(substr($key, 0, 10));
    }

    /**
     * initialize the ARC4 encryption
     *
     * @param string $key
     */
    function ARC4_init($key = '')
    {
        $this->arc4 = '';

        // setup the control array
        if (mb_strlen($key, '8bit') == 0) {
            return;
        }

        $k = '';
        while (mb_strlen($k, '8bit') < 256) {
            $k .= $key;
        }

        $k = substr($k, 0, 256);
        for ($i = 0; $i < 256; $i++) {
            $this->arc4 .= chr($i);
        }

        $j = 0;

        for ($i = 0; $i < 256; $i++) {
            $t = $this->arc4[$i];
            $j = ($j + ord($t) + ord($k[$i])) % 256;
            $this->arc4[$i] = $this->arc4[$j];
            $this->arc4[$j] = $t;
        }
    }

    /**
     * ARC4 encrypt a text string
     *
     * @param $text
     * @return string
     */
    function ARC4($text)
    {
        $len = mb_strlen($text, '8bit');
        $a = 0;
        $b = 0;
        $c = $this->arc4;
        $out = '';
        for ($i = 0; $i < $len; $i++) {
            $a = ($a + 1) % 256;
            $t = $c[$a];
            $b = ($b + ord($t)) % 256;
            $c[$a] = $c[$b];
            $c[$b] = $t;
            $k = ord($c[(ord($c[$a]) + ord($c[$b])) % 256]);
            $out .= chr(ord($text[$i]) ^ $k);
        }

        return $out;
    }

    /**
     * functions which can be called to adjust or add to the document
     */

    /**
     * add a link in the document to an external URL
     *
     * @param $url
     * @param $x0
     * @param $y0
     * @param $x1
     * @param $y1
     */
    function addLink($url, $x0, $y0, $x1, $y1)
    {
        $this->numObj++;
        $info = ['type' => 'link', 'url' => $url, 'rect' => [$x0, $y0, $x1, $y1]];
        $this->o_annotation($this->numObj, 'new', $info);
    }

    /**
     * add a link in the document to an internal destination (ie. within the document)
     *
     * @param $label
     * @param $x0
     * @param $y0
     * @param $x1
     * @param $y1
     */
    function addInternalLink($label, $x0, $y0, $x1, $y1)
    {
        $this->numObj++;
        $info = ['type' => 'ilink', 'label' => $label, 'rect' => [$x0, $y0, $x1, $y1]];
        $this->o_annotation($this->numObj, 'new', $info);
    }

    /**
     * set the encryption of the document
     * can be used to turn it on and/or set the passwords which it will have.
     * also the functions that the user will have are set here, such as print, modify, add
     *
     * @param string $userPass
     * @param string $ownerPass
     * @param array $pc
     */
    function setEncryption($userPass = '', $ownerPass = '', $pc = [])
    {
        $p = bindec("11000000");

        $options = ['print' => 4, 'modify' => 8, 'copy' => 16, 'add' => 32];

        foreach ($pc as $k => $v) {
            if ($v && isset($options[$k])) {
                $p += $options[$k];
            } else {
                if (isset($options[$v])) {
                    $p += $options[$v];
                }
            }
        }

        // implement encryption on the document
        if ($this->arc4_objnum == 0) {
            // then the block does not exist already, add it.
            $this->numObj++;
            if (mb_strlen($ownerPass) == 0) {
                $ownerPass = $userPass;
            }

            $this->o_encryption($this->numObj, 'new', ['user' => $userPass, 'owner' => $ownerPass, 'p' => $p]);
        }
    }

    /**
     * should be used for internal checks, not implemented as yet
     */
    function checkAllHere()
    {
    }

    /**
     * return the pdf stream as a string returned from the function
     *
     * @param bool $debug
     * @return string
     */
    function output($debug = false)
    {
        if ($debug) {
            // turn compression off
            $this->options['compression'] = false;
        }

        if ($this->javascript) {
            $this->numObj++;

            $js_id = $this->numObj;
            $this->o_embedjs($js_id, 'new');
            $this->o_javascript(++$this->numObj, 'new', $this->javascript);

            $id = $this->catalogId;

            $this->o_indirect_references($this->indirectReferenceId, 'add', ['JavaScript' => $js_id]);
        }

        if ($this->fileIdentifier === '') {
            $tmp = implode('', $this->objects[$this->infoObject]['info']);
            $this->fileIdentifier = md5('DOMPDF' . __FILE__ . $tmp . microtime() . mt_rand());
        }

        if ($this->arc4_objnum) {
            $this->o_encryption($this->arc4_objnum, 'keys');
            $this->ARC4_init($this->encryptionKey);
        }

        $this->checkAllHere();

        $xref = [];
        $content = '%PDF-' . self::PDF_VERSION;
        $pos = mb_strlen($content, '8bit');

        // pre-process o_font objects before output of all objects
        foreach ($this->objects as $k => $v) {
            if ($v['t'] === 'font') {
                $this->o_font($k, 'add');
            }
        }

        foreach ($this->objects as $k => $v) {
            $tmp = 'o_' . $v['t'];
            $cont = $this->$tmp($k, 'out');
            $content .= $cont;
            $xref[] = $pos + 1; //+1 to account for \n at the start of each object
            $pos += mb_strlen($cont, '8bit');
        }

        $content .= "\nxref\n0 " . (count($xref) + 1) . "\n0000000000 65535 f \n";

        foreach ($xref as $p) {
            $content .= str_pad($p, 10, "0", STR_PAD_LEFT) . " 00000 n \n";
        }

        $content .= "trailer\n<<\n" .
            '/Size ' . (count($xref) + 1) . "\n" .
            '/Root 1 0 R' . "\n" .
            '/Info ' . $this->infoObject . " 0 R\n"
        ;

        // if encryption has been applied to this document then add the marker for this dictionary
        if ($this->arc4_objnum > 0) {
            $content .= '/Encrypt ' . $this->arc4_objnum . " 0 R\n";
        }

        $content .= '/ID[<' . $this->fileIdentifier . '><' . $this->fileIdentifier . ">]\n";

        // account for \n added at start of xref table
        $pos++;

        $content .= ">>\nstartxref\n$pos\n%%EOF\n";

        if (count($this->byteRange) > 0) {
            foreach ($this->byteRange as $k => $v) {
                $tmp = 'o_' . $v['t'];
                $this->$tmp($k, 'byterange', ['content' => &$content]);
            }
        }

        return $content;
    }

    /**
     * initialize a new document
     * if this is called on an existing document results may be unpredictable, but the existing document would be lost at minimum
     * this function is called automatically by the constructor function
     *
     * @param array $pageSize
     */
    private function newDocument($pageSize = [0, 0, 612, 792])
    {
        $this->numObj = 0;
        $this->objects = [];

        $this->numObj++;
        $this->o_catalog($this->numObj, 'new');

        $this->numObj++;
        $this->o_outlines($this->numObj, 'new');

        $this->numObj++;
        $this->o_pages($this->numObj, 'new');

        $this->o_pages($this->numObj, 'mediaBox', $pageSize);
        $this->currentNode = 3;

        $this->numObj++;
        $this->o_procset($this->numObj, 'new');

        $this->numObj++;
        $this->o_info($this->numObj, 'new');

        $this->numObj++;
        $this->o_page($this->numObj, 'new');

        // need to store the first page id as there is no way to get it to the user during
        // startup
        $this->firstPageId = $this->currentContents;
    }

    /**
     * open the font file and return a php structure containing it.
     * first check if this one has been done before and saved in a form more suited to php
     * note that if a php serialized version does not exist it will try and make one, but will
     * require write access to the directory to do it... it is MUCH faster to have these serialized
     * files.
     *
     * @param $font
     */
    private function openFont($font)
    {
        // assume that $font contains the path and file but not the extension
        $name = basename($font);
        $dir = dirname($font) . '/';

        $fontcache = $this->fontcache;
        if ($fontcache == '') {
            $fontcache = rtrim($dir, DIRECTORY_SEPARATOR."/\\");
        }

        //$name       filename without folder and extension of font metrics
        //$dir        folder of font metrics
        //$fontcache  folder of runtime created php serialized version of font metrics.
        //            If this is not given, the same folder as the font metrics will be used.
        //            Storing and reusing serialized versions improves speed much

        $this->addMessage("openFont: $font - $name");

        if (!$this->isUnicode || in_array(mb_strtolower(basename($name)), self::$coreFonts)) {
            $metrics_name = "$name.afm";
        } else {
            $metrics_name = "$name.ufm";
        }

        $cache_name = "$metrics_name.php";
        $this->addMessage("metrics: $metrics_name, cache: $cache_name");

        if (file_exists($fontcache . '/' . $cache_name)) {
            $this->addMessage("openFont: php file exists $fontcache/$cache_name");
            $this->fonts[$font] = require($fontcache . '/' . $cache_name);

            if (!isset($this->fonts[$font]['_version_']) || $this->fonts[$font]['_version_'] != $this->fontcacheVersion) {
                // if the font file is old, then clear it out and prepare for re-creation
                $this->addMessage('openFont: clear out, make way for new version.');
                $this->fonts[$font] = null;
                unset($this->fonts[$font]);
            }
        } else {
            $old_cache_name = "php_$metrics_name";
            if (file_exists($fontcache . '/' . $old_cache_name)) {
                $this->addMessage(
                    "openFont: php file doesn't exist $fontcache/$cache_name, creating it from the old format"
                );
                $old_cache = file_get_contents($fontcache . '/' . $old_cache_name);
                file_put_contents($fontcache . '/' . $cache_name, '<?php return ' . $old_cache . ';');

                $this->openFont($font);
                return;
            }
        }

        if (!isset($this->fonts[$font]) && file_exists($dir . $metrics_name)) {
            // then rebuild the php_<font>.afm file from the <font>.afm file
            $this->addMessage("openFont: build php file from $dir$metrics_name");
            $data = [];

            // 20 => 'space'
            $data['codeToName'] = [];

            // Since we're not going to enable Unicode for the core fonts we need to use a font-based
            // setting for Unicode support rather than a global setting.
            $data['isUnicode'] = (strtolower(substr($metrics_name, -3)) !== 'afm');

            $cidtogid = '';
            if ($data['isUnicode']) {
                $cidtogid = str_pad('', 256 * 256 * 2, "\x00");
            }

            $file = file($dir . $metrics_name);

            foreach ($file as $rowA) {
                $row = trim($rowA);
                $pos = strpos($row, ' ');

                if ($pos) {
                    // then there must be some keyword
                    $key = substr($row, 0, $pos);
                    switch ($key) {
                        case 'FontName':
                        case 'FullName':
                        case 'FamilyName':
                        case 'PostScriptName':
                        case 'Weight':
                        case 'ItalicAngle':
                        case 'IsFixedPitch':
                        case 'CharacterSet':
                        case 'UnderlinePosition':
                        case 'UnderlineThickness':
                        case 'Version':
                        case 'EncodingScheme':
                        case 'CapHeight':
                        case 'XHeight':
                        case 'Ascender':
                        case 'Descender':
                        case 'StdHW':
                        case 'StdVW':
                        case 'StartCharMetrics':
                        case 'FontHeightOffset': // OAR - Added so we can offset the height calculation of a Windows font.  Otherwise it's too big.
                            $data[$key] = trim(substr($row, $pos));
                            break;

                        case 'FontBBox':
                            $data[$key] = explode(' ', trim(substr($row, $pos)));
                            break;

                        //C 39 ; WX 222 ; N quoteright ; B 53 463 157 718 ;
                        case 'C': // Found in AFM files
                            $bits = explode(';', trim($row));
                            $dtmp = ['C' => null, 'N' => null, 'WX' => null, 'B' => []];

                            foreach ($bits as $bit) {
                                $bits2 = explode(' ', trim($bit));
                                if (mb_strlen($bits2[0], '8bit') == 0) {
                                    continue;
                                }

                                if (count($bits2) > 2) {
                                    $dtmp[$bits2[0]] = [];
                                    for ($i = 1; $i < count($bits2); $i++) {
                                        $dtmp[$bits2[0]][] = $bits2[$i];
                                    }
                                } else {
                                    if (count($bits2) == 2) {
                                        $dtmp[$bits2[0]] = $bits2[1];
                                    }
                                }
                            }

                            $c = (int)$dtmp['C'];
                            $n = $dtmp['N'];
                            $width = floatval($dtmp['WX']);

                            if ($c >= 0) {
                                if (!ctype_xdigit($n) || $c != hexdec($n)) {
                                    $data['codeToName'][$c] = $n;
                                }
                                $data['C'][$c] = $width;
                            } elseif (isset($n)) {
                                $data['C'][$n] = $width;
                            }

                            if (!isset($data['MissingWidth']) && $c === -1 && $n === '.notdef') {
                                $data['MissingWidth'] = $width;
                            }

                            break;

                        // U 827 ; WX 0 ; N squaresubnosp ; G 675 ;
                        case 'U': // Found in UFM files
                            if (!$data['isUnicode']) {
                                break;
                            }

                            $bits = explode(';', trim($row));
                            $dtmp = ['G' => null, 'N' => null, 'U' => null, 'WX' => null];

                            foreach ($bits as $bit) {
                                $bits2 = explode(' ', trim($bit));
                                if (mb_strlen($bits2[0], '8bit') === 0) {
                                    continue;
                                }

                                if (count($bits2) > 2) {
                                    $dtmp[$bits2[0]] = [];
                                    for ($i = 1; $i < count($bits2); $i++) {
                                        $dtmp[$bits2[0]][] = $bits2[$i];
                                    }
                                } else {
                                    if (count($bits2) == 2) {
                                        $dtmp[$bits2[0]] = $bits2[1];
                                    }
                                }
                            }

                            $c = (int)$dtmp['U'];
                            $n = $dtmp['N'];
                            $glyph = $dtmp['G'];
                            $width = floatval($dtmp['WX']);

                            if ($c >= 0) {
                                // Set values in CID to GID map
                                if ($c >= 0 && $c < 0xFFFF && $glyph) {
                                    $cidtogid[$c * 2] = chr($glyph >> 8);
                                    $cidtogid[$c * 2 + 1] = chr($glyph & 0xFF);
                                }

                                if (!ctype_xdigit($n) || $c != hexdec($n)) {
                                    $data['codeToName'][$c] = $n;
                                }
                                $data['C'][$c] = $width;
                            } elseif (isset($n)) {
                                $data['C'][$n] = $width;
                            }

                            if (!isset($data['MissingWidth']) && $c === -1 && $n === '.notdef') {
                                $data['MissingWidth'] = $width;
                            }

                            break;

                        case 'KPX':
                            break; // don't include them as they are not used yet
                            //KPX Adieresis yacute -40
                            /*$bits = explode(' ', trim($row));
                            $data['KPX'][$bits[1]][$bits[2]] = $bits[3];
                            break;*/
                    }
                }
            }

            if ($this->compressionReady && $this->options['compression']) {
                // then implement ZLIB based compression on CIDtoGID string
                $data['CIDtoGID_Compressed'] = true;
                $cidtogid = gzcompress($cidtogid, 6);
            }
            $data['CIDtoGID'] = base64_encode($cidtogid);
            $data['_version_'] = $this->fontcacheVersion;
            $this->fonts[$font] = $data;

            //Because of potential trouble with php safe mode, expect that the folder already exists.
            //If not existing, this will hit performance because of missing cached results.
            if (is_dir($fontcache) && is_writable($fontcache)) {
                file_put_contents($fontcache . '/' . $cache_name, '<?php return ' . var_export($data, true) . ';');
            }
            $data = null;
        }

        if (!isset($this->fonts[$font])) {
            $this->addMessage("openFont: no font file found for $font. Do you need to run load_font.php?");
        }

        //pre_r($this->messages);
    }

    /**
     * if the font is not loaded then load it and make the required object
     * else just make it the current font
     * the encoding array can contain 'encoding'=> 'none','WinAnsiEncoding','MacRomanEncoding' or 'MacExpertEncoding'
     * note that encoding='none' will need to be used for symbolic fonts
     * and 'differences' => an array of mappings between numbers 0->255 and character names.
     *
     * @param $fontName
     * @param string $encoding
     * @param bool $set
     * @param bool $isSubsetting
     * @return int
     * @throws FontNotFoundException
     */
    function selectFont($fontName, $encoding = '', $set = true, $isSubsetting = true)
    {
        if ($fontName === null || $fontName === '') {
            return $this->currentFontNum;
        }

        $ext = substr($fontName, -4);
        if ($ext === '.afm' || $ext === '.ufm') {
            $fontName = substr($fontName, 0, mb_strlen($fontName) - 4);
        }

        if (!isset($this->fonts[$fontName])) {
            $this->addMessage("selectFont: selecting - $fontName - $encoding, $set");

            // load the file
            $this->openFont($fontName);

            if (isset($this->fonts[$fontName])) {
                $this->numObj++;
                $this->numFonts++;

                $font = &$this->fonts[$fontName];

                $name = basename($fontName);
                $options = ['name' => $name, 'fontFileName' => $fontName, 'isSubsetting' => $isSubsetting];

                if (is_array($encoding)) {
                    // then encoding and differences might be set
                    if (isset($encoding['encoding'])) {
                        $options['encoding'] = $encoding['encoding'];
                    }

                    if (isset($encoding['differences'])) {
                        $options['differences'] = $encoding['differences'];
                    }
                } else {
                    if (mb_strlen($encoding, '8bit')) {
                        // then perhaps only the encoding has been set
                        $options['encoding'] = $encoding;
                    }
                }

                $this->o_font($this->numObj, 'new', $options);

                if (file_exists("$fontName.ttf")) {
                    $fileSuffix = 'ttf';
                } elseif (file_exists("$fontName.TTF")) {
                    $fileSuffix = 'TTF';
                } elseif (file_exists("$fontName.pfb")) {
                    $fileSuffix = 'pfb';
                } elseif (file_exists("$fontName.PFB")) {
                    $fileSuffix = 'PFB';
                } else {
                    $fileSuffix = '';
                }

                $font['fileSuffix'] = $fileSuffix;

                $font['fontNum'] = $this->numFonts;
                $font['isSubsetting'] = $isSubsetting && $font['isUnicode'] && strtolower($fileSuffix) === 'ttf';

                // also set the differences here, note that this means that these will take effect only the
                //first time that a font is selected, else they are ignored
                if (isset($options['differences'])) {
                    $font['differences'] = $options['differences'];
                }
            }
        }

        if ($set && isset($this->fonts[$fontName])) {
            // so if for some reason the font was not set in the last one then it will not be selected
            $this->currentBaseFont = $fontName;

            // the next lines mean that if a new font is selected, then the current text state will be
            // applied to it as well.
            $this->currentFont = $this->currentBaseFont;
            $this->currentFontNum = $this->fonts[$this->currentFont]['fontNum'];
        }

        return $this->currentFontNum;
    }

    /**
     * sets up the current font, based on the font families, and the current text state
     * note that this system is quite flexible, a bold-italic font can be completely different to a
     * italic-bold font, and even bold-bold will have to be defined within the family to have meaning
     * This function is to be called whenever the currentTextState is changed, it will update
     * the currentFont setting to whatever the appropriate family one is.
     * If the user calls selectFont themselves then that will reset the currentBaseFont, and the currentFont
     * This function will change the currentFont to whatever it should be, but will not change the
     * currentBaseFont.
     */
    private function setCurrentFont()
    {
        //   if (strlen($this->currentBaseFont) == 0){
        //     // then assume an initial font
        //     $this->selectFont($this->defaultFont);
        //   }
        //   $cf = substr($this->currentBaseFont,strrpos($this->currentBaseFont,'/')+1);
        //   if (strlen($this->currentTextState)
        //     && isset($this->fontFamilies[$cf])
        //       && isset($this->fontFamilies[$cf][$this->currentTextState])){
        //     // then we are in some state or another
        //     // and this font has a family, and the current setting exists within it
        //     // select the font, then return it
        //     $nf = substr($this->currentBaseFont,0,strrpos($this->currentBaseFont,'/')+1).$this->fontFamilies[$cf][$this->currentTextState];
        //     $this->selectFont($nf,'',0);
        //     $this->currentFont = $nf;
        //     $this->currentFontNum = $this->fonts[$nf]['fontNum'];
        //   } else {
        //     // the this font must not have the right family member for the current state
        //     // simply assume the base font
        $this->currentFont = $this->currentBaseFont;
        $this->currentFontNum = $this->fonts[$this->currentFont]['fontNum'];
        //  }
    }

    /**
     * function for the user to find out what the ID is of the first page that was created during
     * startup - useful if they wish to add something to it later.
     *
     * @return int
     */
    function getFirstPageId()
    {
        return $this->firstPageId;
    }

    /**
     * add content to the currently active object
     *
     * @param $content
     */
    private function addContent($content)
    {
        $this->objects[$this->currentContents]['c'] .= $content;
    }

    /**
     * sets the color for fill operations
     *
     * @param $color
     * @param bool $force
     */
    function setColor($color, $force = false)
    {
        $new_color = [$color[0], $color[1], $color[2], isset($color[3]) ? $color[3] : null];

        if (!$force && $this->currentColor == $new_color) {
            return;
        }

        if (isset($new_color[3])) {
            $this->currentColor = $new_color;
            $this->addContent(vsprintf("\n%.3F %.3F %.3F %.3F k", $this->currentColor));
        } else {
            if (isset($new_color[2])) {
                $this->currentColor = $new_color;
                $this->addContent(vsprintf("\n%.3F %.3F %.3F rg", $this->currentColor));
            }
        }
    }

    /**
     * sets the color for fill operations
     *
     * @param $fillRule
     */
    function setFillRule($fillRule)
    {
        if (!in_array($fillRule, ["nonzero", "evenodd"])) {
            return;
        }

        $this->fillRule = $fillRule;
    }

    /**
     * sets the color for stroke operations
     *
     * @param $color
     * @param bool $force
     */
    function setStrokeColor($color, $force = false)
    {
        $new_color = [$color[0], $color[1], $color[2], isset($color[3]) ? $color[3] : null];

        if (!$force && $this->currentStrokeColor == $new_color) {
            return;
        }

        if (isset($new_color[3])) {
            $this->currentStrokeColor = $new_color;
            $this->addContent(vsprintf("\n%.3F %.3F %.3F %.3F K", $this->currentStrokeColor));
        } else {
            if (isset($new_color[2])) {
                $this->currentStrokeColor = $new_color;
                $this->addContent(vsprintf("\n%.3F %.3F %.3F RG", $this->currentStrokeColor));
            }
        }
    }

    /**
     * Set the graphics state for compositions
     *
     * @param $parameters
     */
    function setGraphicsState($parameters)
    {
        // Create a new graphics state object if necessary
        if (($gstate = array_search($parameters, $this->gstates)) === false) {
            $this->numObj++;
            $this->o_extGState($this->numObj, 'new', $parameters);
            $gstate = $this->numStates;
            $this->gstates[$gstate] = $parameters;
        }
        $this->addContent("\n/GS$gstate gs");
    }

    /**
     * Set current blend mode & opacity for lines.
     *
     * Valid blend modes are:
     *
     * Normal, Multiply, Screen, Overlay, Darken, Lighten,
     * ColorDogde, ColorBurn, HardLight, SoftLight, Difference,
     * Exclusion
     *
     * @param string $mode    the blend mode to use
     * @param float  $opacity 0.0 fully transparent, 1.0 fully opaque
     */
    function setLineTransparency($mode, $opacity)
    {
        static $blend_modes = [
            "Normal",
            "Multiply",
            "Screen",
            "Overlay",
            "Darken",
            "Lighten",
            "ColorDogde",
            "ColorBurn",
            "HardLight",
            "SoftLight",
            "Difference",
            "Exclusion"
        ];

        if (!in_array($mode, $blend_modes)) {
            $mode = "Normal";
        }

        if (is_null($this->currentLineTransparency)) {
            $this->currentLineTransparency = [];
        }

        if ($mode === (key_exists('mode', $this->currentLineTransparency) ?
            $this->currentLineTransparency['mode'] : '') &&
            $opacity === (key_exists('opacity', $this->currentLineTransparency) ?
            $this->currentLineTransparency["opacity"] : '')) {
            return;
        }

        $this->currentLineTransparency["mode"] = $mode;
        $this->currentLineTransparency["opacity"] = $opacity;

        $options = [
            "BM" => "/$mode",
            "CA" => (float)$opacity
        ];

        $this->setGraphicsState($options);
    }

    /**
     * Set current blend mode & opacity for filled objects.
     *
     * Valid blend modes are:
     *
     * Normal, Multiply, Screen, Overlay, Darken, Lighten,
     * ColorDogde, ColorBurn, HardLight, SoftLight, Difference,
     * Exclusion
     *
     * @param string $mode    the blend mode to use
     * @param float  $opacity 0.0 fully transparent, 1.0 fully opaque
     */
    function setFillTransparency($mode, $opacity)
    {
        static $blend_modes = [
            "Normal",
            "Multiply",
            "Screen",
            "Overlay",
            "Darken",
            "Lighten",
            "ColorDogde",
            "ColorBurn",
            "HardLight",
            "SoftLight",
            "Difference",
            "Exclusion"
        ];

        if (!in_array($mode, $blend_modes)) {
            $mode = "Normal";
        }

        if (is_null($this->currentFillTransparency)) {
            $this->currentFillTransparency = [];
        }

        if ($mode === (key_exists('mode', $this->currentFillTransparency) ?
            $this->currentFillTransparency['mode'] : '') &&
            $opacity === (key_exists('opacity', $this->currentFillTransparency) ?
            $this->currentFillTransparency["opacity"] : '')) {
            return;
        }

        $this->currentFillTransparency["mode"] = $mode;
        $this->currentFillTransparency["opacity"] = $opacity;

        $options = [
            "BM" => "/$mode",
            "ca" => (float)$opacity,
        ];

        $this->setGraphicsState($options);
    }

    /**
     * draw a line from one set of coordinates to another
     *
     * @param $x1
     * @param $y1
     * @param $x2
     * @param $y2
     * @param bool $stroke
     */
    function line($x1, $y1, $x2, $y2, $stroke = true)
    {
        $this->addContent(sprintf("\n%.3F %.3F m %.3F %.3F l", $x1, $y1, $x2, $y2));

        if ($stroke) {
            $this->addContent(' S');
        }
    }

    /**
     * draw a bezier curve based on 4 control points
     *
     * @param $x0
     * @param $y0
     * @param $x1
     * @param $y1
     * @param $x2
     * @param $y2
     * @param $x3
     * @param $y3
     */
    function curve($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3)
    {
        // in the current line style, draw a bezier curve from (x0,y0) to (x3,y3) using the other two points
        // as the control points for the curve.
        $this->addContent(
            sprintf("\n%.3F %.3F m %.3F %.3F %.3F %.3F %.3F %.3F c S", $x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3)
        );
    }

    /**
     * draw a part of an ellipse
     *
     * @param $x0
     * @param $y0
     * @param $astart
     * @param $afinish
     * @param $r1
     * @param int $r2
     * @param int $angle
     * @param int $nSeg
     */
    function partEllipse($x0, $y0, $astart, $afinish, $r1, $r2 = 0, $angle = 0, $nSeg = 8)
    {
        $this->ellipse($x0, $y0, $r1, $r2, $angle, $nSeg, $astart, $afinish, false);
    }

    /**
     * draw a filled ellipse
     *
     * @param $x0
     * @param $y0
     * @param $r1
     * @param int $r2
     * @param int $angle
     * @param int $nSeg
     * @param int $astart
     * @param int $afinish
     */
    function filledEllipse($x0, $y0, $r1, $r2 = 0, $angle = 0, $nSeg = 8, $astart = 0, $afinish = 360)
    {
        $this->ellipse($x0, $y0, $r1, $r2, $angle, $nSeg, $astart, $afinish, true, true);
    }

    /**
     * @param $x
     * @param $y
     */
    function lineTo($x, $y)
    {
        $this->addContent(sprintf("\n%.3F %.3F l", $x, $y));
    }

    /**
     * @param $x
     * @param $y
     */
    function moveTo($x, $y)
    {
        $this->addContent(sprintf("\n%.3F %.3F m", $x, $y));
    }

    /**
     * draw a bezier curve based on 4 control points
     *
     * @param $x1
     * @param $y1
     * @param $x2
     * @param $y2
     * @param $x3
     * @param $y3
     */
    function curveTo($x1, $y1, $x2, $y2, $x3, $y3)
    {
        $this->addContent(sprintf("\n%.3F %.3F %.3F %.3F %.3F %.3F c", $x1, $y1, $x2, $y2, $x3, $y3));
    }

    /**
     * draw a bezier curve based on 4 control points
     */
    function quadTo($cpx, $cpy, $x, $y)
    {
        $this->addContent(sprintf("\n%.3F %.3F %.3F %.3F v", $cpx, $cpy, $x, $y));
    }

    function closePath()
    {
        $this->addContent(' h');
    }

    function endPath()
    {
        $this->addContent(' n');
    }

    /**
     * draw an ellipse
     * note that the part and filled ellipse are just special cases of this function
     *
     * draws an ellipse in the current line style
     * centered at $x0,$y0, radii $r1,$r2
     * if $r2 is not set, then a circle is drawn
     * from $astart to $afinish, measured in degrees, running anti-clockwise from the right hand side of the ellipse.
     * nSeg is not allowed to be less than 2, as this will simply draw a line (and will even draw a
     * pretty crappy shape at 2, as we are approximating with bezier curves.
     *
     * @param $x0
     * @param $y0
     * @param $r1
     * @param int $r2
     * @param int $angle
     * @param int $nSeg
     * @param int $astart
     * @param int $afinish
     * @param bool $close
     * @param bool $fill
     * @param bool $stroke
     * @param bool $incomplete
     */
    function ellipse(
        $x0,
        $y0,
        $r1,
        $r2 = 0,
        $angle = 0,
        $nSeg = 8,
        $astart = 0,
        $afinish = 360,
        $close = true,
        $fill = false,
        $stroke = true,
        $incomplete = false
    ) {
        if ($r1 == 0) {
            return;
        }

        if ($r2 == 0) {
            $r2 = $r1;
        }

        if ($nSeg < 2) {
            $nSeg = 2;
        }

        $astart = deg2rad((float)$astart);
        $afinish = deg2rad((float)$afinish);
        $totalAngle = $afinish - $astart;

        $dt = $totalAngle / $nSeg;
        $dtm = $dt / 3;

        if ($angle != 0) {
            $a = -1 * deg2rad((float)$angle);

            $this->addContent(
                sprintf("\n q %.3F %.3F %.3F %.3F %.3F %.3F cm", cos($a), -sin($a), sin($a), cos($a), $x0, $y0)
            );

            $x0 = 0;
            $y0 = 0;
        }

        $t1 = $astart;
        $a0 = $x0 + $r1 * cos($t1);
        $b0 = $y0 + $r2 * sin($t1);
        $c0 = -$r1 * sin($t1);
        $d0 = $r2 * cos($t1);

        if (!$incomplete) {
            $this->addContent(sprintf("\n%.3F %.3F m ", $a0, $b0));
        }

        for ($i = 1; $i <= $nSeg; $i++) {
            // draw this bit of the total curve
            $t1 = $i * $dt + $astart;
            $a1 = $x0 + $r1 * cos($t1);
            $b1 = $y0 + $r2 * sin($t1);
            $c1 = -$r1 * sin($t1);
            $d1 = $r2 * cos($t1);

            $this->addContent(
                sprintf(
                    "\n%.3F %.3F %.3F %.3F %.3F %.3F c",
                    ($a0 + $c0 * $dtm),
                    ($b0 + $d0 * $dtm),
                    ($a1 - $c1 * $dtm),
                    ($b1 - $d1 * $dtm),
                    $a1,
                    $b1
                )
            );

            $a0 = $a1;
            $b0 = $b1;
            $c0 = $c1;
            $d0 = $d1;
        }

        if (!$incomplete) {
            if ($fill) {
                $this->addContent(' f');
            }

            if ($stroke) {
                if ($close) {
                    $this->addContent(' s'); // small 's' signifies closing the path as well
                } else {
                    $this->addContent(' S');
                }
            }
        }

        if ($angle != 0) {
            $this->addContent(' Q');
        }
    }

    /**
     * this sets the line drawing style.
     * width, is the thickness of the line in user units
     * cap is the type of cap to put on the line, values can be 'butt','round','square'
     *    where the diffference between 'square' and 'butt' is that 'square' projects a flat end past the
     *    end of the line.
     * join can be 'miter', 'round', 'bevel'
     * dash is an array which sets the dash pattern, is a series of length values, which are the lengths of the
     *   on and off dashes.
     *   (2) represents 2 on, 2 off, 2 on , 2 off ...
     *   (2,1) is 2 on, 1 off, 2 on, 1 off.. etc
     * phase is a modifier on the dash pattern which is used to shift the point at which the pattern starts.
     *
     * @param int $width
     * @param string $cap
     * @param string $join
     * @param string $dash
     * @param int $phase
     */
    function setLineStyle($width = 1, $cap = '', $join = '', $dash = '', $phase = 0)
    {
        // this is quite inefficient in that it sets all the parameters whenever 1 is changed, but will fix another day
        $string = '';

        if ($width > 0) {
            $string .= "$width w";
        }

        $ca = ['butt' => 0, 'round' => 1, 'square' => 2];

        if (isset($ca[$cap])) {
            $string .= " $ca[$cap] J";
        }

        $ja = ['miter' => 0, 'round' => 1, 'bevel' => 2];

        if (isset($ja[$join])) {
            $string .= " $ja[$join] j";
        }

        if (is_array($dash)) {
            $string .= ' [ ' . implode(' ', $dash) . " ] $phase d";
        }

        $this->currentLineStyle = $string;
        $this->addContent("\n$string");
    }

    /**
     * draw a polygon, the syntax for this is similar to the GD polygon command
     *
     * @param $p
     * @param $np
     * @param bool $f
     */
    function polygon($p, $np, $f = false)
    {
        $this->addContent(sprintf("\n%.3F %.3F m ", $p[0], $p[1]));

        for ($i = 2; $i < $np * 2; $i = $i + 2) {
            $this->addContent(sprintf("%.3F %.3F l ", $p[$i], $p[$i + 1]));
        }

        if ($f) {
            $this->addContent(' f');
        } else {
            $this->addContent(' S');
        }
    }

    /**
     * a filled rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
     * the coordinates of the upper-right corner
     *
     * @param $x1
     * @param $y1
     * @param $width
     * @param $height
     */
    function filledRectangle($x1, $y1, $width, $height)
    {
        $this->addContent(sprintf("\n%.3F %.3F %.3F %.3F re f", $x1, $y1, $width, $height));
    }

    /**
     * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
     * the coordinates of the upper-right corner
     *
     * @param $x1
     * @param $y1
     * @param $width
     * @param $height
     */
    function rectangle($x1, $y1, $width, $height)
    {
        $this->addContent(sprintf("\n%.3F %.3F %.3F %.3F re S", $x1, $y1, $width, $height));
    }

    /**
     * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
     * the coordinates of the upper-right corner
     *
     * @param $x1
     * @param $y1
     * @param $width
     * @param $height
     */
    function rect($x1, $y1, $width, $height)
    {
        $this->addContent(sprintf("\n%.3F %.3F %.3F %.3F re", $x1, $y1, $width, $height));
    }

    function stroke(bool $close = false)
    {
        $this->addContent("\n" . ($close ? "s" : "S"));
    }

    function fill()
    {
        $this->addContent("\nf" . ($this->fillRule === "evenodd" ? "*" : ""));
    }

    function fillStroke(bool $close = false)
    {
        $this->addContent("\n" . ($close ? "b" : "B") . ($this->fillRule === "evenodd" ? "*" : ""));
    }

    /**
     * @param string $subtype
     * @param integer $x
     * @param integer $y
     * @param integer $w
     * @param integer $h
     * @return int
     */
    function addXObject($subtype, $x, $y, $w, $h)
    {
        $id = ++$this->numObj;
        $this->o_xobject($id, 'new', ['Subtype' => $subtype, 'bbox' => [$x, $y, $w, $h]]);
        return $id;
    }

    /**
     * @param integer $numXObject
     * @param string $type
     * @param array $options
     */
    function setXObjectResource($numXObject, $type, $options)
    {
        if (in_array($type, ['procset', 'font', 'xObject'])) {
            $this->o_xobject($numXObject, $type, $options);
        }
    }

    /**
     * add signature
     *
     * $fieldSigId = $cpdf->addFormField(Cpdf::ACROFORM_FIELD_SIG, 'Signature1', 0, 0, 0, 0, 0);
     *
     * $signatureId = $cpdf->addSignature([
     *   'signcert' => file_get_contents('dompdf.crt'),
     *   'privkey' => file_get_contents('dompdf.key'),
     *   'password' => 'password',
     *   'name' => 'DomPDF DEMO',
     *   'location' => 'Home',
     *   'reason' => 'First Form',
     *   'contactinfo' => 'info'
     * ]);
     * $cpdf->setFormFieldValue($fieldSigId, "$signatureId 0 R");
     *
     * @param string $signcert
     * @param string $privkey
     * @param string $password
     * @param string|null $name
     * @param string|null $location
     * @param string|null $reason
     * @param string|null $contactinfo
     * @return int
     */
    function addSignature($signcert, $privkey, $password = '', $name = null, $location = null, $reason = null, $contactinfo = null) {
        $sigId = ++$this->numObj;
        $this->o_sig($sigId, 'new', [
          'SignCert' => $signcert,
          'PrivKey' => $privkey,
          'Password' => $password,
          'Name' => $name,
          'Location' => $location,
          'Reason' => $reason,
          'ContactInfo' => $contactinfo
        ]);

        return $sigId;
    }

    /**
     * add field to form
     *
     * @param string $type ACROFORM_FIELD_*
     * @param string $name
     * @param $x0
     * @param $y0
     * @param $x1
     * @param $y1
     * @param integer $ff Field Flag ACROFORM_FIELD_*_*
     * @param float $size
     * @param array $color
     * @return int
     */
    public function addFormField($type, $name, $x0, $y0, $x1, $y1, $ff = 0, $size = 10.0, $color = [0, 0, 0])
    {
        if (!$this->numFonts) {
            $this->selectFont($this->defaultFont);
        }

        $color = implode(' ', $color) . ' rg';

        $currentFontNum = $this->currentFontNum;
        $font = array_filter($this->objects[$this->currentNode]['info']['fonts'],
          function($item) use ($currentFontNum) { return $item['fontNum'] == $currentFontNum; });

        $this->o_acroform($this->acroFormId, 'font',
          ['objNum' => $font[0]['objNum'], 'fontNum' => $font[0]['fontNum']]);

        $fieldId = ++$this->numObj;
        $this->o_field($fieldId, 'new', [
          'rect' => [$x0, $y0, $x1, $y1],
          'F' => 4,
          'FT' => "/$type",
          'T' => $name,
          'Ff' => $ff,
          'pageid' => $this->currentPage,
          'da' => "$color /F$this->currentFontNum " . sprintf('%.1F Tf ', $size)
        ]);

        return $fieldId;
    }

    /**
     * set Field value
     *
     * @param integer $numFieldObj
     * @param string $value
     */
    public function setFormFieldValue($numFieldObj, $value)
    {
        $this->o_field($numFieldObj, 'set', ['value' => $value]);
    }

    /**
     * set Field value (reference)
     *
     * @param integer $numFieldObj
     * @param integer $numObj Object number
     */
    public function setFormFieldRefValue($numFieldObj, $numObj)
    {
        $this->o_field($numFieldObj, 'set', ['refvalue' => $numObj]);
    }

    /**
     * set Field Appearanc (reference)
     *
     * @param integer $numFieldObj
     * @param integer $normalNumObj
     * @param integer|null $rolloverNumObj
     * @param integer|null $downNumObj
     */
    public function setFormFieldAppearance($numFieldObj, $normalNumObj, $rolloverNumObj = null, $downNumObj = null)
    {
        $appearance['N'] = $normalNumObj;

        if ($rolloverNumObj !== null) {
            $appearance['R'] = $rolloverNumObj;
        }

        if ($downNumObj !== null) {
            $appearance['D'] = $downNumObj;
        }

        $this->o_field($numFieldObj, 'set', ['appearance' => $appearance]);
    }

    /**
     * set Choice Field option values
     *
     * @param integer $numFieldObj
     * @param array $value
     */
    public function setFormFieldOpt($numFieldObj, $value)
    {
        $this->o_field($numFieldObj, 'set', ['options' => $value]);
    }

    /**
     * add form to document
     *
     * @param integer $sigFlags
     * @param boolean $needAppearances
     */
    public function addForm($sigFlags = 0, $needAppearances = false)
    {
        $this->acroFormId = ++$this->numObj;
        $this->o_acroform($this->acroFormId, 'new', [
          'NeedAppearances' => $needAppearances ? 'true' : 'false',
          'SigFlags' => $sigFlags
        ]);
    }

    /**
     * save the current graphic state
     */
    function save()
    {
        // we must reset the color cache or it will keep bad colors after clipping
        $this->currentColor = null;
        $this->currentStrokeColor = null;
        $this->addContent("\nq");
    }

    /**
     * restore the last graphic state
     */
    function restore()
    {
        // we must reset the color cache or it will keep bad colors after clipping
        $this->currentColor = null;
        $this->currentStrokeColor = null;
        $this->addContent("\nQ");
    }

    /**
     * draw a clipping rectangle, all the elements added after this will be clipped
     *
     * @param $x1
     * @param $y1
     * @param $width
     * @param $height
     */
    function clippingRectangle($x1, $y1, $width, $height)
    {
        $this->save();
        $this->addContent(sprintf("\n%.3F %.3F %.3F %.3F re W n", $x1, $y1, $width, $height));
    }

    /**
     * draw a clipping rounded rectangle, all the elements added after this will be clipped
     *
     * @param $x1
     * @param $y1
     * @param $w
     * @param $h
     * @param $rTL
     * @param $rTR
     * @param $rBR
     * @param $rBL
     */
    function clippingRectangleRounded($x1, $y1, $w, $h, $rTL, $rTR, $rBR, $rBL)
    {
        $this->save();

        // start: top edge, left end
        $this->addContent(sprintf("\n%.3F %.3F m ", $x1, $y1 - $rTL + $h));

        // line: bottom edge, left end
        $this->addContent(sprintf("\n%.3F %.3F l ", $x1, $y1 + $rBL));

        // curve: bottom-left corner
        $this->ellipse($x1 + $rBL, $y1 + $rBL, $rBL, 0, 0, 8, 180, 270, false, false, false, true);

        // line: right edge, bottom end
        $this->addContent(sprintf("\n%.3F %.3F l ", $x1 + $w - $rBR, $y1));

        // curve: bottom-right corner
        $this->ellipse($x1 + $w - $rBR, $y1 + $rBR, $rBR, 0, 0, 8, 270, 360, false, false, false, true);

        // line: right edge, top end
        $this->addContent(sprintf("\n%.3F %.3F l ", $x1 + $w, $y1 + $h - $rTR));

        // curve: bottom-right corner
        $this->ellipse($x1 + $w - $rTR, $y1 + $h - $rTR, $rTR, 0, 0, 8, 0, 90, false, false, false, true);

        // line: bottom edge, right end
        $this->addContent(sprintf("\n%.3F %.3F l ", $x1 + $rTL, $y1 + $h));

        // curve: top-right corner
        $this->ellipse($x1 + $rTL, $y1 + $h - $rTL, $rTL, 0, 0, 8, 90, 180, false, false, false, true);

        // line: top edge, left end
        $this->addContent(sprintf("\n%.3F %.3F l ", $x1 + $rBL, $y1));

        // Close & clip
        $this->addContent(" W n");
    }

    /**
     * ends the last clipping shape
     */
    function clippingEnd()
    {
        $this->restore();
    }

    /**
     * scale
     *
     * @param float $s_x scaling factor for width as percent
     * @param float $s_y scaling factor for height as percent
     * @param float $x   Origin abscissa
     * @param float $y   Origin ordinate
     */
    function scale($s_x, $s_y, $x, $y)
    {
        $y = $this->currentPageSize["height"] - $y;

        $tm = [
            $s_x,
            0,
            0,
            $s_y,
            $x * (1 - $s_x),
            $y * (1 - $s_y)
        ];

        $this->transform($tm);
    }

    /**
     * translate
     *
     * @param float $t_x movement to the right
     * @param float $t_y movement to the bottom
     */
    function translate($t_x, $t_y)
    {
        $tm = [
            1,
            0,
            0,
            1,
            $t_x,
            -$t_y
        ];

        $this->transform($tm);
    }

    /**
     * rotate
     *
     * @param float $angle angle in degrees for counter-clockwise rotation
     * @param float $x     Origin abscissa
     * @param float $y     Origin ordinate
     */
    function rotate($angle, $x, $y)
    {
        $y = $this->currentPageSize["height"] - $y;

        $a = deg2rad($angle);
        $cos_a = cos($a);
        $sin_a = sin($a);

        $tm = [
            $cos_a,
            -$sin_a,
            $sin_a,
            $cos_a,
            $x - $sin_a * $y - $cos_a * $x,
            $y - $cos_a * $y + $sin_a * $x,
        ];

        $this->transform($tm);
    }

    /**
     * skew
     *
     * @param float $angle_x
     * @param float $angle_y
     * @param float $x Origin abscissa
     * @param float $y Origin ordinate
     */
    function skew($angle_x, $angle_y, $x, $y)
    {
        $y = $this->currentPageSize["height"] - $y;

        $tan_x = tan(deg2rad($angle_x));
        $tan_y = tan(deg2rad($angle_y));

        $tm = [
            1,
            -$tan_y,
            -$tan_x,
            1,
            $tan_x * $y,
            $tan_y * $x,
        ];

        $this->transform($tm);
    }

    /**
     * apply graphic transformations
     *
     * @param array $tm transformation matrix
     */
    function transform($tm)
    {
        $this->addContent(vsprintf("\n %.3F %.3F %.3F %.3F %.3F %.3F cm", $tm));
    }

    /**
     * add a new page to the document
     * this also makes the new page the current active object
     *
     * @param int $insert
     * @param int $id
     * @param string $pos
     * @return int
     */
    function newPage($insert = 0, $id = 0, $pos = 'after')
    {
        // if there is a state saved, then go up the stack closing them
        // then on the new page, re-open them with the right setings

        if ($this->nStateStack) {
            for ($i = $this->nStateStack; $i >= 1; $i--) {
                $this->restoreState($i);
            }
        }

        $this->numObj++;

        if ($insert) {
            // the id from the ezPdf class is the id of the contents of the page, not the page object itself
            // query that object to find the parent
            $rid = $this->objects[$id]['onPage'];
            $opt = ['rid' => $rid, 'pos' => $pos];
            $this->o_page($this->numObj, 'new', $opt);
        } else {
            $this->o_page($this->numObj, 'new');
        }

        // if there is a stack saved, then put that onto the page
        if ($this->nStateStack) {
            for ($i = 1; $i <= $this->nStateStack; $i++) {
                $this->saveState($i);
            }
        }

        // and if there has been a stroke or fill color set, then transfer them
        if (isset($this->currentColor)) {
            $this->setColor($this->currentColor, true);
        }

        if (isset($this->currentStrokeColor)) {
            $this->setStrokeColor($this->currentStrokeColor, true);
        }

        // if there is a line style set, then put this in too
        if (mb_strlen($this->currentLineStyle, '8bit')) {
            $this->addContent("\n$this->currentLineStyle");
        }

        // the call to the o_page object set currentContents to the present page, so this can be returned as the page id
        return $this->currentContents;
    }

    /**
     * Streams the PDF to the client.
     *
     * @param string $filename The filename to present to the client.
     * @param array $options Associative array: 'compress' => 1 or 0 (default 1); 'Attachment' => 1 or 0 (default 1).
     */
    function stream($filename = "document.pdf", $options = [])
    {
        if (headers_sent()) {
            die("Unable to stream pdf: headers already sent");
        }

        if (!isset($options["compress"])) $options["compress"] = true;
        if (!isset($options["Attachment"])) $options["Attachment"] = true;

        $debug = !$options['compress'];
        $tmp = ltrim($this->output($debug));

        header("Cache-Control: private");
        header("Content-Type: application/pdf");
        header("Content-Length: " . mb_strlen($tmp, "8bit"));

        $filename = str_replace(["\n", "'"], "", basename($filename, ".pdf")) . ".pdf";
        $attachment = $options["Attachment"] ? "attachment" : "inline";

        $encoding = mb_detect_encoding($filename);
        $fallbackfilename = mb_convert_encoding($filename, "ISO-8859-1", $encoding);
        $fallbackfilename = str_replace("\"", "", $fallbackfilename);
        $encodedfilename = rawurlencode($filename);

        $contentDisposition = "Content-Disposition: $attachment; filename=\"$fallbackfilename\"";
        if ($fallbackfilename !== $filename) {
            $contentDisposition .= "; filename*=UTF-8''$encodedfilename";
        }
        header($contentDisposition);

        echo $tmp;
        flush();
    }

    /**
     * return the height in units of the current font in the given size
     *
     * @param $size
     * @return float|int
     */
    function getFontHeight($size)
    {
        if (!$this->numFonts) {
            $this->selectFont($this->defaultFont);
        }

        $font = $this->fonts[$this->currentFont];

        // for the current font, and the given size, what is the height of the font in user units
        if (isset($font['Ascender']) && isset($font['Descender'])) {
            $h = $font['Ascender'] - $font['Descender'];
        } else {
            $h = $font['FontBBox'][3] - $font['FontBBox'][1];
        }

        // have to adjust by a font offset for Windows fonts.  unfortunately it looks like
        // the bounding box calculations are wrong and I don't know why.
        if (isset($font['FontHeightOffset'])) {
            // For CourierNew from Windows this needs to be -646 to match the
            // Adobe native Courier font.
            //
            // For FreeMono from GNU this needs to be -337 to match the
            // Courier font.
            //
            // Both have been added manually to the .afm and .ufm files.
            $h += (int)$font['FontHeightOffset'];
        }

        return $size * $h / 1000;
    }

    /**
     * @param $size
     * @return float|int
     */
    function getFontXHeight($size)
    {
        if (!$this->numFonts) {
            $this->selectFont($this->defaultFont);
        }

        $font = $this->fonts[$this->currentFont];

        // for the current font, and the given size, what is the height of the font in user units
        if (isset($font['XHeight'])) {
            $xh = $font['Ascender'] - $font['Descender'];
        } else {
            $xh = $this->getFontHeight($size) / 2;
        }

        return $size * $xh / 1000;
    }

    /**
     * return the font descender, this will normally return a negative number
     * if you add this number to the baseline, you get the level of the bottom of the font
     * it is in the pdf user units
     *
     * @param $size
     * @return float|int
     */
    function getFontDescender($size)
    {
        // note that this will most likely return a negative value
        if (!$this->numFonts) {
            $this->selectFont($this->defaultFont);
        }

        //$h = $this->fonts[$this->currentFont]['FontBBox'][1];
        $h = $this->fonts[$this->currentFont]['Descender'];

        return $size * $h / 1000;
    }

    /**
     * filter the text, this is applied to all text just before being inserted into the pdf document
     * it escapes the various things that need to be escaped, and so on
     *
     * @access private
     *
     * @param $text
     * @param bool $bom
     * @param bool $convert_encoding
     * @return string
     */
    function filterText($text, $bom = true, $convert_encoding = true)
    {
        if (!$this->numFonts) {
            $this->selectFont($this->defaultFont);
        }

        if ($convert_encoding) {
            $cf = $this->currentFont;
            if (isset($this->fonts[$cf]) && $this->fonts[$cf]['isUnicode']) {
                $text = $this->utf8toUtf16BE($text, $bom);
            } else {
                //$text = html_entity_decode($text, ENT_QUOTES);
                $text = mb_convert_encoding($text, self::$targetEncoding, 'UTF-8');
            }
        } else if ($bom) {
            $text = $this->utf8toUtf16BE($text, $bom);
        }

        // the chr(13) substitution fixes a bug seen in TCPDF (bug #1421290)
        return strtr($text, [')' => '\\)', '(' => '\\(', '\\' => '\\\\', chr(13) => '\r']);
    }

    /**
     * return array containing codepoints (UTF-8 character values) for the
     * string passed in.
     *
     * based on the excellent TCPDF code by Nicola Asuni and the
     * RFC for UTF-8 at http://www.faqs.org/rfcs/rfc3629.html
     *
     * @access private
     * @author Orion Richardson
     * @since  January 5, 2008
     *
     * @param string $text UTF-8 string to process
     *
     * @return array UTF-8 codepoints array for the string
     */
    function utf8toCodePointsArray(&$text)
    {
        $length = mb_strlen($text, '8bit'); // http://www.php.net/manual/en/function.mb-strlen.php#77040
        $unicode = []; // array containing unicode values
        $bytes = []; // array containing single character byte sequences
        $numbytes = 1; // number of octets needed to represent the UTF-8 character

        for ($i = 0; $i < $length; $i++) {
            $c = ord($text[$i]); // get one string character at time
            if (count($bytes) === 0) { // get starting octect
                if ($c <= 0x7F) {
                    $unicode[] = $c; // use the character "as is" because is ASCII
                    $numbytes = 1;
                } elseif (($c >> 0x05) === 0x06) { // 2 bytes character (0x06 = 110 BIN)
                    $bytes[] = ($c - 0xC0) << 0x06;
                    $numbytes = 2;
                } elseif (($c >> 0x04) === 0x0E) { // 3 bytes character (0x0E = 1110 BIN)
                    $bytes[] = ($c - 0xE0) << 0x0C;
                    $numbytes = 3;
                } elseif (($c >> 0x03) === 0x1E) { // 4 bytes character (0x1E = 11110 BIN)
                    $bytes[] = ($c - 0xF0) << 0x12;
                    $numbytes = 4;
                } else {
                    // use replacement character for other invalid sequences
                    $unicode[] = 0xFFFD;
                    $bytes = [];
                    $numbytes = 1;
                }
            } elseif (($c >> 0x06) === 0x02) { // bytes 2, 3 and 4 must start with 0x02 = 10 BIN
                $bytes[] = $c - 0x80;
                if (count($bytes) === $numbytes) {
                    // compose UTF-8 bytes to a single unicode value
                    $c = $bytes[0];
                    for ($j = 1; $j < $numbytes; $j++) {
                        $c += ($bytes[$j] << (($numbytes - $j - 1) * 0x06));
                    }
                    if ((($c >= 0xD800) and ($c <= 0xDFFF)) or ($c >= 0x10FFFF)) {
                        // The definition of UTF-8 prohibits encoding character numbers between
                        // U+D800 and U+DFFF, which are reserved for use with the UTF-16
                        // encoding form (as surrogate pairs) and do not directly represent
                        // characters.
                        $unicode[] = 0xFFFD; // use replacement character
                    } else {
                        $unicode[] = $c; // add char to array
                    }
                    // reset data for next char
                    $bytes = [];
                    $numbytes = 1;
                }
            } else {
                // use replacement character for other invalid sequences
                $unicode[] = 0xFFFD;
                $bytes = [];
                $numbytes = 1;
            }
        }

        return $unicode;
    }

    /**
     * convert UTF-8 to UTF-16 with an additional byte order marker
     * at the front if required.
     *
     * based on the excellent TCPDF code by Nicola Asuni and the
     * RFC for UTF-8 at http://www.faqs.org/rfcs/rfc3629.html
     *
     * @access private
     * @author Orion Richardson
     * @since  January 5, 2008
     *
     * @param string  $text UTF-8 string to process
     * @param boolean $bom  whether to add the byte order marker
     *
     * @return string UTF-16 result string
     */
    function utf8toUtf16BE(&$text, $bom = true)
    {
        $out = $bom ? "\xFE\xFF" : '';

        $unicode = $this->utf8toCodePointsArray($text);
        foreach ($unicode as $c) {
            if ($c === 0xFFFD) {
                $out .= "\xFF\xFD"; // replacement character
            } elseif ($c < 0x10000) {
                $out .= chr($c >> 0x08) . chr($c & 0xFF);
            } else {
                $c -= 0x10000;
                $w1 = 0xD800 | ($c >> 0x10);
                $w2 = 0xDC00 | ($c & 0x3FF);
                $out .= chr($w1 >> 0x08) . chr($w1 & 0xFF) . chr($w2 >> 0x08) . chr($w2 & 0xFF);
            }
        }

        return $out;
    }

    /**
     * given a start position and information about how text is to be laid out, calculate where
     * on the page the text will end
     *
     * @param $x
     * @param $y
     * @param $angle
     * @param $size
     * @param $wa
     * @param $text
     * @return array
     */
    private function getTextPosition($x, $y, $angle, $size, $wa, $text)
    {
        // given this information return an array containing x and y for the end position as elements 0 and 1
        $w = $this->getTextWidth($size, $text);

        // need to adjust for the number of spaces in this text
        $words = explode(' ', $text);
        $nspaces = count($words) - 1;
        $w += $wa * $nspaces;
        $a = deg2rad((float)$angle);

        return [cos($a) * $w + $x, -sin($a) * $w + $y];
    }

    /**
     * Callback method used by smallCaps
     *
     * @param array $matches
     *
     * @return string
     */
    function toUpper($matches)
    {
        return mb_strtoupper($matches[0]);
    }

    function concatMatches($matches)
    {
        $str = "";
        foreach ($matches as $match) {
            $str .= $match[0];
        }

        return $str;
    }

    /**
     * register text for font subsetting
     *
     * @param $font
     * @param $text
     */
    function registerText($font, $text)
    {
        if (!$this->isUnicode || in_array(mb_strtolower(basename($font)), self::$coreFonts)) {
            return;
        }

        if (!isset($this->stringSubsets[$font])) {
            $this->stringSubsets[$font] = [];
        }

        $this->stringSubsets[$font] = array_unique(
            array_merge($this->stringSubsets[$font], $this->utf8toCodePointsArray($text))
        );
    }

    /**
     * add text to the document, at a specified location, size and angle on the page
     *
     * @param $x
     * @param $y
     * @param $size
     * @param $text
     * @param int $angle
     * @param int $wordSpaceAdjust
     * @param int $charSpaceAdjust
     * @param bool $smallCaps
     */
    function addText($x, $y, $size, $text, $angle = 0, $wordSpaceAdjust = 0, $charSpaceAdjust = 0, $smallCaps = false)
    {
        if (!$this->numFonts) {
            $this->selectFont($this->defaultFont);
        }

        $text = str_replace(["\r", "\n"], "", $text);

        // if ($smallCaps) {
        //     preg_match_all("/(\P{Ll}+)/u", $text, $matches, PREG_SET_ORDER);
        //     $lower = $this->concatMatches($matches);
        //     d($lower);

        //     preg_match_all("/(\p{Ll}+)/u", $text, $matches, PREG_SET_ORDER);
        //     $other = $this->concatMatches($matches);
        //     d($other);

        //     $text = preg_replace_callback("/\p{Ll}/u", array($this, "toUpper"), $text);
        // }

        // if there are any open callbacks, then they should be called, to show the start of the line
        if ($this->nCallback > 0) {
            for ($i = $this->nCallback; $i > 0; $i--) {
                // call each function
                $info = [
                    'x'         => $x,
                    'y'         => $y,
                    'angle'     => $angle,
                    'status'    => 'sol',
                    'p'         => $this->callback[$i]['p'],
                    'nCallback' => $this->callback[$i]['nCallback'],
                    'height'    => $this->callback[$i]['height'],
                    'descender' => $this->callback[$i]['descender']
                ];

                $func = $this->callback[$i]['f'];
                $this->$func($info);
            }
        }

        if ($angle == 0) {
            $this->addContent(sprintf("\nBT %.3F %.3F Td", $x, $y));
        } else {
            $a = deg2rad((float)$angle);
            $this->addContent(
                sprintf("\nBT %.3F %.3F %.3F %.3F %.3F %.3F Tm", cos($a), -sin($a), sin($a), cos($a), $x, $y)
            );
        }

        if ($wordSpaceAdjust != 0) {
            $this->addContent(sprintf(" %.3F Tw", $wordSpaceAdjust));
        }

        if ($charSpaceAdjust != 0) {
            $this->addContent(sprintf(" %.3F Tc", $charSpaceAdjust));
        }

        $len = mb_strlen($text);
        $start = 0;

        if ($start < $len) {
            $part = $text; // OAR - Don't need this anymore, given that $start always equals zero.  substr($text, $start);
            $place_text = $this->filterText($part, false);
            // modify unicode text so that extra word spacing is manually implemented (bug #)
            if ($this->fonts[$this->currentFont]['isUnicode'] && $wordSpaceAdjust != 0) {
                $space_scale = 1000 / $size;
                $place_text = str_replace("\x00\x20", "\x00\x20)\x00\x20" . (-round($space_scale * $wordSpaceAdjust)) . "\x00\x20(", $place_text);
            }
            $this->addContent(" /F$this->currentFontNum " . sprintf('%.1F Tf ', $size));
            $this->addContent(" [($place_text)] TJ");
        }

        if ($wordSpaceAdjust != 0) {
            $this->addContent(sprintf(" %.3F Tw", 0));
        }

        if ($charSpaceAdjust != 0) {
            $this->addContent(sprintf(" %.3F Tc", 0));
        }

        $this->addContent(' ET');

        // if there are any open callbacks, then they should be called, to show the end of the line
        if ($this->nCallback > 0) {
            for ($i = $this->nCallback; $i > 0; $i--) {
                // call each function
                $tmp = $this->getTextPosition($x, $y, $angle, $size, $wordSpaceAdjust, $text);
                $info = [
                    'x'         => $tmp[0],
                    'y'         => $tmp[1],
                    'angle'     => $angle,
                    'status'    => 'eol',
                    'p'         => $this->callback[$i]['p'],
                    'nCallback' => $this->callback[$i]['nCallback'],
                    'height'    => $this->callback[$i]['height'],
                    'descender' => $this->callback[$i]['descender']
                ];
                $func = $this->callback[$i]['f'];
                $this->$func($info);
            }
        }

        if ($this->fonts[$this->currentFont]['isSubsetting']) {
            $this->registerText($this->currentFont, $text);
        }
    }

    /**
     * calculate how wide a given text string will be on a page, at a given size.
     * this can be called externally, but is also used by the other class functions
     *
     * @param float $size
     * @param string $text
     * @param float $word_spacing
     * @param float $char_spacing
     * @return float
     */
    function getTextWidth($size, $text, $word_spacing = 0, $char_spacing = 0)
    {
        static $ord_cache = [];

        // this function should not change any of the settings, though it will need to
        // track any directives which change during calculation, so copy them at the start
        // and put them back at the end.
        $store_currentTextState = $this->currentTextState;

        if (!$this->numFonts) {
            $this->selectFont($this->defaultFont);
        }

        $text = str_replace(["\r", "\n"], "", $text);

        // converts a number or a float to a string so it can get the width
        $text = "$text";

        // hmm, this is where it all starts to get tricky - use the font information to
        // calculate the width of each character, add them up and convert to user units
        $w = 0;
        $cf = $this->currentFont;
        $current_font = $this->fonts[$cf];
        $space_scale = 1000 / ($size > 0 ? $size : 1);

        if ($current_font['isUnicode']) {
            // for Unicode, use the code points array to calculate width rather
            // than just the string itself
            $unicode = $this->utf8toCodePointsArray($text);

            foreach ($unicode as $char) {
                // check if we have to replace character
                if (isset($current_font['differences'][$char])) {
                    $char = $current_font['differences'][$char];
                }

                if (isset($current_font['C'][$char])) {
                    $char_width = $current_font['C'][$char];

                    // add the character width
                    $w += $char_width;

                    // add additional padding for space
                    if (isset($current_font['codeToName'][$char]) && $current_font['codeToName'][$char] === 'space') {  // Space
                        $w += $word_spacing * $space_scale;
                    }
                }
            }

            // add additional char spacing
            if ($char_spacing != 0) {
                $w += $char_spacing * $space_scale * count($unicode);
            }

        } else {
            // If CPDF is in Unicode mode but the current font does not support Unicode we need to convert the character set to Windows-1252
            if ($this->isUnicode) {
                $text = mb_convert_encoding($text, 'Windows-1252', 'UTF-8');
            }

            $len = mb_strlen($text, 'Windows-1252');

            for ($i = 0; $i < $len; $i++) {
                $c = $text[$i];
                $char = isset($ord_cache[$c]) ? $ord_cache[$c] : ($ord_cache[$c] = ord($c));

                // check if we have to replace character
                if (isset($current_font['differences'][$char])) {
                    $char = $current_font['differences'][$char];
                }

                if (isset($current_font['C'][$char])) {
                    $char_width = $current_font['C'][$char];

                    // add the character width
                    $w += $char_width;

                    // add additional padding for space
                    if (isset($current_font['codeToName'][$char]) && $current_font['codeToName'][$char] === 'space') {  // Space
                        $w += $word_spacing * $space_scale;
                    }
                }
            }

            // add additional char spacing
            if ($char_spacing != 0) {
                $w += $char_spacing * $space_scale * $len;
            }
        }

        $this->currentTextState = $store_currentTextState;
        $this->setCurrentFont();

        return $w * $size / 1000;
    }

    /**
     * this will be called at a new page to return the state to what it was on the
     * end of the previous page, before the stack was closed down
     * This is to get around not being able to have open 'q' across pages
     *
     * @param int $pageEnd
     */
    function saveState($pageEnd = 0)
    {
        if ($pageEnd) {
            // this will be called at a new page to return the state to what it was on the
            // end of the previous page, before the stack was closed down
            // This is to get around not being able to have open 'q' across pages
            $opt = $this->stateStack[$pageEnd];
            // ok to use this as stack starts numbering at 1
            $this->setColor($opt['col'], true);
            $this->setStrokeColor($opt['str'], true);
            $this->addContent("\n" . $opt['lin']);
            //    $this->currentLineStyle = $opt['lin'];
        } else {
            $this->nStateStack++;
            $this->stateStack[$this->nStateStack] = [
                'col' => $this->currentColor,
                'str' => $this->currentStrokeColor,
                'lin' => $this->currentLineStyle
            ];
        }

        $this->save();
    }

    /**
     * restore a previously saved state
     *
     * @param int $pageEnd
     */
    function restoreState($pageEnd = 0)
    {
        if (!$pageEnd) {
            $n = $this->nStateStack;
            $this->currentColor = $this->stateStack[$n]['col'];
            $this->currentStrokeColor = $this->stateStack[$n]['str'];
            $this->addContent("\n" . $this->stateStack[$n]['lin']);
            $this->currentLineStyle = $this->stateStack[$n]['lin'];
            $this->stateStack[$n] = null;
            unset($this->stateStack[$n]);
            $this->nStateStack--;
        }

        $this->restore();
    }

    /**
     * make a loose object, the output will go into this object, until it is closed, then will revert to
     * the current one.
     * this object will not appear until it is included within a page.
     * the function will return the object number
     *
     * @return int
     */
    function openObject()
    {
        $this->nStack++;
        $this->stack[$this->nStack] = ['c' => $this->currentContents, 'p' => $this->currentPage];
        // add a new object of the content type, to hold the data flow
        $this->numObj++;
        $this->o_contents($this->numObj, 'new');
        $this->currentContents = $this->numObj;
        $this->looseObjects[$this->numObj] = 1;

        return $this->numObj;
    }

    /**
     * open an existing object for editing
     *
     * @param $id
     */
    function reopenObject($id)
    {
        $this->nStack++;
        $this->stack[$this->nStack] = ['c' => $this->currentContents, 'p' => $this->currentPage];
        $this->currentContents = $id;

        // also if this object is the primary contents for a page, then set the current page to its parent
        if (isset($this->objects[$id]['onPage'])) {
            $this->currentPage = $this->objects[$id]['onPage'];
        }
    }

    /**
     * close an object
     */
    function closeObject()
    {
        // close the object, as long as there was one open in the first place, which will be indicated by
        // an objectId on the stack.
        if ($this->nStack > 0) {
            $this->currentContents = $this->stack[$this->nStack]['c'];
            $this->currentPage = $this->stack[$this->nStack]['p'];
            $this->nStack--;
            // easier to probably not worry about removing the old entries, they will be overwritten
            // if there are new ones.
        }
    }

    /**
     * stop an object from appearing on pages from this point on
     *
     * @param $id
     */
    function stopObject($id)
    {
        // if an object has been appearing on pages up to now, then stop it, this page will
        // be the last one that could contain it.
        if (isset($this->addLooseObjects[$id])) {
            $this->addLooseObjects[$id] = '';
        }
    }

    /**
     * after an object has been created, it wil only show if it has been added, using this function.
     *
     * @param $id
     * @param string $options
     */
    function addObject($id, $options = 'add')
    {
        // add the specified object to the page
        if (isset($this->looseObjects[$id]) && $this->currentContents != $id) {
            // then it is a valid object, and it is not being added to itself
            switch ($options) {
                case 'all':
                    // then this object is to be added to this page (done in the next block) and
                    // all future new pages.
                    $this->addLooseObjects[$id] = 'all';

                case 'add':
                    if (isset($this->objects[$this->currentContents]['onPage'])) {
                        // then the destination contents is the primary for the page
                        // (though this object is actually added to that page)
                        $this->o_page($this->objects[$this->currentContents]['onPage'], 'content', $id);
                    }
                    break;

                case 'even':
                    $this->addLooseObjects[$id] = 'even';
                    $pageObjectId = $this->objects[$this->currentContents]['onPage'];
                    if ($this->objects[$pageObjectId]['info']['pageNum'] % 2 == 0) {
                        $this->addObject($id);
                        // hacky huh :)
                    }
                    break;

                case 'odd':
                    $this->addLooseObjects[$id] = 'odd';
                    $pageObjectId = $this->objects[$this->currentContents]['onPage'];
                    if ($this->objects[$pageObjectId]['info']['pageNum'] % 2 == 1) {
                        $this->addObject($id);
                        // hacky huh :)
                    }
                    break;

                case 'next':
                    $this->addLooseObjects[$id] = 'all';
                    break;

                case 'nexteven':
                    $this->addLooseObjects[$id] = 'even';
                    break;

                case 'nextodd':
                    $this->addLooseObjects[$id] = 'odd';
                    break;
            }
        }
    }

    /**
     * return a storable representation of a specific object
     *
     * @param $id
     * @return string|null
     */
    function serializeObject($id)
    {
        if (array_key_exists($id, $this->objects)) {
            return serialize($this->objects[$id]);
        }

        return null;
    }

    /**
     * restore an object from its stored representation. Returns its new object id.
     *
     * @param $obj
     * @return int
     */
    function restoreSerializedObject($obj)
    {
        $obj_id = $this->openObject();
        $this->objects[$obj_id] = unserialize($obj);
        $this->closeObject();

        return $obj_id;
    }

    /**
     * Embeds a file inside the PDF
     *
     * @param string $filepath path to the file to store inside the PDF
     * @param string $embeddedFilename the filename displayed in the list of embedded files
     * @param string $description a description in the list of embedded files
     */
    public function addEmbeddedFile(string $filepath, string $embeddedFilename, string $description): void
    {
        $this->numObj++;
        $this->o_embedded_file_dictionary(
            $this->numObj,
            'new',
            [
                'filepath' => $filepath,
                'filename' => $embeddedFilename,
                'description' => $description
            ]
        );
    }

    /**
     * add content to the documents info object
     *
     * @param $label
     * @param int $value
     */
    function addInfo($label, $value = 0)
    {
        // this will only work if the label is one of the valid ones.
        // modify this so that arrays can be passed as well.
        // if $label is an array then assume that it is key => value pairs
        // else assume that they are both scalar, anything else will probably error
        if (is_array($label)) {
            foreach ($label as $l => $v) {
                $this->o_info($this->infoObject, $l, $v);
            }
        } else {
            $this->o_info($this->infoObject, $label, $value);
        }
    }

    /**
     * set the viewer preferences of the document, it is up to the browser to obey these.
     *
     * @param $label
     * @param int $value
     */
    function setPreferences($label, $value = 0)
    {
        // this will only work if the label is one of the valid ones.
        if (is_array($label)) {
            foreach ($label as $l => $v) {
                $this->o_catalog($this->catalogId, 'viewerPreferences', [$l => $v]);
            }
        } else {
            $this->o_catalog($this->catalogId, 'viewerPreferences', [$label => $value]);
        }
    }

    /**
     * extract an integer from a position in a byte stream
     *
     * @param $data
     * @param $pos
     * @param $num
     * @return int
     */
    private function getBytes(&$data, $pos, $num)
    {
        // return the integer represented by $num bytes from $pos within $data
        $ret = 0;
        for ($i = 0; $i < $num; $i++) {
            $ret *= 256;
            $ret += ord($data[$pos + $i]);
        }

        return $ret;
    }

    /**
     * Check if image already added to pdf image directory.
     * If yes, need not to create again (pass empty data)
     *
     * @param string $imgname
     * @return bool
     */
    function image_iscached($imgname)
    {
        return isset($this->imagelist[$imgname]);
    }

    /**
     * add a PNG image into the document, from a GD object
     * this should work with remote files
     *
     * @param \GdImage|resource $img A GD resource
     * @param string $file The PNG file
     * @param float $x X position
     * @param float $y Y position
     * @param float $w Width
     * @param float $h Height
     * @param bool $is_mask true if the image is a mask
     * @param bool $mask true if the image is masked
     * @throws Exception
     */
    function addImagePng(&$img, $file, $x, $y, $w = 0.0, $h = 0.0, $is_mask = false, $mask = null)
    {
        if (!function_exists("imagepng")) {
            throw new \Exception("The PHP GD extension is required, but is not installed.");
        }

        //if already cached, need not to read again
        if (isset($this->imagelist[$file])) {
            $data = null;
        } else {
            // Example for transparency handling on new image. Retain for current image
            // $tIndex = imagecolortransparent($img);
            // if ($tIndex > 0) {
            //   $tColor    = imagecolorsforindex($img, $tIndex);
            //   $new_tIndex    = imagecolorallocate($new_img, $tColor['red'], $tColor['green'], $tColor['blue']);
            //   imagefill($new_img, 0, 0, $new_tIndex);
            //   imagecolortransparent($new_img, $new_tIndex);
            // }
            // blending mode (literal/blending) on drawing into current image. not relevant when not saved or not drawn
            //imagealphablending($img, true);

            //default, but explicitely set to ensure pdf compatibility
            imagesavealpha($img, false/*!$is_mask && !$mask*/);

            $error = 0;
            //DEBUG_IMG_TEMP
            //debugpng
            if (defined("DEBUGPNG") && DEBUGPNG) {
                print '[addImagePng ' . $file . ']';
            }

            ob_start();
            @imagepng($img);
            $data = ob_get_clean();

            if ($data == '') {
                $error = 1;
                $errormsg = 'trouble writing file from GD';
                //DEBUG_IMG_TEMP
                //debugpng
                if (defined("DEBUGPNG") && DEBUGPNG) {
                    print 'trouble writing file from GD';
                }
            }

            if ($error) {
                $this->addMessage('PNG error - (' . $file . ') ' . $errormsg);

                return;
            }
        }  //End isset($this->imagelist[$file]) (png Duplicate removal)

        $this->addPngFromBuf($data, $file, $x, $y, $w, $h, $is_mask, $mask);
    }

    /**
     * @param $file
     * @param $x
     * @param $y
     * @param $w
     * @param $h
     * @param $byte
     */
    protected function addImagePngAlpha($file, $x, $y, $w, $h, $byte)
    {
        // generate images
        $img = imagecreatefrompng($file);

        if ($img === false) {
            return;
        }

        // FIXME The pixel transformation doesn't work well with 8bit PNGs
        $eight_bit = ($byte & 4) !== 4;

        $wpx = imagesx($img);
        $hpx = imagesy($img);

        imagesavealpha($img, false);

        // create temp alpha file
        $tempfile_alpha = @tempnam($this->tmp, "cpdf_img_");
        @unlink($tempfile_alpha);
        $tempfile_alpha = "$tempfile_alpha.png";

        // create temp plain file
        $tempfile_plain = @tempnam($this->tmp, "cpdf_img_");
        @unlink($tempfile_plain);
        $tempfile_plain = "$tempfile_plain.png";

        $imgalpha = imagecreate($wpx, $hpx);
        imagesavealpha($imgalpha, false);

        // generate gray scale palette (0 -> 255)
        for ($c = 0; $c < 256; ++$c) {
            imagecolorallocate($imgalpha, $c, $c, $c);
        }

        // Use PECL gmagick + Graphics Magic to process transparent PNG images
        if (extension_loaded("gmagick")) {
            $gmagick = new \Gmagick($file);
            $gmagick->setimageformat('png');

            // Get opacity channel (negative of alpha channel)
            $alpha_channel_neg = clone $gmagick;
            $alpha_channel_neg->separateimagechannel(\Gmagick::CHANNEL_OPACITY);

            // Negate opacity channel
            $alpha_channel = new \Gmagick();
            $alpha_channel->newimage($wpx, $hpx, "#FFFFFF", "png");
            $alpha_channel->compositeimage($alpha_channel_neg, \Gmagick::COMPOSITE_DIFFERENCE, 0, 0);
            $alpha_channel->separateimagechannel(\Gmagick::CHANNEL_RED);
            $alpha_channel->writeimage($tempfile_alpha);

            // Cast to 8bit+palette
            $imgalpha_ = imagecreatefrompng($tempfile_alpha);
            imagecopy($imgalpha, $imgalpha_, 0, 0, 0, 0, $wpx, $hpx);
            imagedestroy($imgalpha_);
            imagepng($imgalpha, $tempfile_alpha);

            // Make opaque image
            $color_channels = new \Gmagick();
            $color_channels->newimage($wpx, $hpx, "#FFFFFF", "png");
            $color_channels->compositeimage($gmagick, \Gmagick::COMPOSITE_COPYRED, 0, 0);
            $color_channels->compositeimage($gmagick, \Gmagick::COMPOSITE_COPYGREEN, 0, 0);
            $color_channels->compositeimage($gmagick, \Gmagick::COMPOSITE_COPYBLUE, 0, 0);
            $color_channels->writeimage($tempfile_plain);

            $imgplain = imagecreatefrompng($tempfile_plain);
        }
        // Use PECL imagick + ImageMagic to process transparent PNG images
        elseif (extension_loaded("imagick")) {
            // Native cloning was added to pecl-imagick in svn commit 263814
            // the first version containing it was 3.0.1RC1
            static $imagickClonable = null;
            if ($imagickClonable === null) {
                $imagickClonable = true;
                if (defined('Imagick::IMAGICK_EXTVER')) {
                    $imagickVersion = \Imagick::IMAGICK_EXTVER;
                } else {
                    $imagickVersion = '0';
                }
                if (version_compare($imagickVersion, '0.0.1', '>=')) {
                    $imagickClonable = version_compare($imagickVersion, '3.0.1rc1', '>=');
                }
            }

            $imagick = new \Imagick($file);
            $imagick->setFormat('png');

            // Get opacity channel (negative of alpha channel)
            if ($imagick->getImageAlphaChannel() !== 0) {
                $alpha_channel = $imagickClonable ? clone $imagick : $imagick->clone();
                $alpha_channel->separateImageChannel(\Imagick::CHANNEL_ALPHA);
                // Since ImageMagick7 negate invert transparency as default
                if (\Imagick::getVersion()['versionNumber'] < 1800) {
                    $alpha_channel->negateImage(true);
                }
                $alpha_channel->writeImage($tempfile_alpha);

                // Cast to 8bit+palette
                $imgalpha_ = imagecreatefrompng($tempfile_alpha);
                imagecopy($imgalpha, $imgalpha_, 0, 0, 0, 0, $wpx, $hpx);
                imagedestroy($imgalpha_);
                imagepng($imgalpha, $tempfile_alpha);
            } else {
                $tempfile_alpha = null;
            }

            // Make opaque image
            $color_channels = new \Imagick();
            $color_channels->newImage($wpx, $hpx, "#FFFFFF", "png");
            $color_channels->compositeImage($imagick, \Imagick::COMPOSITE_COPYRED, 0, 0);
            $color_channels->compositeImage($imagick, \Imagick::COMPOSITE_COPYGREEN, 0, 0);
            $color_channels->compositeImage($imagick, \Imagick::COMPOSITE_COPYBLUE, 0, 0);
            $color_channels->writeImage($tempfile_plain);

            $imgplain = imagecreatefrompng($tempfile_plain);
        } else {
            // allocated colors cache
            $allocated_colors = [];

            // extract alpha channel
            for ($xpx = 0; $xpx < $wpx; ++$xpx) {
                for ($ypx = 0; $ypx < $hpx; ++$ypx) {
                    $color = imagecolorat($img, $xpx, $ypx);
                    $col = imagecolorsforindex($img, $color);
                    $alpha = $col['alpha'];

                    if ($eight_bit) {
                        // with gamma correction
                        $gammacorr = 2.2;
                        $pixel = round(pow((((127 - $alpha) * 255 / 127) / 255), $gammacorr) * 255);
                    } else {
                        // without gamma correction
                        $pixel = (127 - $alpha) * 2;

                        $key = $col['red'] . $col['green'] . $col['blue'];

                        if (!isset($allocated_colors[$key])) {
                            $pixel_img = imagecolorallocate($img, $col['red'], $col['green'], $col['blue']);
                            $allocated_colors[$key] = $pixel_img;
                        } else {
                            $pixel_img = $allocated_colors[$key];
                        }

                        imagesetpixel($img, $xpx, $ypx, $pixel_img);
                    }

                    imagesetpixel($imgalpha, $xpx, $ypx, $pixel);
                }
            }

            // extract image without alpha channel
            $imgplain = imagecreatetruecolor($wpx, $hpx);
            imagecopy($imgplain, $img, 0, 0, 0, 0, $wpx, $hpx);
            imagedestroy($img);

            imagepng($imgalpha, $tempfile_alpha);
            imagepng($imgplain, $tempfile_plain);
        }

        $this->imageAlphaList[$file] = [$tempfile_alpha, $tempfile_plain];

        // embed mask image
        if ($tempfile_alpha) {
            $this->addImagePng($imgalpha, $tempfile_alpha, $x, $y, $w, $h, true);
            imagedestroy($imgalpha);
            $this->imageCache[] = $tempfile_alpha;
        }

        // embed image, masked with previously embedded mask
        $this->addImagePng($imgplain, $tempfile_plain, $x, $y, $w, $h, false, ($tempfile_alpha !== null));
        imagedestroy($imgplain);
        $this->imageCache[] = $tempfile_plain;
    }

    /**
     * add a PNG image into the document, from a file
     * this should work with remote files
     *
     * @param $file
     * @param $x
     * @param $y
     * @param int $w
     * @param int $h
     * @throws Exception
     */
    function addPngFromFile($file, $x, $y, $w = 0, $h = 0)
    {
        if (!function_exists("imagecreatefrompng")) {
            throw new \Exception("The PHP GD extension is required, but is not installed.");
        }

        if (isset($this->imageAlphaList[$file])) {
            [$alphaFile, $plainFile] = $this->imageAlphaList[$file];

            if ($alphaFile) {
                $img = null;
                $this->addImagePng($img, $alphaFile, $x, $y, $w, $h, true);
            }

            $img = null;
            $this->addImagePng($img, $plainFile, $x, $y, $w, $h, false, ($plainFile !== null));
            return;
        }

        //if already cached, need not to read again
        if (isset($this->imagelist[$file])) {
            $img = null;
        } else {
            $info = file_get_contents($file, false, null, 24, 5);
            $meta = unpack("CbitDepth/CcolorType/CcompressionMethod/CfilterMethod/CinterlaceMethod", $info);
            $bit_depth = $meta["bitDepth"];
            $color_type = $meta["colorType"];

            // http://www.w3.org/TR/PNG/#11IHDR
            // 3 => indexed
            // 4 => greyscale with alpha
            // 6 => fullcolor with alpha
            $is_alpha = in_array($color_type, [4, 6]) || ($color_type == 3 && $bit_depth != 4);

            if ($is_alpha) { // exclude grayscale alpha
                $this->addImagePngAlpha($file, $x, $y, $w, $h, $color_type);
                return;
            }

            //png files typically contain an alpha channel.
            //pdf file format or class.pdf does not support alpha blending.
            //on alpha blended images, more transparent areas have a color near black.
            //This appears in the result on not storing the alpha channel.
            //Correct would be the box background image or its parent when transparent.
            //But this would make the image dependent on the background.
            //Therefore create an image with white background and copy in
            //A more natural background than black is white.
            //Therefore create an empty image with white background and merge the
            //image in with alpha blending.
            $imgtmp = @imagecreatefrompng($file);
            if (!$imgtmp) {
                return;
            }
            $sx = imagesx($imgtmp);
            $sy = imagesy($imgtmp);
            $img = imagecreatetruecolor($sx, $sy);
            imagealphablending($img, true);

            // @todo is it still needed ??
            $ti = imagecolortransparent($imgtmp);
            if ($ti >= 0) {
                $tc = imagecolorsforindex($imgtmp, $ti);
                $ti = imagecolorallocate($img, $tc['red'], $tc['green'], $tc['blue']);
                imagefill($img, 0, 0, $ti);
                imagecolortransparent($img, $ti);
            } else {
                imagefill($img, 1, 1, imagecolorallocate($img, 255, 255, 255));
            }

            imagecopy($img, $imgtmp, 0, 0, 0, 0, $sx, $sy);
            imagedestroy($imgtmp);
        }
        $this->addImagePng($img, $file, $x, $y, $w, $h);

        if ($img) {
            imagedestroy($img);
        }
    }

    /**
     * add a PNG image into the document, from a memory buffer of the file
     *
     * @param $data
     * @param $file
     * @param $x
     * @param $y
     * @param float $w
     * @param float $h
     * @param bool $is_mask
     * @param null $mask
     */
    function addPngFromBuf(&$data, $file, $x, $y, $w = 0.0, $h = 0.0, $is_mask = false, $mask = null)
    {
        if (isset($this->imagelist[$file])) {
            $data = null;
            $info['width'] = $this->imagelist[$file]['w'];
            $info['height'] = $this->imagelist[$file]['h'];
            $label = $this->imagelist[$file]['label'];
        } else {
            if ($data == null) {
                $this->addMessage('addPngFromBuf error - data not present!');

                return;
            }

            $error = 0;

            if (!$error) {
                $header = chr(137) . chr(80) . chr(78) . chr(71) . chr(13) . chr(10) . chr(26) . chr(10);

                if (mb_substr($data, 0, 8, '8bit') != $header) {
                    $error = 1;

                    if (defined("DEBUGPNG") && DEBUGPNG) {
                        print '[addPngFromFile this file does not have a valid header ' . $file . ']';
                    }

                    $errormsg = 'this file does not have a valid header';
                }
            }

            if (!$error) {
                // set pointer
                $p = 8;
                $len = mb_strlen($data, '8bit');

                // cycle through the file, identifying chunks
                $haveHeader = 0;
                $info = [];
                $idata = '';
                $pdata = '';

                while ($p < $len) {
                    $chunkLen = $this->getBytes($data, $p, 4);
                    $chunkType = mb_substr($data, $p + 4, 4, '8bit');

                    switch ($chunkType) {
                        case 'IHDR':
                            // this is where all the file information comes from
                            $info['width'] = $this->getBytes($data, $p + 8, 4);
                            $info['height'] = $this->getBytes($data, $p + 12, 4);
                            $info['bitDepth'] = ord($data[$p + 16]);
                            $info['colorType'] = ord($data[$p + 17]);
                            $info['compressionMethod'] = ord($data[$p + 18]);
                            $info['filterMethod'] = ord($data[$p + 19]);
                            $info['interlaceMethod'] = ord($data[$p + 20]);

                            //print_r($info);
                            $haveHeader = 1;
                            if ($info['compressionMethod'] != 0) {
                                $error = 1;

                                //debugpng
                                if (defined("DEBUGPNG") && DEBUGPNG) {
                                    print '[addPngFromFile unsupported compression method ' . $file . ']';
                                }

                                $errormsg = 'unsupported compression method';
                            }

                            if ($info['filterMethod'] != 0) {
                                $error = 1;

                                //debugpng
                                if (defined("DEBUGPNG") && DEBUGPNG) {
                                    print '[addPngFromFile unsupported filter method ' . $file . ']';
                                }

                                $errormsg = 'unsupported filter method';
                            }
                            break;

                        case 'PLTE':
                            $pdata .= mb_substr($data, $p + 8, $chunkLen, '8bit');
                            break;

                        case 'IDAT':
                            $idata .= mb_substr($data, $p + 8, $chunkLen, '8bit');
                            break;

                        case 'tRNS':
                            //this chunk can only occur once and it must occur after the PLTE chunk and before IDAT chunk
                            //print "tRNS found, color type = ".$info['colorType']."\n";
                            $transparency = [];

                            switch ($info['colorType']) {
                                // indexed color, rbg
                                case 3:
                                    /* corresponding to entries in the plte chunk
                                     Alpha for palette index 0: 1 byte
                                     Alpha for palette index 1: 1 byte
                                     ...etc...
                                    */
                                    // there will be one entry for each palette entry. up until the last non-opaque entry.
                                    // set up an array, stretching over all palette entries which will be o (opaque) or 1 (transparent)
                                    $transparency['type'] = 'indexed';
                                    $trans = 0;

                                    for ($i = $chunkLen; $i >= 0; $i--) {
                                        if (ord($data[$p + 8 + $i]) == 0) {
                                            $trans = $i;
                                        }
                                    }

                                    $transparency['data'] = $trans;
                                    break;

                                // grayscale
                                case 0:
                                    /* corresponding to entries in the plte chunk
                                     Gray: 2 bytes, range 0 .. (2^bitdepth)-1
                                    */
                                    //            $transparency['grayscale'] = $this->PRVT_getBytes($data,$p+8,2); // g = grayscale
                                    $transparency['type'] = 'indexed';
                                    $transparency['data'] = ord($data[$p + 8 + 1]);
                                    break;

                                // truecolor
                                case 2:
                                    /* corresponding to entries in the plte chunk
                                     Red: 2 bytes, range 0 .. (2^bitdepth)-1
                                     Green: 2 bytes, range 0 .. (2^bitdepth)-1
                                     Blue: 2 bytes, range 0 .. (2^bitdepth)-1
                                    */
                                    $transparency['r'] = $this->getBytes($data, $p + 8, 2);
                                    // r from truecolor
                                    $transparency['g'] = $this->getBytes($data, $p + 10, 2);
                                    // g from truecolor
                                    $transparency['b'] = $this->getBytes($data, $p + 12, 2);
                                    // b from truecolor

                                    $transparency['type'] = 'color-key';
                                    break;

                                //unsupported transparency type
                                default:
                                    if (defined("DEBUGPNG") && DEBUGPNG) {
                                        print '[addPngFromFile unsupported transparency type ' . $file . ']';
                                    }
                                    break;
                            }

                            // KS End new code
                            break;

                        default:
                            break;
                    }

                    $p += $chunkLen + 12;
                }

                if (!$haveHeader) {
                    $error = 1;

                    //debugpng
                    if (defined("DEBUGPNG") && DEBUGPNG) {
                        print '[addPngFromFile information header is missing ' . $file . ']';
                    }

                    $errormsg = 'information header is missing';
                }

                if (isset($info['interlaceMethod']) && $info['interlaceMethod']) {
                    $error = 1;

                    //debugpng
                    if (defined("DEBUGPNG") && DEBUGPNG) {
                        print '[addPngFromFile no support for interlaced images in pdf ' . $file . ']';
                    }

                    $errormsg = 'There appears to be no support for interlaced images in pdf.';
                }
            }

            if (!$error && $info['bitDepth'] > 8) {
                $error = 1;

                //debugpng
                if (defined("DEBUGPNG") && DEBUGPNG) {
                    print '[addPngFromFile bit depth of 8 or less is supported ' . $file . ']';
                }

                $errormsg = 'only bit depth of 8 or less is supported';
            }

            if (!$error) {
                switch ($info['colorType']) {
                    case 3:
                        $color = 'DeviceRGB';
                        $ncolor = 1;
                        break;

                    case 2:
                        $color = 'DeviceRGB';
                        $ncolor = 3;
                        break;

                    case 0:
                        $color = 'DeviceGray';
                        $ncolor = 1;
                        break;

                    default:
                        $error = 1;

                        //debugpng
                        if (defined("DEBUGPNG") && DEBUGPNG) {
                            print '[addPngFromFile alpha channel not supported: ' . $info['colorType'] . ' ' . $file . ']';
                        }

                        $errormsg = 'transparency alpha channel not supported, transparency only supported for palette images.';
                }
            }

            if ($error) {
                $this->addMessage('PNG error - (' . $file . ') ' . $errormsg);

                return;
            }

            //print_r($info);
            // so this image is ok... add it in.
            $this->numImages++;
            $im = $this->numImages;
            $label = "I$im";
            $this->numObj++;

            //  $this->o_image($this->numObj,'new',array('label' => $label,'data' => $idata,'iw' => $w,'ih' => $h,'type' => 'png','ic' => $info['width']));
            $options = [
                'label'            => $label,
                'data'             => $idata,
                'bitsPerComponent' => $info['bitDepth'],
                'pdata'            => $pdata,
                'iw'               => $info['width'],
                'ih'               => $info['height'],
                'type'             => 'png',
                'color'            => $color,
                'ncolor'           => $ncolor,
                'masked'           => $mask,
                'isMask'           => $is_mask
            ];

            if (isset($transparency)) {
                $options['transparency'] = $transparency;
            }

            $this->o_image($this->numObj, 'new', $options);
            $this->imagelist[$file] = ['label' => $label, 'w' => $info['width'], 'h' => $info['height']];
        }

        if ($is_mask) {
            return;
        }

        if ($w <= 0 && $h <= 0) {
            $w = $info['width'];
            $h = $info['height'];
        }

        if ($w <= 0) {
            $w = $h / $info['height'] * $info['width'];
        }

        if ($h <= 0) {
            $h = $w * $info['height'] / $info['width'];
        }

        $this->addContent(sprintf("\nq\n%.3F 0 0 %.3F %.3F %.3F cm /%s Do\nQ", $w, $h, $x, $y, $label));
    }

    /**
     * add a JPEG image into the document, from a file
     *
     * @param $img
     * @param $x
     * @param $y
     * @param int $w
     * @param int $h
     */
    function addJpegFromFile($img, $x, $y, $w = 0, $h = 0)
    {
        // attempt to add a jpeg image straight from a file, using no GD commands
        // note that this function is unable to operate on a remote file.

        if (!file_exists($img)) {
            return;
        }

        if ($this->image_iscached($img)) {
            $data = null;
            $imageWidth = $this->imagelist[$img]['w'];
            $imageHeight = $this->imagelist[$img]['h'];
            $channels = $this->imagelist[$img]['c'];
        } else {
            $tmp = getimagesize($img);
            $imageWidth = $tmp[0];
            $imageHeight = $tmp[1];

            if (isset($tmp['channels'])) {
                $channels = $tmp['channels'];
            } else {
                $channels = 3;
            }

            $data = file_get_contents($img);
        }

        if ($w <= 0 && $h <= 0) {
            $w = $imageWidth;
        }

        if ($w == 0) {
            $w = $h / $imageHeight * $imageWidth;
        }

        if ($h == 0) {
            $h = $w * $imageHeight / $imageWidth;
        }

        $this->addJpegImage_common($data, $img, $imageWidth, $imageHeight, $x, $y, $w, $h, $channels);
    }

    /**
     * common code used by the two JPEG adding functions
     * @param $data
     * @param $imgname
     * @param $imageWidth
     * @param $imageHeight
     * @param $x
     * @param $y
     * @param int $w
     * @param int $h
     * @param int $channels
     */
    private function addJpegImage_common(
        &$data,
        $imgname,
        $imageWidth,
        $imageHeight,
        $x,
        $y,
        $w = 0,
        $h = 0,
        $channels = 3
    ) {
        if ($this->image_iscached($imgname)) {
            $label = $this->imagelist[$imgname]['label'];
            //debugpng
            //if (DEBUGPNG) print '[addJpegImage_common Duplicate '.$imgname.']';

        } else {
            if ($data == null) {
                $this->addMessage('addJpegImage_common error - (' . $imgname . ') data not present!');

                return;
            }

            // note that this function is not to be called externally
            // it is just the common code between the GD and the file options
            $this->numImages++;
            $im = $this->numImages;
            $label = "I$im";
            $this->numObj++;

            $this->o_image(
                $this->numObj,
                'new',
                [
                    'label'    => $label,
                    'data'     => &$data,
                    'iw'       => $imageWidth,
                    'ih'       => $imageHeight,
                    'channels' => $channels
                ]
            );

            $this->imagelist[$imgname] = [
                'label' => $label,
                'w'     => $imageWidth,
                'h'     => $imageHeight,
                'c'     => $channels
            ];
        }

        $this->addContent(sprintf("\nq\n%.3F 0 0 %.3F %.3F %.3F cm /%s Do\nQ ", $w, $h, $x, $y, $label));
    }

    /**
     * specify where the document should open when it first starts
     *
     * @param $style
     * @param int $a
     * @param int $b
     * @param int $c
     */
    function openHere($style, $a = 0, $b = 0, $c = 0)
    {
        // this function will open the document at a specified page, in a specified style
        // the values for style, and the required parameters are:
        // 'XYZ'  left, top, zoom
        // 'Fit'
        // 'FitH' top
        // 'FitV' left
        // 'FitR' left,bottom,right
        // 'FitB'
        // 'FitBH' top
        // 'FitBV' left
        $this->numObj++;
        $this->o_destination(
            $this->numObj,
            'new',
            ['page' => $this->currentPage, 'type' => $style, 'p1' => $a, 'p2' => $b, 'p3' => $c]
        );
        $id = $this->catalogId;
        $this->o_catalog($id, 'openHere', $this->numObj);
    }

    /**
     * Add JavaScript code to the PDF document
     *
     * @param string $code
     */
    function addJavascript($code)
    {
        $this->javascript .= $code;
    }

    /**
     * create a labelled destination within the document
     *
     * @param $label
     * @param $style
     * @param int $a
     * @param int $b
     * @param int $c
     */
    function addDestination($label, $style, $a = 0, $b = 0, $c = 0)
    {
        // associates the given label with the destination, it is done this way so that a destination can be specified after
        // it has been linked to
        // styles are the same as the 'openHere' function
        $this->numObj++;
        $this->o_destination(
            $this->numObj,
            'new',
            ['page' => $this->currentPage, 'type' => $style, 'p1' => $a, 'p2' => $b, 'p3' => $c]
        );
        $id = $this->numObj;

        // store the label->idf relationship, note that this means that labels can be used only once
        $this->destinations["$label"] = $id;
    }

    /**
     * define font families, this is used to initialize the font families for the default fonts
     * and for the user to add new ones for their fonts. The default bahavious can be overridden should
     * that be desired.
     *
     * @param $family
     * @param string $options
     */
    function setFontFamily($family, $options = '')
    {
        if (!is_array($options)) {
            if ($family === 'init') {
                // set the known family groups
                // these font families will be used to enable bold and italic markers to be included
                // within text streams. html forms will be used... <b></b> <i></i>
                $this->fontFamilies['Helvetica.afm'] =
                    [
                        'b'  => 'Helvetica-Bold.afm',
                        'i'  => 'Helvetica-Oblique.afm',
                        'bi' => 'Helvetica-BoldOblique.afm',
                        'ib' => 'Helvetica-BoldOblique.afm'
                    ];

                $this->fontFamilies['Courier.afm'] =
                    [
                        'b'  => 'Courier-Bold.afm',
                        'i'  => 'Courier-Oblique.afm',
                        'bi' => 'Courier-BoldOblique.afm',
                        'ib' => 'Courier-BoldOblique.afm'
                    ];

                $this->fontFamilies['Times-Roman.afm'] =
                    [
                        'b'  => 'Times-Bold.afm',
                        'i'  => 'Times-Italic.afm',
                        'bi' => 'Times-BoldItalic.afm',
                        'ib' => 'Times-BoldItalic.afm'
                    ];
            }
        } else {

            // the user is trying to set a font family
            // note that this can also be used to set the base ones to something else
            if (mb_strlen($family)) {
                $this->fontFamilies[$family] = $options;
            }
        }
    }

    /**
     * used to add messages for use in debugging
     *
     * @param $message
     */
    function addMessage($message)
    {
        $this->messages .= $message . "\n";
    }

    /**
     * a few functions which should allow the document to be treated transactionally.
     *
     * @param $action
     */
    function transaction($action)
    {
        switch ($action) {
            case 'start':
                // store all the data away into the checkpoint variable
                $data = get_object_vars($this);
                $this->checkpoint = $data;
                unset($data);
                break;

            case 'commit':
                if (is_array($this->checkpoint) && isset($this->checkpoint['checkpoint'])) {
                    $tmp = $this->checkpoint['checkpoint'];
                    $this->checkpoint = $tmp;
                    unset($tmp);
                } else {
                    $this->checkpoint = '';
                }
                break;

            case 'rewind':
                // do not destroy the current checkpoint, but move us back to the state then, so that we can try again
                if (is_array($this->checkpoint)) {
                    // can only abort if were inside a checkpoint
                    $tmp = $this->checkpoint;

                    foreach ($tmp as $k => $v) {
                        if ($k !== 'checkpoint') {
                            $this->$k = $v;
                        }
                    }
                    unset($tmp);
                }
                break;

            case 'abort':
                if (is_array($this->checkpoint)) {
                    // can only abort if were inside a checkpoint
                    $tmp = $this->checkpoint;
                    foreach ($tmp as $k => $v) {
                        $this->$k = $v;
                    }
                    unset($tmp);
                }
                break;
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       êÌ@Yy$F
0=/0
	ä,-X70 ;~*2%ÚÚ%2*~697X-,äãoýìoþýòýôþó+F9d1)ð(1d9C1    ¼ÿýì   * C T  '&#"'5&767#&$'&%'6'&'''$'676'&5$'6%'.54>32D$ú"¶@FÆþèª,þî¼ÂNNNþvÔF8p^Lb2
òþþØN**µ+ûB@0"AR/0?wA·%od/D&3.YaQ/5#3$"þ´þuI'@3/u= =#n-....   ¾w   3  %%32+#".7!"&'&'#&=4;73737ÏÏÏþDÏÏÏ¯ *Ï$#GFHÌýúÍH%#Î+¡(&½aa½'Ämý99mý9ù ý3.055_4iý4_550.3k#ttòòt   »k  "  632&'.'#####Öv)%8 _^¨>:k{Z¬²G_?×gÖ@`H,>|:=+,j,,<6O/2Ù33þþ<bþbþÄ    Jÿý  1   32>4.#"367#&7&$735&'.4>2Ï,P*+P,.N+)P¤Æþd"/%(þMM®Ø~95DLMNMD2)WN,,NWP**þg¨!ÊwÖs~
×&JJ&       ³Ó ? G O   277''"/&'&'7&'&'7&47'6767'676?  6"&462EG#96\>42(p__p(24>\69#G#:5\>42(p__p(24>\5:ÚþÙÑÑ'ÑàNmNNmÓU%4m+3EJ5:6JE3+m4%TT%4m+3EJ6:5JE3,l4%Tÿ ÒþÙÐÐ'\nMMnM     * §?      ! & + 0 5 : ? D P    3&7"7&'7&'7&'7&'6'6%676767&77&77&'"32654&'5&'.4>323#67#&#"'5&'&547&"'6%6761´a$O` "NiB*4l,4"U47),3(üà$aM#"aT*BF4,=44#Y3,)ý0BB0/CBO"!-$F$FJßF1.#-
-#-2MßJF$G#	8<g7*!2U6J%n=_CBnT>	rYw0d	"*7]6U$u=n;wBLz	>\e0wZ3C.1BB1.C(N	"%""%"	M#p.PA.$ý;QW¹$.AP-{	"   R Ç   & . F R    ¦ ² º Â Ê Ö  2#".54>&'767&%76'&''67&'&'&'67676547676'&7>3263'##"'&'&'&54767&'&547676&'&#"6&%6767&'&'&676&5467&'&6732767&h·@9h),)RP||PR-*g:>/**Y&()((')&&)')(()%@9f+.TRþ"`33`\_	.np,	·00441/¸	,pn,	]]Â&&()&&EEEJ03þÙ2WyQT.,d9@.**..12®30IDE%&**%&F¦°+.SEFE.IMMI."#FES. !  ";-0.--.0ÙIM+.REF$$1.%2S_`Q2%-1OQQO2-$3Q`_R3&.>GIIG""7447#.$$FER/+L"  !®75/57%"IJJI   *ÿþ§    ) p ~   67&'67&'4&6%67.'4'6&&'6767&54?67&'&#&'#&'5&'"'67&'&47632>4.#"72#".4>"0'-, )*ÿ #'0£5%"ÿ *%%,),,"èGNY I'+""$(J¡YNO21,9,4=SM:7,:-12-[¥[Z¥[]¦WX¦þIOMKLMN2Y{\b³CWDJgABcp7L^BML0b\u]!@R%KlhhO+wÕÕw+OhhlK$PZÀX'@D
0:)ww*;0
EA&XÀZw´¥[[¥´§[[GJMMJ  " ¯(    %  3!'# !5 2#"62#".54>o:û5þ(·þ67%'$(ûánüªH0þLº*ýç    I"   33'5 54#$/*ýÜPRüÆ6hþÁ"þ&>I>ýª>A>   ó  ßØ   !!®u¼¼þ»Øþûa     Þ  óÁ   !&5476'#5!+ÈÁþ{ÀÈh_aö6ýø6mHHm  .r£ó Z y   '#"'&#"'&'&'&547676763232767676'&'&'&/&'&'&547676762!2!%3276767654'&'&'&#"&#"3276767654'&'&ËPz			,D@		7;+
		23			M9£8Gþ)ý:		
			Ö		
	

r
	

	
	0	L:5U				
ç

	



    .\£  r   26767654'&'."#"'%"'&'&'&54767676;27>764'.'&+"'&'&'&547676762%632$"26767654'&'&¬##@Ò!R<¥þíOq<
;

3@M				JC3

;
<qO¥<R!ü-##

		
¾/An!/









.!mB0_	



	   :?² Y x   3!#!"'&'&'&547676?6767676'&'&'&#"#"'&'&'&547>763276;%326767654'&'&'&#"6767654'&'&'&#"32ÉÍE7þñ9E"		21+96	>B+	#	zOþo
		

´
		


		
²49D
/

	"

	
:	

	
þ	
		
			    	 =J Z x  ´ Ò þ-4H  67&'&'&+"'&'&'&4767676327632#"/#"'&'&'&54767676;276276767654'&'&'&"276767654'&'&'&""'&'&'&547676762"'&'&'&547676762'&'&'&547654'&'&'&";276-&#"+"276767654'&5476%327%&"'&'&4767628?. ! 	!a=ð?^'þ¡_)\?ð=a!!#	"!.8?¿"""""f		2
			.?ES¡@6üfG=.			
2			Å6@þ
	B )_>9	9>_) 	%ÏþI
		
	

	?
*


		ºª ;d.	
	?P<!  4 G´ n    3276767654'&'&'&#"&'&5476767632#"'.54767&54732#"#"676767'&#"'67654zQkdYWGJ###"KEYXea[WGJ### N*))'UOggqqhbTQ+))'UQegrse2
N{;(2.'7$!/-
*@%%$HIVWcgWSMF&%%$HIWWgbX1.oPbeqsg`WP,++)SQfdvog_WR*++0?#" ®$)*2/[TG!3(	-)#%	$!'(*0&    % ?¬É   , J i   &'&'7&'&"632%676767654&2"'&'&'&5476767"3276767654'&'&'&'2#"'&'&'&54767676$0ß$¶" N!!5&)*&fà0þî
$Ó/		/*d]YJK$%%%JH¶ff\YJK$$$#LG\ZhtjeVT,++(XRiiuskdVT,**(XQijn7<½%"#;"þ½<7b#"%X				&%JKYYjd[YJIM&%KJYYfjYUOH'&K,*VShgyrjbYT+--*UShguvjbYS-,    = <[ -  57'367&33#3#32+3#3##7&'#7R0Knm×(\Vo@KsFrÆ5$$5ÆrFsK@oV\(×mnK0=¤
Ðq<a<!<a<q×	£     ? s   " ) -  %!676762!%"'&'&'%%&54!ßOüuO?!$Gþ¹þóþ°þ°?&þºFþoSdååÝñÝQååÝþÜþ`#üÝ  D ê K Æ Ù é  476?672;&'&'&547632676767654'&7632!54'&'&76'&&#"'&/&'&'&#"#"'&'&/&'&#"&'&'&?6'&'#"'&'&#"!'476/654'&76'327654'&'&327654'&/D+"(<>	
!-	þ@( ,#%>NpNM&_*#
(!
&),,f&!(K_
	þZ0-	
YiD	
	cp-)L	&gK1
[N3$n/		"!0{Iö"H#fmt2>,7HBI.;/8[, 	Q[z)
		.)ÑS9L
*E	 	'+(4%(4 *X>		
7A)¯	0'-570+I;-%
*þ§#%(0

]'5.		U   - ¤ü  9 L p {     7654'"'&#"+"'7&54?67676763276323273#5%6767'&#"6%"/67#"27632327654'73654'676547&©t!M#l5G;@¼\
2BX-0%-m *	 '¡?,±Ný«ï?¨'!&­R;-><\-R5-6E!"$b$6$!q",ý¢;
t@P"û#Cß
*FSÀ"¥DX@!	%z$(`]jM¦P

¦&O/+@üp_u<
3 		DMKZRdYL6D_Y«BI5.!!''kG     W z¦   " ) 3 S Z  67654/##3276?7%754' 654'36767632#"'&54767632'ò0,,;À	ý(|w|k×ýäýûi«5þ.U,þ\\¤ýê
%gÒ	.
Á;,-0j{w{w3ýûýäØþV.
ÒýT,¥\þ[^	
	Æþ-5     & à«Ä     ' - E L   4'&'&/767675'7!!'7!654'!4'!!$4767>2"&'&'!654'$$üæCCC||]ªþVý£|êìýâV#þåýu9ÊZ(f(Y<PPP òñÕáPr+





VH     W »zÝ   " ) 3 S Z  &'&#"227654'&''/%'654.#"65&'&'&547632#"'&'&76#"ò	À;,,0ýw|w¡ýúÒ5,þ\\¤ý£©.	þ.V0-,:Á
ý£w{w­ ØýåýúÀhÓ
.o,þ[\¥ýè	
	Üª6þ.     ;+] # C  4'%%.'&"27>7%$66%"'&'&'&47676762%'b&à¢×þI



·þ)þ^àtNþñ/		/þ²þdÉ÷IWÒ?

@ÑVùiDV				/		V   %¬ &  %$64'%%&'&'&"27676èÄþþ@Ë))ËÀüþ<""÷â]N¸O]â   À9|   23277632 #"'&'&5476"#õÒ6vþ®þà>?(-=%P8jó?
#þjþ< y"$"     J rB   23277632 #"'&'&5476""öÑYTo
ýÍk%,02?=V8jiAý{ÃC{u+'     qP?   		'	7	ÛssþþssþsstsXþrsþrtssþsr    @ ¼QÏ   		'	7	5íþäþåíþäííÅþåíþåííþåí    ÿìN¾ B  2632#"'&'#"'&547677&'&54763267632676É©Bt
	ah´>)	¦¹c!,Hs¦¾*·Ü¡Â	
}©¶þÐ,"2A"Øì		{¦    3ÿý+ Q  26#"'#"'&'#'&'#"'&547&'&54767&'&54763267632676 	ÓÎ  NjÉM r¬kW*
&\ÊÚ
*3
#Àþï³*3	T§åv!(º¥ê5+",«£ç¿
     @ V   #  !!!!!%!!!!!!!!#!5!3þ»þÅ;E;ÿ Jþ¶þEþ¶J»Jþ¶þ¶JÐ<þÄþ»þÅ;E;þEþ¶J»Kþ!þ·IK    V {   !!!!!!÷þ|þãþ|þîþuv  9 f    35#7!!#!5!3³³³Öþ*´þ+Õ´Ü³´þ*Ö´Ö   0  ¡r    !!%!!!!!!Ñ/þÑ0 þ`þÏþ` 1¡/þÏþ` 1     )   !!#!5!3Ë^þ¢Òþ¢^ÒÀÒýêÒ^  ~ S    3!!'#'!!#!!3!5Lþúþ¼D¯ÁþúÁþ¼ý³ÊDÚþúÁý³MÁ   AÂ   #  5!#3!3'3#!#35!3###5353þÅõõ;õ¯õõþ9õõÇõõ¯õõ¯ããþËýÝ#5AþIýÝ#·äþ³ýÝ#³ä    0 ¡v Q  #"#3;54'&'&'&#5!"3276767653#4'&'&'&+3!52767>5/]LED73!&&54GBO]63H>SkS>H388]OBG45&&!35FEL]63H>SüS>H38882I<UjT<F66]LEF62!&&!28L]66F<TüU<I27^LEF62!&&!28L   G î         #  !!!!!7/373#/7#h¶l¶¶þ¶¶þ¶¶k0W¯XXXX°þÃ¯WäXXXX°îþÄþÆþÅþÅ;;:QéêêééQþÆQé;  ÿì² C  54'&54762327632#"'&+"'&5476=#"#"'&476323C:!)*[*)!:\5YL$$$$LY5\:!)*[*)!:\5YL$$$$LY5\[\5YL$$$$LY5\:!)*[*)!:[5YL$%%$LY5[:!)*[*)!:     ÿïµ   &'##"&'&'&4767>32367675&'&'.5467676236767>32#"&'&'&'#"'&'.546767675&%¢>#"??"#>¢ G	¢>#"??"#>¢	G ù F
¢>##>>##>¢
F ¡?#">>"#?¡  ÿí·   4'&'&'&'.54767676322767676767632#"'&'&'&'&'&#"'&'&'&5476767676765"#"'&'&'&5476767632B
,#,+%) 3!,
	&&*-#''#-*&&	
&$0	)$W$)	0$'
	L+,$&&$,/"&&$b3")	M*,%&&%,."'%%0
)$W#)
4!,
	&&+,$''$,+&&	
&$1,#,+$)   ÿåº0  267632#"'&'&'3&'&'&54676763267632#"'&'#"'&'&'&5476767#6767632#"'&'"'&'&'&54767#"'&'&'&54767676325##"'&'&'&54767#"'&'&'&476767632&'&547676763235#"'.'&5476767632&'&54767676hâ								á			-			(á
					
á							
à'				*
		
á
						
à
		.
		à
				    +ÿç¦j   276767653"4'&'&'&+sidUS+*+'WPihtthiPW'+*+SUdi),)URhexuhbXR,,,,RYaitwfgSU),  %ÿæ¬t  ?  247676763"'&'&'&5!276767653"4'&'&'&ðLEA86:4DDMMDD4:68AEþêtjdVT,*+(XQjhvvhjQX(+*,TVdj-76DCOME@:66:?FLOCC67-*UShgyvjbYS,-,-RZbjvyghTU*,   (ÿð©8 	   %%!	!)tËÌtõþþJþHcdecþH]Fþº]þÙþ~Êþ]þýþ^þý¢   Cÿæ5 	 )  !%%!2#"'&'&'&54767676hzþt@z@Az@þt{ne_RP)((&SNcdome_RP)((&SMdd0þéþééxé}*(QObbrle]TP)**(QObbooe]TN+*     (ÿæ©.  '   "276767654'&'&'!	!_)(""""()_)(""""(Y¸þþþþ¸¸$(*/.*(#  #(*./*($þ]þýþ^þý¢  #ÿé®< 	 ' 1  %% 2"'&'&'&5476767!	!#xÍÎxøþþa)(#""#()a)(#""#(YþDgghgþD^Iþ·^þÖþW $(*0.+($  $(+.0*($ þYþûþZþû¦    (ÿð©8 	    3'7'3!%%!!	!hEÛ±C²±C±ÛDeþµggþµf¸þþþþ¸
ÒÑÑiþÆÂþÆÃÃ:ÂÑþ]þýþ^þý¢  =ÿü 	    3'7'3!%%!7!7'7!hTDEDDT¨þªþ¨þ©þª¨Nÿ ÏPÏÐPÏÿ IQ2P11P2#þmùþmùùù¬óóó  (ÿö©?        -5%7'%!!	!]þP¤g¥±þµfee¸þþþþ¸rÂ­Â6þ96ÆþÆ]þ^þýþ^þý¢    . £    /'%!!%!77!¢þÄyrëþâryþÄyqm"þ _þÐö^÷ö^öþÐlçþ%«Ð%tæu%þ°ýþß´þß³³!´     6ÿþ   3%%#'-7í÷:|þÆ:|þÆ÷þÆ|9þÇ|kþ¶Öµ¶ÖµþkµÖ¶µÖ   Wÿÿz`    37'%7%%#'ZZ´ZZþòþ£Z]´^Zþ¢^Zþ¢´þ£ZËÊËþmËÊËÊþmÊ  0ÿý¡o   	#'!5!73!ÅP6þ°Mþ°6Pþ$Ýþ¯6PMP6þ¯Ýþ¯6Rþ#Üþ¯6QLR6þ¯Üþ$Q6þ®L  $ÿð­z   			-	h<_þõµþKþ¡<;þ¡
þL´þö_zþKþ¡<;þ þJ¶þô`;<_þõ  	 ÿé·         '  !'/7'?!7%%-¡Þ[ºßÛ9^Û[[þÈÞZþGßÚþÈ^ÚZZz'}*þÖ}þÙzyþÙ}þÖ*}'q^Ü\\þÈÞZþGßÚþÈ^ÚZZ:Þ\»ßÜOþÖ}þØzyþÙ}þÖ*}'yz(}     2ÿä    %	%	h_Øþyþ(_^þ(zþØÿþ£þ¹þº£þë£FG£   ÿà²s   %%-hVHÏzþÏþ¸VUþ¸ÏþzÏHrþÏþ¸VUþ¸Ïþ{ÏHUVHÏ   ÿê·   %%-hhþëhþáþáhþëhþëhþáþáhþëhh   $ÿÝ­h   7%%'7-'hXË5
´þÿ´þö5ËXVÌ6þõ³ÿ  ³6Ìgþÿ³þö5ËVWÌ6þö³þÿ³
6ÌWVË5
³   0 ¡t /  37%!!%'#''7'%!5!%7'77;[TïAð:#þÅTþ¯8#þÆðAîT[TïAðþÆ#9þ®TþÅ#8îAîT Tþ®8#þÇðAðT[Uñ@îþÈ#7þ¯SþÇ#9ï@ïU[TïAï8#   1ÿð è   54'&5476276767632#"#"#"327232#"'&'&/"'&5476=&'&'#"'&'&54767632332?&547'&#"#"#"'&'&54767632676?>$,.c.,$>]5 71+:H3>	kR

Sk	>3H:+17 7Z>$,.c.,$?Z7 71+:H3>	lR

Rk	>3H:+17 9X	ø
ib9@R'))'R@9dg
8d< +$;)01):$* <g4hc9@R((((R@9ch
4g< *$:)00);$+ <k0	  7ÿîÙ  ¹   "276767654'&'&/54'&5476276767632+"#"32;2#"'&'&/"'&5476=&'&'#"'&'&547676;232?&547'&#"+"'&'&54767632676z##H=$,.a.,$>\570+9F3=
	kQ
	Sj	
=3F9+077Y>$,.a.,$?Y770+9G3=
	kR	
Qk	
=3G9+079W	·>
h`9@Q'(('Q@9bf
7c<+$:)/0(:$+<f3gc8@Q'(('Q@8cg3f<+$:(//):$+<i0	  4ÿëß j  '&'&'&767654'&54762767676'&76'&'&/#"'&5476='&'&76767&(ZDL"#Z:LG#:.'W4,CC,4W''A(CK;Z""LGW/'''[CL"$X>HH#:.'W4,CEH@,4W'*>&DL:Z##KGW,f',;[;;+*Q--}KOW*AA*WSGu5-U&+;;[;,)
'+;[<>**Q--}KNW+@@-USFu5-S(+;>Y;+*
    !ÿå°½   ± É  67654'&"327632#"'&'&/#"'&5476=#"'&'&5476763232?'&#"#"'&'&5476763254'&5476276767632#"'&#"#"'&#"327676%32767654'&'&#"#"i/)F)/,UK:M
$\/8E(5>H6-EFJA-5H;8)D7.\#	L;KU,*UK;K
#\.7F'5>H5-DE-6H<7*C8/\$
M:K U+þÓ:6-214	
$:<;$
422-6O;(A7##7A(;þ÷	!*:#.#;&Rm!CcJMU)??,RMJcCoS%9#.#;)!	 );#-$:'Qn!DcIMU*??*UMIcD oS%;#.$:* f /D;;D/    $  ­i     "276767654'&'&'767632#"'#"'&'&'&'#"'&'&'&5476767#"'&'&'&5476767632&'&5476767632 o00'))'00o00'))'0]0+)*+%# #+%0%##&&.0%+%
 #%'.0$,#0%-# #%'.0$.  #%'-1$,#$%*/0961/*%%*/1690/*%)"*&0-(%$$$)-0&*!&"*!$$)-0&-#%(-0&*""(-0&*"$$(./&   » n  £ ¿ Ø ô  %#"'&'&'&5476767#"'&'&'&5476767632&'&54767676267632#"'#"'&'&'&27654'&'&'&"67&'&'&'276767&54767'&'&#"276767654'&/?676767654'&'&'&#"h&,&1/(&#!$&1%-$!&$/'.)2$-%c%-$2-*++&$!$-%1&$!#&(/1&,&=s0
	9	
55%R


9²!_	º,9


R%5Âs	_!È#'"+'0/)&$%%).2'+$*
'1.*%%%%*.1'
*"+'2.)%%$&)/0'+"'#L%%Lýì%#ML:2(&6

û_M#%è

6&(2:  
 ÿí» - [ Õ3b¯Ý  &'#"'&'&'&547676763267'&#"327%327676764'&'.#"7632#"'%&'&54767676324676762676322##"'&'"'&'.5#"'&'&'&54767"'&'&'&54767676&'&'&'&'&'67676?&'32767677676765&'&'.#"7676767&'&'&/326767674'&'&'67'&'&'&#"67'&'&'&'67676767"276767654'&'&'"'&'&'&54?&'276767654'7654'&'&'&"67'&547676762¯				¯(

b

(¬			üÍ#!"G"!#*" '## G!"" ' Ym
	
		
	(y
	(
Ok	
		w		
	mQ(	
þO
(	
		

??

+	/	L*	/	*

				+.	M+	.*					Ý !!!!'??'"#&#'"!! '??' !"! $&þ	

		

	
mP	åO
	
	
			

þm
	

		
	y	
	
Ok		

		
£þ¯
				¯				b				¬	

	     %ÿß¬j  < \ l   "276767654'&'&/2#"'&'&'&47676762#"'&'&'&54767676%%-[''!  !''[&( !! (TB39)+,+76?A3:(+,+76>tjeVT,++(XRiiuskdVT,**(XQijtuþßzþÞ"z!uv!z"þÞzþß#&(,-''""''-,(&#e)*:6?;97,+)*97z88,+,*UThgyricYT+,,*USigtvjbZR-,þÞzþßvvþàzþÞ"z vv!z    2ÿí9    § ² Á Ð  "327632#"'&'&/#"'&5476=#"'&'&5476763232?'&#"#"'&'&5476763254'&5476276767632#"'&#"27654'&%&'&#"327676%327632654'&'&#"#"i"(-+SI9K	#Y.6C&4<F4,CDH?,4F96(B5-Y"	K8IS*)RI8J	"Y-5D&3<F4,CC,4F:6(A6.Y#	K9IR*"(-62
#9þ~þÉ3
#9;þÉ
01+5600,5`%;G,AþÞ
$.?'!3&@!*Yx$	ImPT]-EE0ZTPmI	"zZ)!?&3!'@-$
	#,A'!2'?!*Yx$ImQT\.EE.\TQmI#yZ)!A&2"'?.#Öþ~&<G,@Á #3JþóÁ #3JÁ"ÜÁ"    ±W A  ''7'7535'75377537'7'#5''#5'75#5'7'7Ï¨4t©4©hÏ¨4tgt4¨Ïh©4©t4¨ÏÏ¨4t©4©hÏ¨4tgt4¨Ïh©4©t4¨­~f_Fh`iÍþf_GÐÐG_fý~Íi`hF_f~f_Fh_hÍþf_GÐÐG_fþÍh_hF_f  0ÿú¡³  ! % ) - 1 5  377''#5'7'7'75777%7?58aìÖ1Øíì×1ÖìaìÖ1×ìíØ1Öìëþ[LþZa³ùþð}T}{U}þïøø}U{}T} PPPPUPOOPPOOSP P  P      ¸À A  377537'7'#5''#5'75#5'7'77''7'7535'79arQÃÚ¢H1JqQÃØÙÃQrI1K¢ÖÃQrarQÃØ¢J1HrQÃÙ×ÃRrK1I¢ÛÃQr¿TBqù~â*T+Bp|~qA+T+á|÷qBTRBqû|á+T*Aq}|qB+T)á~üpB     2ÿîØ   #"'&'67632#"'&'&547'".467675#"'&'&54767627'#".47676325&'.4676327&54767632%'+,%ÄÄ%,+'%$'+)(&Ä%,,KWK,,%Ä&&+,&%%'V&ÄÄ(),K,%'+)(&Ä%,,%&+,K,,%Ä'%,+'),%+'%	qq	&&+*&&&%,rãKXK,,KXKãr,%&&%,+&&	qq	,KX%&&%,rã	KXK+KXK	ãr,%$  	 )ÿë¨j      . E \ s   "&462	7	7%'	'7&'&'&5476762"'&'&547676'#"'&'&47676326767632#"'&'&ÚC]CC]@þÜ@$ýÆþÝ@#úþÜ@$þFþÝ@#+W,,Wx-3>41%%14>3t-3>41%%14>3f^CC^Býß%@þÛº#@þÝãþÛ@%ýÆþÝ@#ä-4>41%%14>4þ-3>41%%14>3Ñ+V++V  	 !ÿã°r      + ? S g   "&46277''"'&'&476762"'&'&476762 2"'&'&4767$2"'&'&4767eeeþãBääAãý»äBããAä#U##U##U##U#ýÇV%**%V&**KV&**&V%**~ffeýßãAããAã$ãAãýüãAãV%**%V&**üµV&**&V%**Ì#U##U##U##U#    	 ÿêº   & 3 @ M Y a m  +%5%32476;#"'&'?632&54?#"632/&54#"/7 2#547"&462"'&=3¹þÁ?û_?þÁôü6Æ  üÏü6Æ  Æ6ü] Æ6üþ'?&M&©C_CC_?&M&< 'L&&L'Ã!Æ6üü¢ Æ6ü^ü6Æ!üÏü6Æ ÞþÂ>ýõ_CC_Dý<>þÂ    "ÿé¯ l  267632%632#"'%3#"'&'"'&547#"'&54727%#"'&47632%&'&54763&5476h!#;Ö'&1'þÛh	9##8þ)'1!,Ò;#A#;Ò'&1')þ8##9	hþÛ'12Ö;# 4þµ%.&!Â6 = 6Ä%".%þµ3  3	Gþó%.5Ä6 = 6Â%".þðG	4     $ÿõ­8  !     54."#" 54$32632 #"_éöé	àþÀþÀâÉþãÉè~~èýa>âþûâþÂ     EÿÁ	    %!#!3!üpEEûþ?üp9Eûÿ    =  V    %!%!35!üc×ûðE:üdFFûð   8ÿ¸  	  %!!!ü[:Fûü:¤ü\;[ûü   0  ¡q  	  %!!7!üNíû×]<²üN;)Gûí  +ÿú¦t      	,þüoþýýÄþüþüþü9þýþüþþþû;þûþýþþüþü   ÿ¶   #¶ùq  Íÿ
   !þËùr QþËk   !ýÓkù`  ÝÏôÙ   !733ôþé}b>vÏóó  ÓÄþÇ   !#7#Ô)iC~Æþîïï ÿÿ ÏÑÙ'< Ý  <ÿ#    ÿÿ öÄÛÇ'= Ý  =ÿ#      gÿ]j O S  2#"327676765#"'&546;57!##"'&'&'&54767676%#¹

42;%-ú´n`Ô®úrr£#26A@:V7:$)&7.Yq	

	%$.277g[½£(Ëdü¢VDQ49%*,04?()-#úæþ   ÿÿÙÒÉ  5  2&'&547676762"'&'&'&5476767hc"$njln(Lfe*+$$$$+*e*+$%%$+É!#'(*dRj¨¨jSc*('!üù"%*,20,+%""%+,02,*%"    ¾ÿãÓ % C  &'&547676762476767622"'&'&'&5476767hcØn(%X%&&&W%(nØe*+$$$$+*e*+$%%$+,Dj*('(&,,&('(*kCÿ "&*,11,*%##%*,11,*&"     . i£ %  %&%&54767676247676762hhþÃ*(42u24)(()42u24(*þÃiÂÅ\=97,*+*96@@69*+*,79=ZÅ   rÿû_ '  #"'&'&'&547676763"'&'&'&5476767632_ÑÓdA=;0-/.=:DD:=./-0;=AbÓxþª1.=8DC9</./0;8EB:;/0ªþ  A   i  654'&#"632327632!"'&53267&'&#"#"'&54763247632327654'&547632#"Æ,#<Z%LFe0$û|U^),3ÿ ¦¡ÔSB?R»8<D3!#^L_U(=!#?>()1F="%".4"tNa5&$4!/.r<@6B2L²_0>Q#kI|Î"rz7&)?),%=^K=.C26F@13.!9+cM3     13 Æ  N  676 547&'&327#"'#536767&'&'&5432&5476323254'&543253%5@26þÑ`',  =NR6#!vWR>42:O	t51"".1&X°.RO		A5È½)T/1þ¥Î86,FAS:#(=:tA09SD 'A#5þ×}11BO9   ðÿá    "'&'&'&547676763"3ápm8884qlYTN!  !C@RP]e:6pltm9:'62Õ~~jf77     ðÿá "  05276767654'.'&#052ð]PR@C!  !NTYlq4888mpe'67fj~~Õ27&:9mtlo7:   fÿkR   !&547jljjlþïyyxzQ»þþþº¿q¶µp¿    nÿc$   0!!676n	wu;;vþ÷i43f$ºþ°°³³¹µ²²lc   Cÿ}U   #	3ÕþtÕþëìý    Dÿ}U   	3	DuþÔtþëìýý  ÒÿVÿ.   !	!þþ¶þáJþ©ëìý   ÒÿVÿ.   	!	ÓêþJáþ©ëìýý  ÍÿAÑ   !	!þmþ^¢þ\¾GHü¸   ÎÿBÒ   	!	Î£þ^¢þ^¾HHü¸ü¸ Éþåv   !'7DÄWèèWÄÃWçÂçWÃ   Éþë|   '7'7ÄWèèWÄbÃWçû>çWÃ þ¸¸^ $  #"&=4&+5326=46;#"3¸²xMe,,fLx²1d=AOOA=dÆÇ×ihØÇOßßO  ùþ°Øi (  326=467&'&=4&+532;#"+ú5nCFVU$#Cn5¥ÂBB*)p//oTBBÂ¥ÌPâAAáPDBÉÛ45iÙÉDC   S/~å   	#!5!3}þ¥ãýñþúãþ¥ª    t ]}   	7%ýd^º=ý¤]ýdý¤>  S¢~   5	/ý%Û0~þ¨#ª#þÉþÉ   t Á]«   	'-fý¢þñ\=]ýd]º>ý¤  -¡¤á   !'7!.	Øþ(þ÷ýìïòÀ``Àò    I)= 2   "&'&'&5476?!".'&47>3!'&'&54767>2	þÔ'!ý`!! !',Æ&þÔ&	þÔ    S¶~&   !5!	Fýò7þÉÒ8þÉþÉ  -x¤   !5!5	VüØ(Mþ³r¨úþ²þ²   6u      #3#3#3!!5	é´´ðZZ--ïþÓ-Iþ·(,þÔ,þÔ,þÔ,²þ¸þ·  S~      55!#3#3#3F´´þã9««äUU**©bÚ]^Úb«þU«þU«þU«  S~ô   !!5	Fýò7þÉ.©þÉþÉ  `tq    !%	¨ýqþ®ûïÆËËRþ®þ®     {¤V$    %!	ÀSþþÀÛü%äÁÁ@þÀþÀ     {V½   	tùÛü%îÎþ2þ2     6=   3!5	5!"'&'&'&6  $hIþ·ý$  Õh$  þ·þ·     6<   47676763!5	5!"6  $hIþ·ý$  ó$  þ·þ·  $   Oà   !!	eþëþäÂþþ     6n    55!âlMþ³lýTwæccæw¤   ekl!    5!!53	'	!_þú²[þ¥y"þÞþk©d©þ¥þ¥â©""©ò  e/lå    5!!53	'	!_þú²[þ¥"þÞþ/©d©þ¥þ¥â©""©ò  5 ·ü    !73#57!%!6ÍUcGýùjýý¶bÊzbýªïd©þþ¸Ç©""©ò    a Öp«    5!'53#'!!!7%aÜcßA[ýØÄýØ(ZqþZ{{þä{þÄÒûû   } ÛTM 
   %'!'!53	!;þqKÊRnKþa2þÎþ6ÛwîwþþIw22wþ  T }> 
   3#5!7!!!	ZQþtZþQ°0þðLþ´>þs¢þs£äþjLK  2Nu    '!53#'5!'7!	!£pSn%þR&ý %µUa2þÎý÷wþKþJ,L÷»w22w    ) ý¨1    '7!573#5!7!	!r&j&St&þSýp¸Wl6þÊýqûM,LþLþyû¾y77y     ½@¬ !  6767632#"'&'&'!	 6IYZgb^UMI%&&"LF\Zfc^UM3!çtþ§:6I&&&#LHZZhc\UMH'&&#L2<tt    	 XNy      " & * .  37#37#37#37#5'!!55!!3'#3'#3'#3'#r+qr*rr+rr+rV{{þêþ°*q+*r*+r++r+««««««««9ÇÇÆ\]ÆÇ «««««««  t ¹]¢     7&#"7'7	#%5²#t69Ï.þwZæþ¦Y96t"Ï.*þ¨X/æþ§å     SÑ~k     55!5!!7'!nnÿ þUªþVªº±GG±8:È     u \j     '327''	#395t"Ï.þÖYþ§/æYæ¿"u69Ï.þxXæþ¨X     N ¹î 2  %&#"6767&'&"67632&'&547676767}:<?M#þö!D" þ$(*&*&s	
 ?º$>"	s %*&*(&þ"!#!þ÷"O>>;     *§E /  4767!"!47676763"'&'&'&5!3!&'&5¦vþ¸þ5$ %% $ËHvgMME%!#"!%EM    u ¯\ 2  &'&'&'&54767#"'&'276?&'&'32\":ö
þ¨#'$'$#Y@öI:86s6::I ö þ§#&'#'"X÷:    5*ì  + B  67"'&'&'&547676$47676762"'&'&'%&'&'&547676762$¸àª[	/		ýH=ýaö=Â		/Z«þïI=XÂ

q>d(*c
Á			ÂXJ    n´°  .  676767632#"'&'&'&%&'&54767&'&54765  #&+*1)Fþº-Y)) .EOÍÍO/3S>>S&/ #$))%#Ã]]Ã#%))$#     &¾«¦ e   "'&'.54?654'&'&'&+"#!".4?64/&4676763!2;276767654/&54676762«ÃåIþ
]]òIåÃ¹Ã	Q		
¹¹		Q	Ã     %e«ñ g   "'&'.54?654'&'&'&+"#!".4?64/&4676763!2;276767654/&54676762«þ»GKaýç
u~iKGE²þÜ²Ã
êú	Ó²þÜ   2²   +  #76767&'&/3#6767!5!!5!&'&'g?j7R=y66y=R6k?þVO ýñS+

+Sýd _8=eyu'&utj<þu,*44GeeeeG35*+    S/~å   	#!5!3}þ¥ãýñþúãþ¥ª  ÿÿ B  ­   þ²Ñ&   *'$& 76#"'676 7Ñ	Ì7þ>{J<×pÝý1þ
GM+þ²SR·µ-PAd·ÌmüRì     þ²Ð&   567$'& 76&#" " +MG
þ1ýÝp×<J{þ>7Ìþ²áì®mÌ·dAP-üK·þ®S     gµ¢    264&"%!!"&462°OsPOtOwý#[ë¥¢òS'MPQqOO>î-"Y§ò¢R%     uþ#\u   	  	!	!hôþþóþÑþiý/uûÛûÓ-1ýü  )þòÔ    3%!!!!¡¢þæ«þçýUùÎ2xxùÎx  ýþò¨    #3!5!!50¢¢xýUþçùÎªøÞx2x  Qþò   	!	!Rþâþðüpüp Qþò   	!	!þãþðþâüpÿÿ Wþòz' ú  ÿ    ÿÿ Wþòz' ú  ÿ     ÿ Ç5 	  !!d#xûxþÝx#xàx# ÿ Ç5 	  	'7!5!'75þÝxûx#êþÝxàxþÝ    ÿ Ç5   !'7'7!d#xgx#þÝxüxþÝx#xxþÝþÝxx#    ÿþòÒ    $  %ÒþþYzxËËþòP-,Sµ'þGúûþF'    ÿþòÒ      7654' ÿmfþ§þxËËPýìþÓþÔýðSµ'¹úûº'   |þ¾õH   	rþ
öþéþ¾ÍÈõþêûþô  Üþ¾UH   	'_öþ
þéHþ3ü8þb  uþ#\u   	hôþþuûÛûÓ-  B \¨   33##!##533ìí´´íþùí¶¶íú®þRîþP°þP°î®þR    B \¨   333333#######5ÙÙÙPPÙÙÙRú®þR®þR®þRîþP°þP°þP°î  Pþ/      ! !! ! hþ¦Z[ýþMþ³§ýçýèMüÍüÓ-3ýzþ±üüëñ ÿÿ w Xs   ÿÿ XÔyý'¶ ~K  ÿÿ X  yý'¶ÿýî'¶ ò~K    T}ó   !!	òýþÉ7Jþä©77 1 § Ñ   !#	÷þã©78ýò8þÈ 1 § Ñ   !3	Ú©þÉþÈßòýþÈ8   ßá5   	''!jýêÉx¸ôýëÉxþG     ð ßF5   	!0Éýêw¸½ýëÉx¹     ð ßF5   	77!ýëÉxþGVÉýêxþH      ßá5   	!ÉýëxþGÉýêw¸     T}ó 	  !5	5!	»7þÉþEþÉ7J©þÉþÉ©©77  1 § Ñ 	  #	#3	Ú©87©©þÉþÈßº8þÈþFþÈ8   ÿ±Ëw    7!!!xáürÅ$ðýÄû<     ÿ±Ëw    !!!xáürÅðû®Äû<    ÿ±Ëw    7!!xáürÅ$àû®Äû<  ÿ±Ëw    %!!YürÅ$àû®Äû<   ÿ±Ëw    %	hËþ5ýbcýJÊÊþ6býý    ÿ±Ëw    	Êýbcýþ6þ6býý    ÿ±Ëw    	!	ÊËûÓbcýþ6Êbýý   ÿ±Ëw    !	þ5ýbcýÊþ6býý     ÿ±Ëw  	      # ) - 1 7  %#535#5#5#5##5'3#5#5#5#5#5##5##5###5ËÍZssssô®´ðVÈrrrrÅsZ®´Vr~ÌrZH®®N³³ýrrrrZZrÌH®®N³³bÈVrrrrrrVÈ  þVÑÕ  %  %;#"'&5! !&'&+3264&#¬Tb'~ÒV^ª û,A/þ¼´Ok^yihz)láhhÚÕÌæ¶	A^ýçy©þi_Ú^   `ÿã~ð  !  5!!5#"'&3227654'&"Z$þÜ3QRmÐtsêØaOOþr<<Ô>==>Ô<<6ú+©b22ËÊrv/0ýYïðï  VþV{Õ   ##!!+53265}ë þ`²±b¸ÐyMdR¬ýsûTÕýqúeþôØãn   !  °Õ  
  !!!!!iþé@þþm'\Z'cüÕþq    `ÿã~ð  !  %!!67632#"'&4'&"276þÜ$3QRmÐtsêØaOO<<Ô>==>Ô<<Õ©b22ËÊþþþp/0§ïðï     HÕ   !!!!'ýhþÙÕýÇþüýh   ¬  /`   !!!/ý þÝ#ãÛýø`þ   A  j    2!$76676'&&`rþkþÜþjs+*Z6j{þÕþ4@ïBsåSV}ïdâþöÒþxaòM>     ºÿå    !5#"'&'3276767654&+5!2þÜ,XZv<::40L^EE&

Sbê<Òµ@ûÀ®`45,,! >&64päná×  bÿão{      &"26$     6 54&"òOsPOsPýpÛþçþ%]`xÓxiPPsOO*=þÃýâþÃCWW	¥¹¹¥ ÿÿþÎK_X  ýd   Éà   3!3h¦»àþÿà»&ºü¼D    þð 6  .54$32.#";#"'%&'&'&'32654&'þßãgÎe_Ä`kr*(¶SU@aS@G:þâdLohvÝlmxPLU»Ëè/.þàCFVP>((20Ejm¦âp6GþÝxþY41TRcYCe     sþÕ   %;#"/&'5!!FùdSwk¬êåýwòªF3³GþÝx´¯ôÝô   ®þpî`  # '  !767#"&5476?67654747![`bedeÊæ""^XD#.þõÏü­#Fþô8¼¥LAB\VC)*=	ý%(+C"	çþå   ÿÿ X  y0'¶ ýîK   ¦:¢   !#!¦üòþö¾ýä /:+   #5!!!òüþöV¾ý& ¦þò¢Ì   3!!°òþ
P¾Ú  /þò+Ì   !53!+þò
þò¾ÿÿ ¨  èðV     ¿    #533ÒÀÀ1¼Ð¼útút   ¿    #533ÒÀÀ1¼¼û¨út   ¿    #533ÒÀÀ1¼h¼üÜút   ¿    #533ÒÀÀ1¼4¼þút   ¿    !#533#ÒÀÀ1¼¼¼Ðút      ¿    53#3ÿÀþ¼¼Ð¼¼û0    ¿    53#3ÿÀþ¼¼¼¼üd    ¿    53#3ÿÀþ¼¼h¼¼ý    ¿    53#3ÿÀþ¼¼4¼¼þÌ    ¿    !53#ÿÀþ¼¼¼út     ¿   !!#­þ¼¼û0   ¿   3!!#¼ñþ¼þÌ¼üd      ¿   3!!#¼ñþ¼ý¼ý      ¿   3!!#¼ñþ¼üd¼þÌ      ¿   !3!¼ñû0¼   Eä 	  3'#'<Y÷[}}[äÜQoývoQ Eà 	  #'737Y÷[}}[ÜQoývoQ öÚà  	  3#'3#öä"¢ ääàþ¿êêþÄÇ  öÚà  	  7353ö ¢"ääAêêþ¿}ÇÇ   ÿÿö  ÚDÏ  ýd     ïÔ   !5 !5 !5 G^þ¢^þÇ	®¸
ûýXûþåcmþûþZ  G  ½`   !5 &!5 &!5 y6þÊ6þÊN	
ØôØäØþèaY¨þ¸  ¹Ëð 	  5!$õYþöcýÙÐØßN1Ô þµ   ¹ V{ 	  5!$íaþöcýÑ^þù³N1Ô þÝ  þVHÕ   %+53265!!!!!H\\Ðy%dQþþÙ'q':þönlãnlýhÕýÇ9  ¬þX/   4&#"!!>32+53265ENPZþÝ#j¢[ZÒy'dRªyh}ýý¤]fÓÑýTüklán   ÿÿÁ  '    !J=    !5!5!5!Jþ>Âþ>Â!´´´  ãáîÕ   !#ã!Ç#Õýqþe  çªçÕ  ¶ d ÔÌ1 ôÌ0!çÿ ÕýÕ+   ÿÿ e  gf    lþDe  "  &'&#"3;!"&5#"'&!5!! ;2RbêþÄÑ¶{¹Ñ@'þ×Nà?28ýÔnáØû+Ðì)báüÌ   Pþ¾Õ   !!3!#!P= gþÛ}þ^þüÕûÃ=û/ýºB=ûÃ   aþâ{   3##4&#"!!>32äÛäENO[þÝ#j¢×þþªzi~ý`¨]fÓ       Î×   !!!!!"#5476ð+'þÙþÕþÙB1âTT×ýÇ9ú+ýhÀ/B;ÊNP  æëà    33533#####5335:ºé¹UU¹éºTTºéà}}}\ýtþk\\ff  1   " +  .#"#"'#"&632632!3267"264&æIF@L¾@J²^X²±WZ­þ"`a@{CüöBLKKKABE?þ UU±0±VV¥CJH #Hh¸hh¸h    bÿão  #  2  #" 67.5463%""326&rêþçîíþç¦v.ð6þ	VHrPixxijxx|þ¾þõþñþÃ=»k)mÑ9%Qï¹þ¶¹¹J¹       J   G@&	 tZ YX
Xü<ì2ìü<ü<ì991 /<ä2ü<Ììî2990!!!!!!#53546;#"%%þÛþÉ\þÛþÉþÛ½½§äPDB/þÜ-cû üáNÊá0       J  ?@" t	 ZYX 
Xü<ì2ìüüì991 /<ä2üìî29903#!#535463!!#"î¼¼þÛ½½§äöþÛÅB/ÃcáüáNÊùì30   ÿÿ ýLÆ'Ýòþªã  ÿÿ EýLå'ÝÄþª×  ÿÿÿÜýhîX'ÝØþÆ'  ÿÿÿàýñ'Ýäþâ(  ÿÿ ýLÆ'Üaþªã  ÿÿ EýLå'ÜDþª×  ÿÿÿÜýlX'Ü@þÊ'  ÿÿÿàýlñ'Ü8þÊ(  ÿÿ ý0Æ'ÞSþã  ÿÿ Eý`å'Þ.þ¾×  ÿÿÿÜýd]X'ÞþÂ'  ÿÿÿàý`ñ'ÞDþ¾(  ÿÿ ÿÜÆ'Ýë·ã  ÿÿ Eÿìå'Ýõ¥×  ÿÿÿÜ  î'Ýô2'  ÿÿÿà  ñ4'ÝïS(  ÿÿ ÿÜÆÍ'ÞGìã  ÿÿ EÿìåÕ&×  Þ5ôÿÿÿÜ  z<'Þ;['  ÿÿÿà  ñ_'Þ@~(  ÿÿ ÿÜÆÞ'T $ý²ã  ÿÿ Eÿìå&×  T  ýÛÿÿÿÜ  mD'T þ'  ÿÿÿà  ñ?'T þ(  ÿÿÿÿ|Ñ!'Ö0âë  ÿÿÿNÿ å&Û  Ö4Âÿÿÿì  q©&Ø  Ö Èjÿÿÿì  å&Ù  ÖVØÿÿÿÿ|Ñ1'Þ8Pë  ÿÿÿNÿ å	&Û  Þ,(ÿÿÿì  q&Ø  Þ Ü´ÿÿÿì  å&Ù  ÞB"ÿÿ Xþ­'Ý³ ãc    ý4ù¶   7  5353;#"'&'&5327'&54767&5$0óáááÌ2a@M(1l\>mFÜ|i»ÌÉúþ{©1'OZÃ$Äþáá^ááå>B/á7*_lH>Ãþ÷«^OpåbÄÞûÉDh'à@5Â ÿÿÿìý~\c&_  ÝþÜÿÿÿìýÚüc&`  Ýÿ8ÿÿ Xþ­'Õ c    ý4ù¶   7  3#%3#;#"'&'&5327'&54767&5$0ááþ¢ááö2a@M(1l\>mFÜ|i»ÌÉúþ{©1'OZÃ$Ä>áááã>B/á7*_lH>Ãþ÷«^OpåbÄÞûÉDh'à@5Â ÿÿÿìþÈ\c&_  Õ lþÈÿÿÿìþðüc&`  Õ@þðÿÿ Xþ­'Ü ¢c    ý4ù¶  8 <  5353&'&5327'&54767&5$';#"'&'!53áJ½E>>mFÜ|i»ÌÉúþ{©1'OZÅ&Â 2a@M(1ýñáþNáá.á1]_lH>Ãþ÷«^OpåbÄÞûÉDh'à@5Â>B/á7	Êááÿÿÿìýn\c&_  Ü ¨þÌÿÿÿìýüc&`  Ü@þàÿÿ Xþ­'Þ& »c    ý4ù¶   9 =  5335353&'&5327'&54767&5$';'!53¥áMááZ >mFÜ|i»ÌÉúþ{©1'OZÅ&Â 2a@M(©ýñáþáááá.á#._lH>Ãþ÷«^OpåbÄÞûÉDh'à@5Â>B/á?áá ÿÿÿìý\c&_  Þ üþèÿÿÿìýüc&`  ÞTþàÿÿÿÌþÒ'ÖÆg  ÿÿÿ`þå'ÖÆj  ÿÿÿÌþ»æ&g  TUýºÿÿÿ`þå&j  T éý×ÿÿ 
ÿ]l¤   ÿnÿl 1  %!"'$47!32767654/&'&54767;#"'
`þþplþ¶,&y1[xH](45[	"G(7þ9 ÷-RTáHLF0 b,¦@^n@",DX6,vÊB"C@,\ ÈþÖþÂ04GýÚ?á!  ÿÿÿì  +  ÿÿÿâ  ö  ÿÿ 
ÿcû'ß¬ ¤  ÿÿÿnÿÿ&  ßT ÿÿÿì  +²&  à   ÿÿÿâ  ö²&  à   ÿÿ þµ°°í   ÿ«þæ &  %#"'$47!3276765'!;#"EE<fÛ¤þó1 &~LCi*r$".$
.04^>¦zjF/?¬¶¯I,6gb`-d t8@á  ÿÿÿ¡ÿ©Ñü¦   ÿ¡  <ü " 0 @  %3!"'&547!763&'&54767&'5%376'&'&'%67654'&#"Ñkûýã<y
'#%D8*%D(E× +þ61"þÝ áá"D#!
/]Q=ERH'è>Èí¼B)!F'-p
77/&9A5   ÿÿÿìÿ©3ü§   ÿÚ  <ü  $ 4  #50!&'&54767&'53376'&'&'%67654'&#"&®<*%D(E× +kþ/61"þÝ á3]Q=ERH'è>Èí¼B*á)!F'-p
77/&9A5  ÿÜ  îX   %!#53276=!Hþwå®ë,1VVá,1j°°ä    ÿà  ñ   %#!53276=!3!!"^@ãþ¥ð¡,1"1,£þãHHá,1jÙÙj1,á ÿÿ  þ¢Ñuz  ÿÿÿ±þ å*¬  ÿÿÿÜþÔrX'Õ3þÔ'  ÿÿÿàþÔñ'Õ?þÔ(  ÿÿ0 Ô|  ÿÿÿà  ñÔ&q  |    ÿÿ äk¦}   ·  å   ;#"'&=!Ú1,cKí\W#u71,á\W¶+  ÿÿ0ý¤ ÿø~  ÿÿ0 Ö  ÿÿÿà  ñÖ&  q    ÿÿ*¤¦  ÿÿÿà  ñ&  q    ÿÿ0þ¢ ÿø  ÿÿÿàþ¢ñ á&  q    ÿÿ þºÓô  ÿÿÿà  ñô&  q    ÿÿ;Æ!  ÿÿÿà  ñ!&q      ÿÿ  -ÞW  ÿÿ à  ð´'  Â]  ÿÿ à  æ´&J    Âÿÿ§  Q'ÿöÂ]  ÿÿØ  æQ&J   'Âÿÿ Lþõ' `þfy  ÿÿ  þåñ&ª  ÿüþbÿÿªý§&ù ]    ÿÿý§æ&J  V   ÿÿ  þ¢ÑÊ'þñþ;z  ÿÿÿ±þ åw&¬  þäüèÿÿÿÜ  ÿ&'  ÿêþpÿÿÿà  ñÿ&(    þpÿÿÖ  ú]     æ   !;! '&1,´þøþäPWxûj0,â\e  ÿÿ þ¢Æ'Ôþ¢ã  ÿÿ Eþ¢å&×  ÔÑþ¢ÿÿÿÜþîX'Ôäþ'  ÿÿÿàþpñ'Ôøþp(  ÿÿ °ÿÆ%i'Õ æx  ÿÿ V  åú&¦  Õÿÿ ÿÜÆk'ÕCã  ÿÿ Eÿìåk&×  ÕLÿÿÿÜ  s3&'  Õ4Rÿÿÿà  ñ3&(  Õ>Rÿÿ ÿÜÆÉ'Ö>ã  ÿÿ EÿìåÉ&×  Ö0ÿÿÿÜ  q'Ö2R'  ÿÿÿà  ñk'Ö7,(  ÿÿ Xþ­'Ô c  ÿÿ Xþù&^  Ô(ÿÎÿÿÿìþÔ\c&_  ÔþÔÿÿÿìþÔüc&`  ÔþÔÿÿ Xþ­c    Xþù /  ;#"'&'&'327'&54767&5$&¬
na`(1¤l;)'IÜ|i»ÌÉúþ{©1'OZÃ$ÄB(-s}ná}c`DÍÿ«^OpåbÄÞûÉDh'à@5Â  ÿì  \c   &'&'&5672+5327676G+9ÐR¡HK©¥ñí07h°ÁdwÉ}[;ó#4fò5uTD<áO1?)    ÿì  üc )  +53276767&'&'&5676;#"'&CDÅdwÉ}[;¤+9ÐR¡HK¯ñí&7 Q9<P y<1];<áO1?)Tó%4fò)#[á£R  ÿÿ Xþ­û'ÔÜc  ÿÿ Xþùû&^  ÔØÿÿÿì  \ß&_  Ôþÿÿÿì  ü&`  Ô¶ÿÿ èÿÚL¦e    èÿÚå¦ "  ;#"'#"'532767654'&'!LFSK[]þã:RgsR"­"<EªGkHM¶=+/-ázw"&ô*	.s*]es¸l  ÿÿ èÿÚL/'Ô,Ne  ÿÿ èÿÚåG&f  Ô1fÿÿÿÌþ"g   ÿ`þå&   ;#"'5 767654'!	&I<spXþÔþóþÅÓæ
5Àv<-áÛô:H~2  ÿÿÿÌþí'ÔMg  ÿÿÿ`þåý&j  ÔØÿÿÿ<þÑîi   þøþéî F  ;#"'#"'&''&'#"'&547332767674/332765332+?4, 6G@J/B-%n3<Gec5ã0$ *)ë
$#ê !/îþÓ¤+áH23H;/F9+Y{K\daçÙÖw<$6#^l¨WcêX\ElHáÏM&    ÿìÿãÑî 1  &'&'+53276=3327653323#"'&'({-MI;eF*@$FðQ#ê !/ñC 6G@J/B-%'B+2.%á#GMÀZKTlHáÏM&þªæj23H;/F9 ÿìÿãèî 8  323;#"'#"'&''&'&'+53276=332765 !/ñ+N4, 6G@J/B-%n{-M#,P6$&ðQ#XÏM&þÓ¤+áH23H;/F9'B+L%á#'mÀZKTlEä  ÿÿÿ<þÑ_'Ö6 i  ÿÿþøþé_&n  Ö ì ÿÿÿìÿãÑ_&o  Ö ÿÿÿìÿãè_&p  Ö Æ ÿÿþãþÀk   þ­þì  H  %327654'&#"%3#"/+"'&5#"'&5473327676'&/3676.]>4FD7< 33M!
'_´Ú%5,iGec5ã0$ $*êCAÒRXá,$ QBá8-Sm\daçÙÖw<$6!`]]T'3WEfnf'    ÿà  À   -  %&'+53276=3676+"7327654'&#"V<%&:WE*((0ïHNÒRX£LÇÚ¯ã]>4FD7$á(/`rNN`JfnfÄ`-á,$ QB   ÿà  ñ  9  "327654'&#"'&'+53276=3676;#"/EC8\?hÚ¢8Q%VE*(ðFOÑQX$3H3&_QB*,$ þbá$/drNN`Jfnf'
á5-   ÿÿþãþÀ'ÔOk  ÿÿþ­þì&v  Ôÿÿÿà  ÀÁ&w  Ôàÿÿÿà  ñ³&x  Ô èÒÿÿ 
  µm       æ  %  %327654'&#"%;#"/#!#53!632M,>5M<GR,.lICu©ýä¤¤#³»hXá,, Zjn<0àObá3ûØ¬hX  ÿÐ  µ    %327654'&#")5!!632YM,>5M<Gýäþì#³¾eX¸~á,, Zjîá3ûØ¬h[y¤mK ÿÜ  æ  %  %327654'&#"%;#"/#!#53!632M,>5M<GR,.lICu©ýäÈÈ#³Ä_Xá,, ZjnD0àObá3ûØ¬h` ÿÿ 
  µ'Ôz,m  ÿÿ    æ&~  ÔC1ÿÿÿÐ  µ&  Ô6ÿÿÿÜ  æ&  ÔC,ÿÿ Hþ·eo    Tþô,  ?  076'&'&#&!27'&74767&'&54767632;# 77-'"!p/UFÁÔúþ4©zL'6:o^YeF2jQB;àÐþ­Ç#2þêNlMCyvþbÇ]n&ZEJ7*9;4,,39&@0F3B6â ÿì  ù]   727&'&576%32?!#5=´AQnä 	ÆqJX83NÕþ\þúþöYáSJelLïC-EKS5!ZþöÅ{á  ÿì  å, ! -  3!"'#!5367&'&54767632%654'&#"WÛþh¦¢hþÚ]VE$*Ujfiga $SþþQ$(/HááCVZ'-H.6%--+-2G3!^?N	   ÿÿ Hþ·¯'Ô6Îo  ÿÿ Tþô&  Ô©¶ÿÿÿì  ù&  Ôw°ÿÿÿì  å&  Ôü¶ÿÿÿÿ|Ñ'ÔÜ*ë  ÿÿÿNÿ å &Û  Ôà¿ÿÿÿì  qs&Ø  Ôwÿÿÿì  åÉ&Ù  Ôìèÿÿ  þ(Ñ'Õ°ä  ÿÿÿíþåk&Ú  Õâÿÿÿì  q_'Õ Ò~Ø  ÿÿÿì  åÉ'ÕFèÙ  ÿÿ ÿ¢¿t   ÿÿ¢ø ! D  #"'5327654'&'&5476;#"''&547!327676P E*jXcB8D-E0 /Y#:^Sà1,;rWML^ó° ÙFDRP4rx#q1)
""8Ef.&ªûkA0,âTT(57LàK5>(N365,K ÿ±  ÿì  +   )5!27654'&54767þZ)6þÿr
uéþ^JÞf>^á\$$(B;G&m16þôÌ%*%Xþ÷y}qe   ÿâ  ö $  %)5!27654'&54767;#"'0Vþâþ>®)6þÿr
uéþ^Jð',8.RáP¤"á\$$(B;G&m16þôÌ%*$YýªâY  ÿÿ  þu   ÿµþú #  ;#"''&'&7!3276765@390gL(5òæúnÆ$.0`UZkFOûkK',á7bCsLè\ssj1+-3diøj    ÿì     )5!2765!VPþ¾ýºÚÚ,0Ûe\á,1jl   ÿì  å   %#!532765!;!"^@ãþ±ä¡,1"1,£õþãHHá,2ilûj1,áÿÿ <þÛv     þå¤ $ 5  ;#"''&!4763&547632276'&'&'&#"D5("V nt¹Y2þçxAw~M©`bºþp1& 04!+	á3DP&4OþKµÇf7*g?'J­
7&': ÿâÿÐ'  *  %276'&'&'&#+53767632#"31?1& 04£"J@ZZ¨-aAµ`bº|aÚè7&'9àá`@(H®.8¬XD ÿâÿÐå  /  %276'&'&'&##"'+532767632;#" 1?1& 04uÚi"IAkZZ+SAµ`bº,Dd¦è7&'9üPlá}®P@(J¬G7áÿÿ þµ°×'Ô·öí  ÿÿÿ«þæ&"  ÔO-ÿÿÿÜ  î3'ÔèR'  ÿÿÿà  ñ3'ÔñR(  ÿÿ °ÿÆ%Þx    V  å|  %  &'&'2&'!;#"'0'#"'$5476f<ky\# 8FVqèn'LZþÒùmh*12e2\2Rð'+Í |Ocá4fI2ÙÑD   ÿìÿ©3ü  - =  27654'&'&'5#"'&'+5327&'&547667654'&#"Í#@ 0m!"þ.(3éí>=eÏf^E=S¯*%"*%ä' 
P8C!N'-_è;ËÑæ49rFq#+áCIQ=ERHþf<I/&+%5    ÿìýååü 
 ( 3  !3254'&#)#"'&'&'!5!6767632)327654#"ü&E8:EG>Öþ§\DM´§`L(2þü2(L`§´MD\Yý>GE:8E&uHg>MOufU`p\`wxáxw`\p`UfuOM>gH   ÿÿ Lþ¤y     þå¤  )  "34'&!5 767"'&'&5476323¯6L<d<%`'qOd¼ýÔÑo¼)3pZtÓ9l¹H~¦#!$*)þZ¤xT.Vô<fa
6F¥÷Z3Y®K>á   ÿÿ  þ¢Ñuz   ÿ±þ å* 8  $4'&'&5476762;#"'&#"'&&7!2767ç#/1/N,`V@I#¬,+3*L>Kozß$m<49f,;2$0bjCA2:Zá¬ª*Ll<H3G$8\Ptn
%  ÿÿ  ýkÑu'Õýkz  ÿÿÿ±ýdå*'Õ ¬ýd¬  ÿÿÿÜþqX&'  Õ2þÿÿÿàþñ&(  Õ?þÿÿÿvÿìS&·  þ,ÿÿÿlÿìå&¸  þ,ÿÿÿïÿìS»&·  þ>,ÿÿÿÔÿìå»&¸  þ#,ÿÿ lýpS&·  þÈÿÉÿÿ lýUå&¸  þÈÿ®  lÿìS   #"'5327!65!S;Q®õjK`UrHþ{/!BþÆÌ_M¤ ó PSü»gÂ®     lÿìå   %"'5327!65!;#"h¯þëjK`UrHþ{/!a=Mi«±À ó PSü»gÂ®ý.þî¾á  .þæ¢j  	 (  		!46?>54&#">32!5h:ýÆýÆ´&DX^DæÊeÉb`·T\\-?ZP>jýÆûðýÆ:ûëþå =TBV\L¥¼98þôFGDC+P=YNc{     	    !!!5!#!!3Ý-ü-ß%þÛ8´`üxxpþªþ½üp Õî;f  @ ÔÌ1 ÔÌ0!#!¡Åfþ    - ¤ö   1@
  ÔÜÔÌ1 Ô<Ì20 K°TX½  @   ÿÀ878Y3#%3#¸ììþuììöööö   Õî¸ö  8µ ÔÌ1 ÔÌ0 K°TX½ ÿÀ    @878Y@  / /]!#þâÅöþø    îÅø ! Ñ@  	°°	" 
"ÔÌÔÌ999991 Ô<üÔ<ì99990 K°TX½ "ÿÀ  " " @878YK°TX½ "ÿÀ  " " @878Y@]
 



! !.]'&'&#"#5463232653#"&j6-(mX$K&<'$'kX%G"<2j'<9j    îþö  8µ ÔÌ1 ÔÌ0 K°TX½ ÿÀ    @878Y@  / /]#7ÇÅþâöþø    ðîáö  b@	 ÔÌ91 Ô<Ì90K°TK°T[X½ ÿÀ    @878Y K°TX½ ÿÀ    @878Y@  / //	]!#'#Í5ß²ÇÆ²öþø¡¡    ðîáö  h@	 ÔÄ91 ÔÄ290K°TK°T[X½ ÿÀ    @878Y K°TX½ ÿÀ    @878Y@////]373ÍÝ²ÆÇ²ßî¢¢þø     /ôwq  B@
  ÔÌ991 ÔÌÔÌ0 K°TK°T[K°T[X½  @   ÿÀ878Y´78]'T%#%ôvw  c¸k   3>323.#"bLM`­­c<=<= c¸k  @ ]] ÔìÔì1 ÔÜÄ20332673#"&bLM`­­k<=<=  ßuòk  µ  ÔÌ1 ÔÌ0!!ßþíkö  cbk   /@
 ÔÌÔ@O?/]Ì1 Ô<ÌK°QX¹  @8Y20!#!#FþâÅ°þâÅkþøþø  ocÉk    #!#ÇÅþâÇÅþâkþøþø   Z  wð  %  !!!5676767654'&67632¸þõþõ?.
,A=J@AAB$GþåtP;*AE 1)Z58¼¥BKS;r`]
/   -¤N  µ  ÔÌ1 ÔÌ0!!-wýN¼   ÿNÿ¦   !5!Nü5Ëê    ÿËÿ¦   !5!Ëû;Åê    çÿêÿ¦   !5!êüýê   PÆ÷    2"&46"264hxO()£î¡­nMKpNöT'd;t¡î£LpKLn    -;¤1    3#%3#¸ììþuìì1ööö         á á   53#áááá       ? á    %3#%3#^ááþ¢áááááá     ??     3#3#%3#¯áá¯ááþ¢áá?á}ááá   Eÿìå %  "'&547!32767654'!;#"'&'[ØuÉg&d2MU%*
!KA#7$ê)FådVPV@-&*QVKZ;3(á. 'V    ÿì  qÙ  0  654'&#"32327676'#"'&54767632#!0'!+ýËñí6E&o­TbN}N;51E1Ðmþ¿G.%0þ¨(, #CQ-3E$2&UOqÿ kJ'    ÿì  åE ! 5  ;!"'#!5327&'&54767632"67654'&'&$X*ráþÅº¸þÄâw#=)+?XTfnp+%"&04X=:@+Há99á^.LHhã'#2."$
  ÿíþå . @  %&'&'&5476763237## '&547!32766'&'&"V>¨_j2^k$l"$:?02\ÿþ¾[3#*2-~^xf$!$#1/GB

iuw^h68@6`aþåázRK@ÀmzªdQLF<LxkI5
&%)'    ÿNÿ åJ + =  %#"'&547!327&'&547676322;#"654'&'&#"tØrÄø
!tGU/CU+wevSm(Z	OQW""(71%>6fþ_fj.<UjVo+\7/2C!Fxâ)Ab"$
+*"N     þ¢? á     5353!53¯á2áýÁáþ¢áá^áááá    þ¢ á á    5353áááþ¢áá^áá    þ¢? á      5335353!53á}áááýÁáþ¢áááá^áááá   º·í   	·ýI·èýÒ-    ²   	5üd´þlþ      ¶·    %4'&"27>"'&47623J22J?@¸?@@?¸@Ü$2%&2¸@@@@¸@??  lþXdÕ  @@% dp
&& üìüÄì91 /Ôìä2990KSXÉÉY!!+53265!lÙ\\Ðy'dRþ;þñÕûõúgþönlánßûõ    ÿÜÆ   !"'&547!32764'¸¶pþ»ó±g3|nuZqX4;õTfnLH0DI®0      þ(Ñ"  6  654&#322765#"'&54767632!&'&47!i)@5,!,)'þÂÊj$i+³Tc¢Q_V.NþóÝ¢¢057D(K#N$.=*ý,Ì"Fc½8(ÎR&HTÌêñÿsuÖ~¿]zJ\ÿÿ ýôÆk'áýô'Õ@ã  ÿÿ ÿÜÆ&ã  Ü9¤ÿÿ Xþ­Ç&c  ÿ®ÿ8ÿÿ Xþ­1&c  Ý¾Pÿÿ Xþ­&c  ÖBÿÿÿÌþ×'>ýÒg   ÿÿ|Ñ  :  654'&32#"'$&7!3276767#"'&54767632¸,,;!%&,?¼Mï²¥{þí# $xZ;re73C\|-wqb`YM]#ì&-#*Bþ|^6()[:\^-"')Hac)s52(#4þâ ÿÿ  þÄ&u    þµ°°   #"'$47!3276765'!°T<fÛ¤þó1 &~LCi*r$".$( ÿÖjF/?
¬¶¯I,6gb`-dÿÿ Lþt&y   þ@ÿÿ  þ¢ÑX&z  þìþ$ÿÿ °ÿÆ%Þx   ã  îÕ  	 @ d 
Ô<ì2991 /ôÜÄ0!!!3îþõþõ!Ç#ºú+eþ    °ÿåîÕ  % x@<
	%%	
f hrd&#	 !
  &Ô<ü<ÔÔì9999991 äôÄìÞÅî9990KSXÉ9É9Y"!!!3267#"&546?>54765þõþõ>PZ=-\\SµabÉeÉåD^XB&ºþocMY;Q,CDGFþô89¼¥L\V@T?   ÿÿ ®ÿåîÕ¶  u      ^¸¼¢_<õ      ÓÂ+ô    ÓÂ+ôümüÙÙT            mþ  ÑümþøÙ                Ñ h    Ñ  Ñ  ã ç  ¤ ! %ç5 y Bj-Á q { ¼ s } f     oÁs X X X é  ! }   ¨ ¶ u  ¬ m u á V w \ ¢ \   Z j 9     s¦ o/ 9   Ç ^  ¨ Z \ ® b ¬   ® Z R ¬ b  Z# ¬ o   P   7 ; ¢ °ö ´ X  ã  w º ö ª-    w X-  - XÕ ® FÁo9 Á / / / ° ! ! ! ! ! !    ¨ ¨ ¨ ¨ ¬ ¬ ¬ ¬   w \ \ \ \ \ wÿú j j j j  ¢  ^ ^ ^ ^ ^ ^  ¨ \ \ \ \     b ¬ b b b b b B          ;  ; ! ^ ! ^ ! ^  ¨  ¨  ¨  ¨  Z   Z ¨ \ ¨ \ ¨ \ ¨ \ ¨ \ u b u b u b u b ÿÃ   ¬  ¬  ¬  ¬  ¬ ÿø 	 m  u ® ® á Z á Z á Z á ZÿÙ % w ¬ w ¬ w ¬ÿ j ¬ \ b \ b \ b D  #  ü #  ¬  ¬  ¬  ¬ Z o Z o Z o j   j   j   j   j   j        ;  s ¢ s ¢ s ¢ ®    ¢  + -   ¨  ÿä }  a ¨ \ } l [ &    ¬ ¬  ® Z P R  ¬ \  	       ¬ b ; o  o Z   Z u   s  
 
 n  s 
 n  Qã þ Iã ! ^ ¬  \ b j   j   j   j   j   \ ! ^ ! ^    u b u ® \ b \ b 
 n  u b  w ¬   ÿú  ! ^ ! ^ o \ ¨ \ o  ¬  \ b \ b = ò # j  j    ¬ Z o 6 n  ¬ j  s ¢ ! ^ ¨ \ \ b \ b \ b \ b  ; 1 % o   ÿúÿú    ¬ ¢     9  À n x x  ¬ ¢ M F X \   f 0 l   |  b b § § § j  j X l r  P P P @ D x b K R  º º M º º   h A © [ [ [ ;   X U T P   : D . v n e ¦ ¦ ¦ ¦ 7 w l = x ^ h ë F   3   B  Q J 4 . 9 8 QIIUU Þô°°ßÚÚHH ð ð	-	-)sÚÚ.ßL¾)þÈ'JH  ÇÕ ð-  ß-L) ð
 í ¿ßßÕNNoØS ûV;`S/ §ß-to
- Ð ð ð-     X À   ÿúû-J ÐaÚ  ß¹ÿô¿ w  ¬ ¨ ¬s mÕ-ÿ¯Áþ¡þyþµÿUþÿ ! } ¶ ! ¨ s  \ ¬ u ! V w  \  ¢ b Z  \  P Z ¬  6  ¬ L 6  8 b   ¬ a ® P ® /  b   ¨ b  L A H E @ L b L @ p i "þ$ " :  4 \ b ` Z ¶  c r   - 4  ¨  \   ¨ ¢   V V .    ¨ ¨ÿÞ ¶   ¬ ¬ mÿò ÿÞ u w   ! ¢ } ¶ ( ¨  } w w u  V  \  ¢  Z  #  P e N N  ( |    S ^ A w Þ ? \     ® E V ¬ b ¬  ¨ ¤ ; O 7 a  N : (   ¨ 8 ` \ \  Þ ¨ ¬     #  ®  ; «  ( \ b ¶ Þ / \ ¶ Þ   }  u ® %  N N  ¨ Z ¤  9  9  7 e ¬ ¬   u ®  ¬ e  ! ^ ! ^    ¨ \ \ \ \ \   }  
 n w  w  \ b \ b \ b  ¨  ;  ;  ; e  ¶ Þ (  }  \ Z     G b ! ! b M p b + ! j  N # j @ G ! G ! 2 ! K j M 4 H ! j ! i j 2 p  3 \ Ú  C ¼ P  A g  A ´  6 A §H O b ¦ ¨  g  ¦ g  ¨ â P  u ¦ a Q § u ¼ Q A b * .Â- ; ;    ¸Y ¨  à± L±  Ö  °   X X X è èÿÌÿÌÿ<ÿ<þãþã 
 
 H Hÿàÿ      <  ° L    0 ä00*0 þ; à±±8Äl } > ¬ f B Z Z z ¸ ±       X X X XÿÌÿÌÿ 
 
ÿ¡  Äl } > > L Ö Z Z z  > l y  K G f { 5  S K } } T T H H  f d > O >  X 5   R R kü 
ÿ 	 	i	ÿìÿ÷òÿý 3ÿ÷h b d P  a b b  b b b d b  b a  a    b  d  b 9 b ^ b a a b c b a a m  M c P ~ 5 f i  b a ) ( + ø ô",DD*:PND002( ä))0 ÷00$$.'&M"O""09M ÿ&UM b: j Z0OJ%$Jt2M'?'',,x0" ñO9G.)" ! ^ }  }  }   ¨  Z  Z  Z  Z  Z ¨ \ ¨ \ ¨ \ ¶ ® u b  ¬  ¬  ¬   C  ¬ ¬  u ® u ® u ® á Z á Z á Z á Z V R V R V R w ¬ w ¬ w ¬ w ¬ \ b ¢  ¢  # # # #  ¬  ¬  ¬ Z o Z o Z o Z o j   j   j   j   9 P 9 P                      7  7  ; s ¢ s ¢ s ¢ ¬ o   ; ® b ! ^ ! ^ ! ^ ! ^ ¨ \ ¨ \ ¨ \ ¬  \ b \ b  	  	  	  	 j            ;  ;  ; 6 6 6 6 6 6 6 6 ÿÞýýþqþ5ÿTÿ"      ÿÿüÍüÃýhý6 ¬ ¬   ¬ ¬ ¬ ¬þßþßüüý,ýþ(þ(   õ ÍÿÿüæüÈýrý@þUþU b b b b b bÿ\ÿüáü×þ&ýô L L L L L L L Lþ{ünüýµ @ @ @ @ @ @ @ @ÿpÿ*üáü×þ?þþÈþ} 6 6   ¬ ¬ Ç b b L L @ @ 6 6 6 6 6 6 6 6 ÿÞýýþqþ5ÿTÿ" ¬ ¬   ¬ ¬ ¬ ¬þßþßüüý,ýþ(þ( @ @ @ @ @ @ @ @ÿpÿ*üáü×þ?þþÈþ} 6 6 6 6 6 6 6 ! !þñÿ¯ !ÇÇ ¬ ¬ ¬ ¬ ¬þþ¡ýíþy   õ Ç ¬ ¬þ)þµ  Í L L L L   L L  ýÙþþý Ç- Ç @ @ @ @ @þ8ÿUþBÿ ZÕÇ                      --          °°j°         9       Ë  É Z¤ ¯ é  ÿ½¦/ & &  ¨  & ö%¾¾I9 ö%¾¾)"I&'I0J9   Y E   n '        <  2  	  < ,    . Z g 
 f    ; ; 2     J       Z u !  ÿí / / /  /  ÿô / # /  #  /  B þ B þ B þ  ¤ £  B B ; I B þ B þ B B B þ B þ þ B B B B B B 9 ·  ·  º ? 2 2 2 B 7 7 B Bø þ B Bø þ B  B B  B  B B B B B B þ B þ B þ }   } B B B B þ þ B þ B þ B B  Á A Á Á Á Á Á Á Á B ' , Á B  B B B B B B B  B  !  w £ £ ?ÿúÿú d d c d d c ú    B X q y  1 1 1 ±  X Xö ¶ ¶ ¶ ¶   ÿÖ  À  B J / X X X X X X X X X X X X X X X W X X X X X X Q Q X X X X X X X X V V N X X X X X X X X X W X X X X X X X X X X X X V V X X X X V V X X X X X X X X X X Z Z X X X X > >          2 2 2 2 B B B B X X X X  Z Z Á á Xÿþÿþ Z Z X X X X X X X X X X X X X X X X 9 ? r n    ¦/¦/   X G   ¸  # Xå C @  _ 2  4 B         B B     B B    B !   B B  B !   B B  ç   ç  ¶ ÿì  B   á-   X X X B ! X X ç   X X  @   ç  6  4    H F F F  è è è éÆ é è è è èÅ èÜ ÜÜ Û å   nÿìÿìÈ < <È < <ÈÈÈÿìÿìÿìÿìÈÈÿìÿìÿìÿìÈÈÈÈÈÈÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿì < <Èÿìxxxÿìÿìÿìxxÿìÿìÿìxxÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿ§ÿ§ÿ§ÿìhÿìÈhÈÿìÈÿìÈÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìÿìi      ÿìFÿìiÿìÿìÿìÿìÿìiÿìÿì           Û Û  DD     Û Û   Û Û     Û Û   Û Û       u           77ÿìÿìÿìÿì7777               ÿì            a a ¯ ¯  " 5 " Y  : : È ; +   6 .   o c  É  N 8 / & / / 0      	  " N ` y a Ì 7   g     ! ! ! !   ½    G ® C L ×  5  4 = / U 2 8  Y ^ C V p Þ   j 6  â g v    2    1 .r ¢ j D±7 ` . / < K D $ > K - - 9 . 7 . P < < < < < < . . . . R R  s '   ¼   J  * R * "  ó Þ . . : = 4 % = ?D - W & W ; %  J  @  3 @ V 9 0  ~  0 G     + % ( C ( # ( = ( . 6 W 0 $  2   $ 0 1 7 4 ! $   % 2   0  2 ) !  " $ E = 8 0 +ÍQÝÓ  ö g ÿ ¾ . r A 1 ð ðfnCD Ò Ò Í ÎÉÉ ù S t S t - I S - 6 S S ` { { 6 6O 6 e e 5 a } T 2 )  X t S u N * u 5  & % 2 S B   u) ýQQ W Wÿÿÿ ÿ ÿ| Ü u B B P w X X T11  ð ð  T1           ` V ! `  ¬ A º b  s ® X¦/¦/ ¨EEöööG ¹ ¹  ¬Áãç e l P a   æ 1 b    EÿÜÿà  EÿÜÿà  EÿÜÿà  EÿÜÿà  EÿÜÿà  EÿÜÿàÿÿOÿìÿìÿÿOÿìÿì X ÿìÿì X ÿìÿì X ÿìÿì X ÿìÿìÿÌÿ`ÿÌÿ` 
ÿnÿìÿâ 
ÿnÿìÿâ ÿ«ÿ¡ÿ¡ÿìÿÚÿÜÿà  ÿ±ÿÜÿà0ÿà ä·00ÿà*ÿà0ÿà þÿà;ÿà  à à§Ø L  ª  ÿ±ÿÜÿàÖ  EÿÜÿà ° V  EÿÜÿà  EÿÜÿà X Xÿìÿì X Xÿìÿì X Xÿìÿì è è è èÿÌÿ`ÿÌÿ`ÿ<þøÿìÿìÿ<þøÿìÿìþãþ­ÿàÿàþãþ­ÿàÿà 
  ÿÐÿÜ 
  ÿÐÿÜ H Tÿìÿì H TÿìÿìÿÿOÿìÿì  ÿíÿìÿì ÿÿìÿâ  ÿµÿìÿì <  ÿâÿâ ÿ«ÿÜÿà ° Vÿìÿì L    ÿ±  ÿ±ÿÜÿàÿvÿlÿïÿÔ l l l l           . Õ-Õ ð ð /ß oZ-   çP-       EÿìÿìÿíÿO             l      X X XÿÌÿ    L   °ã ° ®       D   D   D   D      Ø      x  Ð     X  °  H    Ø    0  d  	  	\  
  
à  `     °    Ü    Ð  $  p  ´  ü  ä  ä  Ð  |    |  Ø  ,  è  D      ¨  à  à  d  è  `    Ü  È    x       ä   h   Ð  !  !P  !  !Ø  "  "H  #@  #Ø  $`  $ø  %¨  &   &ì  '`  'È  (@  (¼  )  *  *  +  +¤  ,<  ,°  -Ì  .@  .´  /H  0@  1  1Ð  28  2ü  3(  3ì  4t  4t  4È  5  6   7  7ä  8(  9\  9  :¸  ;  <  <@  <l  =¬  =Ø  >T  >À  ?H  @  @D  @ô  AL  A|  A  Aä  Bp  Bà  C   C   C@  D4  DX  D|  D¨  DÔ  E  F  G8  GP  Gh  G  G  G°  GÈ  Gà  H  H<  HÔ  I   I$  IH  It  I   IÄ  J8  K<  K`  K  K°  KÔ  Kì  Ll  M\  Mt  M  M°  MÈ  Mà  Mø  Oh  O  O  O°  OÔ  Oì  P  P  P4  PL  Qd  Q|  Q  Q¬  QÔ  Qô  R  Rt  S|  S  S¬  SÔ  Sô  T  T¨  Tì  U   U8  UP  Uh  U  U  U°  UÈ  Uà  Uø  V  V(  V@  VX  Vp  V   V°  Wl  W  W¤  W¼  WÔ  Wì  X  X  X4  XL  Xp  X  X   X¸  XÐ  Xè  Y   Y  Y<  Y`  Y  Z,  ZÐ  Zô  [  [D  [\  [t  [  [¤  [¼  [Ô  \   \Ð  ]  ]¨  ]À  ]Ø  ]ð  ^l  ^  ^¸  ^Ð  ^è  _   _  _0  _T  _È  ``  `x  `  `¨  `À  `Ø  `ð  a  a  b4  bh  b  b¨  bÀ  bØ  bð  c  d   d¸  dÐ  dè  e   e  e0  eH  e`  ex  e  e¨  eÀ  eØ  eð  f  f   fD  fx  fÜ  gt  g   gÀ  gô  h  h4  hL  hp  h  h   h¸  hÐ  hè  i  i,  iP  ix  i¼  iÔ  iì  j  j  j4  jL  j¬  k  kØ  kè  lD  l  lð  m|  mè  n\  nl  nÔ  o8  o  p,  p  q0  qè  r4  r  s  st  t   tH  t  tè  u@  u  uÐ  v4  v  vÈ  w@  wX  wp  wà  x<  x¤  y  y  z  z|  z  {  {x  {Ð  |,  |d  ||  |  }  }`  }¬  ~  ~L  ~     p  Ü  x  ì  \  Ä  4    ¤  À      0  H  `  x    ¨  À  Ø  ø    0  H  h       ¸  È  è        @  X  p       ¸  Ð  è       0  H  `  x    ¨      4  L  d  |    ¬  Ä  Ü  ô    $  <  T  l      ´  Ì  ä  ü    ,  D  \  t    ¤  ¼  Ô  ì      4  È  P  h    Ì  `  °  ü    ,  D  \  |    ´  Ì  ä  ü    4  L  d  Ð  `  Ø  8  Ì  d  Ì  \  à    d  ø  @  ´  0    À  0      |  Ü             ü  ¤  H  ü  Ð       h        ¡  ¡p  ¡Ä  ¢  ¢x  ¢ð  £<  £x  £¨  ¤(  ¤  ¤Ô  ¥d  ¥Ð  ¦<  ¦Ô  §L  §¸  §ì  ¨`  ¨Ì  ©\  ©ø  ªL  ª   «  «h  «Ô  ¬  ¬L  ¬à  ­T  ­ø  ®@  ®¨  ®ð  ¯p  ¯¼  °  °l  °ä  ±X  ±  ±¼  ²  ²4  ²  ²è  ³X  ³ô  ´T  ´´  µ  µ  ¶  ¶¤  ·8  ·¼  ·ð  ¸p  ¸¬  ¸Ð  ¹P  ¹À  º4  º¼  »|  ¼<  ½  ½  ¾l  ¾ü  ¿´  À  Àh  À¨  Á  Á  ÁØ  Â8  Âx  ÂÌ  Ã   Ã  Ãü  Ä4  Ät  Ä  Ä  Ä¤  Ä´  Äð  Å,  Å  Åä  Æ@  Æ  ÆÌ  ÆÜ  Ç  Ç  Ç0  ÇD  Çl  Ç  Ç  Ç°  ÇÜ  Çø  È  È  È¸  É  ÊH  ÊX  Ê  Êè  Ë   Ë¬  Ëä  Ì@  Ì`  Ì  Ì°  ÌØ  Ìø  Í  Í  Í(  Í8  ÍH  ÍX  Í  Í  Íä  Î  Î(  Ît  Î  Îä  Îô  Ï  Ï,  ÏX  Ïp  Ï¤  ÏÔ  Ïü  Ð$  Ð@  ÐT  Ðh  Ð  Ð¬  ÐÌ  Ñ  Ñ@  Ñd  Ñ  Ñ´  ÑÐ  Ò  Ò4  Òh  Ò¨  Ó  Ó@  Ó¤  Ó´  ÓÐ  Óô  ÔL  Ô  ÔÈ  Õ  ÕL  ÖD  Öp  Ö  Ö  Ö   Ö¼  ÖÔ  Öð  ×  ×@  ×d  ×  ×ä  Ø  Ø  Ø  Ø¨  Ø¼  Ù   Ù   Ù<  ÙL  Ù\  Ù  Ù  Ù¬  ÙÄ  ÙÔ  Ùä  Ùô  Ú  Ú$  Ú4  ÚL  Úd  Ú|  Ú  Ú¬  ÚÄ  ÚÜ  Úì  Úü  Û  Û8  ÛH  ÛX  Ûh  ÛØ  Ûè  Ûø  Ü$  Ü4  ÜD  Ü|  Ü  Ü  Ü¬  Üè  Üø  Ý  Ý  Ý¬  Þ  ÞÈ  Þà  Þø  ß  ß(  ß@  ßX  ßp  ßø  àd  à°  áL  á\  áÀ  â  âh  â   â°  âø  ã  ãX  ãÌ  ãÜ  ä4  ä  äü  åd  å¤  æ  æ|  æì  ç<  ç¬  çÄ  çÜ  çô  è  è$  è¬  é0  é  é°  éÈ  êP  êÄ  ëd  ëÐ  ì0  ì  í  í  í  íì  î  î  îð  ï  ïà  ïð  ð   ðx  ðð  ñh  ñx  ñ  ñ  ñÐ  ò  òt  òÐ  òè  ó   ó  ó0  ó¸  óÐ  ôp  ô  ô  ôÈ  ôØ  õ@  õ  ö  ö,  öD  ö\  ö  ö   ÷$  ÷4  ÷p  ø,  ø<  ù  ù  ù  ù°  ùÀ  ú8  úH  úX  úh  ú¬  ú¼  úÌ  úÜ  û   ü  ü  ü  üø  ý°  þ`  þ¬  ÿ  ÿx  ÿÌ   $ 4    Ì   `    ¸ È 8 ô P ` ¨ ¸ È   Ð à 	8 	 
L 
ü D   T ô  ¤ ¼ $ < Ü ì ü  $  ä < T l  ¸  l |  Ð  L  à <  ð    d ¨ ä $ X  ¤ ¼ ð   0 ` ¤ à 0 x ä ô   4    L   d   ° ì   $ < T d t  ¤ ¼ Ô ì   $ < T l  ¨ È Ø è    0 H ` x  ¨ À Ø ð  4 ` x    ° À Ð à ð l ¼  (  x  È !0 !\ !¨ "@ "¬ "ø # #x $$ $p $Ô % %Ð &T &  '@ ' (  (h (à )0 )è *8 * *Ð +x +¼ , ,¨ -4 -À -Ð .l .| .  .À / /( /  /À 0@ 0 1 1\ 1¨ 2  2L 2 3< 3° 3ø 4 4¬ 54 5x 5 6D 6 7< 7 7¼ 8 8 8¨ 9, 9° :l :à :ð ;8 ;´ ;ü < <, <¨ =( =8 =Ü >$ >P >x ? ?Ä @ @` @ @Ü A A Aè B  B B0 BH B` B| B B¬ BÄ BÜ Bô C` Cx CÐ Cè D, DD E  E EÌ Eä FD F\ FÜ Fô G G$ G< Gø HX Hä Hü I` Ià J J JÈ KL Kx K L L( L¬ Lì M4 MD MX M M MÌ N, N¬ O0 O Oà P0 P Pø Q4 Qt Q QÌ R  R8 RP Rh R R R° RÈ Rà Rø S S( S@ SX Sè T  TØ Tè Tø U U U( U¬ V, V V¤ V´ VÄ Wd W´ X@ X¬ Y Y Z@ Z¬ [  [ [Ü \` \È ]$ ] ^< ^¼ _L _Ü `( ` a  a° b bÈ cp d  d¨ e e8 e eÈ eà f, f| fà gH g  h h\ hÀ hà i( iØ j j j\ jÌ kP kä lÐ mL mô n  oD o¼ pL pô q qì r s s tT tÈ u< uü vä w xP xÔ y z$ zÄ {( |  |Ø }< }È ~ p ð d         8  @ Ô  ¬ ä  ` ¼   T    < l  ø ( X  Ð ð ( X  Ð  x  Ø    \  h ¸  |  ¤  P  è H  ð $ X ¨ è ( h Ô ü  $ 8 L Ì Ü  p È      Ð   Ì  D t °   T   Ä \ Ä 8   Ì @ Ì  t  À ¡ ¡ ¡ô ¢d ¢ ¢¼ £ £p £Ì ¤$ ¤< ¤T ¤l ¤ ¤ ¤´ ¤Ì ¤ä ¥ ¥  ¥8 ¥P ¥h ¥ ¥ ¥° ¥È ¥à ¥ø ¦ ¦( ¦@ ¦X ¦p ¦ ¦¨ ¦À ¦Ø ¦ð § §  §8 §P §h § § §° §È §à §ø ¨ ¨( ¨@ ¨X ¨p ¨ ¨  ¨¸ ¨Ð ¨è ©  © ©0 ©H ©` ©x © ©¨ ©À ©Ø ©ð ª ª  ª8 ªP ªh ª ª ª° ªÈ ªè « «  «8 «P «h « « «° «È «à «ø ¬ ¬( ¬@ ¬X ¬p ¬ ¬¤ ¬À ¬Ø ¬ð ­ ­  ­8 ­P ­h ­ ­ ­° ­È ­à ­ø ® ®0 ®P ®h ® ® ®° ®È ®à ®ø ¯ ¯( ¯@ ¯X ¯p ¯ ¯  ¯¸ ¯Ð ¯è °  ° °0 °H °` °x ° °¨ °À °Ø °ð ± ±  ±8 ±H ±` ±x ± ±¨ ±È ±à ±ø ² ²( ²@ ²X ²p ² ²  ²¸ ²Ð ²è ³  ³ ³0 ³H ³` ³x ³ ³¨ ³À ³Ø ³ð ´ ´  ´8 ´P ´h ´ ´ ´° ´È ´à ´ø µ µ( µ@ µX µp µ µ  µ¸ µÐ µè ¶  ¶ ¶0 ¶H ¶` ¶x ¶ ¶¨ ¶À ¶Ø ¶ð · ·  ·8 ·P ·h · · ·° ·È ·à ·ø ¸ ¸( ¸@ ¸X ¸p ¸ ¸  ¸¸ ¸Ð ¸è ¹  ¹ ¹0 ¹H ¹` ¹x ¹ ¹¨ ¹À ¹Ø ¹ð º º  º8 ºP ºh º º º° ºÈ ºà ºø » »( »@ »X »p » »  »¸ »Ð »è ¼  ¼ ¼0 ¼H ¼` ¼x ¼ ¼¨ ¼À ¼Ø ¼ð ½ ½  ½8 ½P ½h ½ ½ ½° ½È ½à ½ø ¾ ¾( ¾@ ¾X ¾p ¾ ¾  ¾¸ ¾Ð ¾è ¾ø ¿ ¿  ¿8 ¿H ¿` ¿p ¿ ¿ ¿° ¿À ¿Ø ¿è À  À À0 ÀH À` Àx À À¨ ÀÀ ÀØ Àð Á Á  Á8 ÁP Áh Á Á Á° ÁÈ Áà Áø Â Â( Â@ ÂX Âp Â Â  Â¸ ÂÐ Âè Ã  Ã Ã0 ÃH Ã` Ãx Ã Ã¨ ÃÀ ÃØ Ãð Ä Ä  Ä8 ÄP Äh Ä Ä Ä° ÄÈ Äà Äø Å Å( Å@ ÅX Åh Å Å Å  ÅÈ ÅØ Åð Æ Æ  Æ8 ÆP Æh Æ Æ Æ¨ Æ¸ ÆÐ Æì Ç Ç Ç4 ÇL Çd Çt Ç Ç¤ Ç¼ ÇÔ Çì Çü È È4 ÈL Èd È| È È¤ È¼ ÈÔ Èì É É É4 ÉL É\ Ét É É É¬ ÉÄ ÉÜ Éô Ê Ê$ Ê< ÊL Êd Êt Ê Ê ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ ÊÄ Êð Ë  Ë( ËP Ëx Ë  Ë¼ ËÔ Ì ÌL Ì Ì¬ Í Íl ÍÌ Î Î\ Îà ÏD Ï` ÏÀ ÏÀ Ñ ÒD Òd Ò Ò  ÒÀ ÒÜ Òü Ó< Ó Ó Ô$ Ô8 Ôp Ô  ÔÐ Ôì Õ Õ$ Õ\ Õ\ ÕÜ Ö Ö ×  ×| ×¤ ØP Øà Ù Ù, ÙT Ù Ù¼ Ú Ú  Ú4 ÚH Ú\ Úp Ú Ú Ú¬ ÚÀ ÚÔ Úè Úü Û Û$ Û8 ÛL Û` Ût Û Û Û° ÛÄ ÛØ Ûì Ü  Ü Ü( Ü< Ü° Ýd Ýô Þ4 Þ  ß0 ß¤ à á\ â âd â| ã ãä ä< å¼ æX æì ç çð è é éT éÐ ê8 ê ë ë¨ ëø ìT ìÀ í íx î4 î¤ ï< ïè ðt ð¸ ðÈ ðØ ðè ñp ñÀ ñà ò  ò  ò@ ò` ò ò  òÀ òà ó  ó  ó@ ó` ó ó ó¸ óè ô ôP ô ôÈ õ õ@ õp õ  õÐ ö ö` ÷ ÷¸ ø  øH ø øØ ù ùX ù ùÐ ú úH ú û  û¨ üh ý$ þ þd þ¨ þà ÿ ÿP ÿ ÿÀ ÿø  |   < ¤ D ä  0 X  ¨ Ð ô  l À  \ ¤ ì 4 p °   ì , l ¬ ì 	H 	¤ 	ä 
$ 
d 
  
à   l ¸  X   ì 0 x ´ ð 0 l ¨ ä <  à @   X  à 0  è D  Ì $ t Ä 0 d  è $  ( X ¸  ü , È È \ ø ô  ¤ ì  t   à ð   (    ¸  0  ô ! !8 !H !p ! !Ü " " # #À #ä $ $$ $P $h $¤ $Ô $ô %L %¤ & &l &Ô 'X 'Ì (\ (ð )ð * +D ,4 ,¨ ,ô -° .$ .< .\ .| . .à /( / /ô 0< 0 0À 1 1T 2< 2È 3L 3Ô 4 4d 4¤ 5  5\ 5  5à 6D 6¤ 7 7` 7´ 8 8 8ø 9l : :¬ :ð ;4 ;¸ <$ <l <° = =` =è >l >Ø ?D ? ?Ô @D @´ A A\ AÜ B\ BÄ C, C Cà D D0 Dd D DÀ Dä E¬ F` G, Gä H I Jh K( KÜ L, Lh L¼ Lø M  MD Ml M MÄ Mô N4 Nt NÄ O OL O O° Oä PH P P¼ Q0 Q¤ Qø RL R R¸ S Sh Sô Tp TÔ U8 U UÐ VH VÀ WP WÜ Wð X  X, Xd X X´ Xè Y( YH Yh Y Y¨ YÐ Yø Z  ZH Zh Z¼ ZÌ [ [P [¨ \ \° \Ô \ô ] ]4 ] ]ä ^ ^ ^Ü c cè d d@ dl d´ e ed e| f  f f  fØ g gH g| gÈ h hX h  hð i@ iÌ iü jH j jà kT k kð l$ lp l¸ m m mÈ n n0 nH n` nx n nø o o( o@ o oÈ oà oø p ph pÌ pä pü q, q¸ rx rÜ s  s s  t tx t t t¨ tÀ tØ tð u u uh uô v w| x@ yP yô z { {D { { {Ô | |, |d | |¤ |È |ì } }0 }h }À }ø ~ ~L ~¤ ~Ü ~ø D p ´ Ð ì  $ X  È  < | Ä  4 X |   Ä è  0 P t  ¼ Ü ü  @ h  ¼ è  @ l  ¼ ä  < d  À è  < h  ¸ ä  8 \  ´ Ü  0 \  ´ è  P  ¸ ì $ \  Ì   4 h  Ð ô   L x   È ô   T  ¬ à  8 l  Ä ø ( \   Ð  D x ¨ è  L  Ô  t ¤ Ô  4 T p ° Ì è    < X t  ´ Ü   ( < X t  ¬ È ä    8 T p  ¨ Ä à ô ¼ $ ì    0 D X |  ¸ Ü ð  , H t È à 8  È P Ø ¡x ¡ ¡À ¡Ü ¢ ¢$ ¢P ¢p ¢  ¢¼ ¢ä £  £, £H £t £ £¼ £Ø ¤  ¤ ¤H ¤d ¤ ¤¨ ¤Ô ¤ð ¥ ¥4 ¥\ ¥| ¥° ¥ô ¦ ¦Ô §8 ¨0 ¨ä © ©Ð ª$ ªx ªÐ «( « «Ü ¬ ¬, ¬ ­ ­T ­¨ ­Ø ® ®0 ®\ ®¤ ®è ¯ ¯  ¯8 ¯P ¯ä ° °< °d ° °È ± ±@ ±h ±Ì ² ²H ² ²È ³< ³° ´( ´  ´È ´ð µ µD µ` µ µ¨ µÐ ¶À ·, ·à »ì ¾¬ ¾à ¿< ¿ ¿ì Àt Á< Â Âh Ã Å8 ÇÜ È È É  ÉX Ê° ÌH Ì ÌÄ Í ÎT Îì Ï ÐH Ñ ÑÐ Ò Ö Ö × Øì Ü Ü Ý Ý Ýì Þp ß  à@ ád áü â ã0 ä  å\ æ æ° çÈ è\ èð é° ê0 ê¬ ë8 ë ëü ì íH í¬ î î¨ ï ïÀ ð| ñ@ ñ° òP ò ó0 óô ôp õ ÷¼ øT ùp ú û ý  þ þ ÿ\  $  ´ $ Ä  ¬ p Ä ô  ø 8  ø X ¨ ø  	L 
0 (   D 0 @ ` < ü   0 | p  x 0 ( h ì ´  H !  !h !ô " "8 " "Ø #L $@ %t & '0 '¬ (L )L + -¬ /X /Ü 0( 0P 0 2\ 3ø 5´ 9l ; <¸ =@ =è @ B( CX DT E F` Fä GH G¬ Gð H4 Hü Ið Jp J¤ Jà K$ KT K´ L$ M M NX OØ Q  Tø U` V$ V W W¬ Xh Xè Y\ YÔ Z< Z Zè [L [¤ \T \ \è ]8 ]  ^L `  b  c@ ep g iØ oÔ q0 s t@ tø u¼ w< x¸ z {\ |  } }L } }° }à ~8 ~T ~p ~ ~° ~Ô ~ð   °        ð \  Ø   ( P x   È ð  | ì  H t   Ð t  Ä  d  ¼ ì  d ¸ ä  T  è 4  Ì   t è  Ü $ | $ ¼ ` < Ø  8 Ð    t Ø ( d  Ì ô  8 T  ¸   D  ¸ è  L   ô   < d  ´ à  8 d  Ì ø $ L t ¤ Ô  4 Ø  P  À ¡ ¡H ¡¸ ¡à ¢ ¢| ¢ä £H £\ £ ¤, ¤t ¤ü ¥ ¥4 ¥T ¥t ¥ ¥¤ ¥Ì ¥ô ¦ ¦D ¦l ¦ ¦¼ ¦ä § §4 §T §| §¤ §Ì §ì ¨ ¨D ¨p ¨  ¨´ ¨ø ©8 ©h © ©à ª< ªL ªt ª ªÈ ªØ «H « «Ô ¬  ¬h ¬ô ­p ® ® ®° ®È ®à ®ø ¯ ¯( ¯@ ¯X ¯p ¯ ¯  ¯¸ ¯Ð ¯è °  ° °0 °H °` °x ° °¨ °À °Ø °ð ± ±  ±8 ±P ±h ± ± ±° ²\ ²t ² ²¤ ³P ³h ³ ³ ´P ´h ´ ´ µT µl µ µ µ´ µÌ µä µô ¶ ¶  ¶° ¶È ¶à ¶ø · ·  · ·¬ ¸x ¸ ¹0 ¹d ¹¨ ¹¸ ¹È ¹à ¹ø º º  º0 ºd ºt º º º¬ ºÄ ºÔ ºì ºü » »$ »< »L »d »| » »¬ »Ä »Ü »ô ¼ ¼$ ¼< ¼T ¼l ¼| ¼´ ¼Ì ¼ä ¼ü ½ ½, ½D ½\ ½t ½ ½¤ ½¼ ½Ô ½ì ¾ ¾ ¾4 ¾L ¾d ¾t ¿ ¿p ¿ô À À$ À< ÀT Àd ÀÔ Àì Á Á Ál Á Á Á¬ Â| Ã Ã° ÃÈ Ãà Ãø Ä Ä  Äø Å Æ, ÆD Æ\ Æt Æ Æ Ç Çp Çä Çü È È, ÈD ÈT É Ét Ê Ê Ê4 ÊL Êd Ê| Ê Ê¬ ÊÄ ÊÜ Êô Ë Ë$ Ë4 Ì  Ìh Ìä Ìô Íh Í  Íä Íô Î Ï Ï¬ ÏÄ ÏÜ Ïô Ð Ð Ð ÑX Ñô Ò Ò Ò ÓH Ó` Óx Ó Ó¨ ÓÀ ÓØ Óð Ô Ô  Ô8 Ô Ôà Ôà Ôà Ôà Ôà Ôà Õl Õ´ Õä Ö< Ö ×Ì Ø$ Ø¬ Ù< Ù ÙÐ Ú  ÚL Ú¨ ÚØ ÛX Û Û  Û¼ ÛØ Ü  ÜH Ü` Ü Ü´ Ý( ÝÀ Þd ß, ßà à à4 àl à à¬ àü á áØ â â  â¸ âÐ âè ã  ã ãÌ ãä äH ä` äx ä äØ åÌ åà   ô + e    @   ¯$             _ À       B       ]              Ð               5       m       »      	       4ÿ  	   ¾    	      	  S  	  *b  	  *¤  	  æ  	  &  	  "I  	  :  	 &Ù  	  h C o p y r i g h t   ( c )   2 0 0 3   b y   B i t s t r e a m ,   I n c .   A l l   R i g h t s   R e s e r v e d . 
 D e j a V u   c h a n g e s   a r e   i n   p u b l i c   d o m a i n 
  Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
DejaVu changes are in public domain
  D e j a V u   S a n s   M o n o  DejaVu Sans Mono  B o l d  Bold  D e j a V u   S a n s   M o n o   B o l d  DejaVu Sans Mono Bold  D e j a V u   S a n s   M o n o   B o l d  DejaVu Sans Mono Bold  V e r s i o n   2 . 3 7  Version 2.37  D e j a V u S a n s M o n o - B o l d  DejaVuSansMono-Bold  D e j a V u   f o n t s   t e a m  DejaVu fonts team  h t t p : / / d e j a v u . s o u r c e f o r g e . n e t  http://dejavu.sourceforge.net  F o n t s   a r e   ( c )   B i t s t r e a m   ( s e e   b e l o w ) .   D e j a V u   c h a n g e s   a r e   i n   p u b l i c   d o m a i n . 
 
 B i t s t r e a m   V e r a   F o n t s   C o p y r i g h t 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 
 C o p y r i g h t   ( c )   2 0 0 3   b y   B i t s t r e a m ,   I n c .   A l l   R i g h t s   R e s e r v e d .   B i t s t r e a m   V e r a   i s   a   t r a d e m a r k   o f   B i t s t r e a m ,   I n c . 
 
 P e r m i s s i o n   i s   h e r e b y   g r a n t e d ,   f r e e   o f   c h a r g e ,   t o   a n y   p e r s o n   o b t a i n i n g   a   c o p y   o f   t h e   f o n t s   a c c o m p a n y i n g   t h i s   l i c e n s e   ( " F o n t s " )   a n d   a s s o c i a t e d   d o c u m e n t a t i o n   f i l e s   ( t h e   " F o n t   S o f t w a r e " ) ,   t o   r e p r o d u c e   a n d   d i s t r i b u t e   t h e   F o n t   S o f t w a r e ,   i n c l u d i n g   w i t h o u t   l i m i t a t i o n   t h e   r i g h t s   t o   u s e ,   c o p y ,   m e r g e ,   p u b l i s h ,   d i s t r i b u t e ,   a n d / o r   s e l l   c o p i e s   o f   t h e   F o n t   S o f t w a r e ,   a n d   t o   p e r m i t   p e r s o n s   t o   w h o m   t h e   F o n t   S o f t w a r e   i s   f u r n i s h e d   t o   d o   s o ,   s u b j e c t   t o   t h e   f o l l o w i n g   c o n d i t i o n s : 
 
 T h e   a b o v e   c o p y r i g h t   a n d   t r a d e m a r k   n o t i c e s   a n d   t h i s   p e r m i s s i o n   n o t i c e   s h a l l   b e   i n c l u d e d   i n   a l l   c o p i e s   o f   o n e   o r   m o r e   o f   t h e   F o n t   S o f t w a r e   t y p e f a c e s . 
 
 T h e   F o n t   S o f t w a r e   m a y   b e   m o d i f i e d ,   a l t e r e d ,   o r   a d d e d   t o ,   a n d   i n   p a r t i c u l a r   t h e   d e s i g n s   o f   g l y p h s   o r   c h a r a c t e r s   i n   t h e   F o n t s   m a y   b e   m o d i f i e d   a n d   a d d i t i o n a l   g l y p h s   o r     o r   c h a r a c t e r s   m a y   b e   a d d e d   t o   t h e   F o n t s ,   o n l y   i f   t h e   f o n t s   a r e   r e n a m e d   t o   n a m e s   n o t   c o n t a i n i n g   e i t h e r   t h e   w o r d s   " B i t s t r e a m "   o r   t h e   w o r d   " V e r a " . 
 
 T h i s   L i c e n s e   b e c o m e s   n u l l   a n d   v o i d   t o   t h e   e x t e n t   a p p l i c a b l e   t o   F o n t s   o r   F o n t   S o f t w a r e   t h a t   h a s   b e e n   m o d i f i e d   a n d   i s   d i s t r i b u t e d   u n d e r   t h e   " B i t s t r e a m   V e r a "   n a m e s . 
 
 T h e   F o n t   S o f t w a r e   m a y   b e   s o l d   a s   p a r t   o f   a   l a r g e r   s o f t w a r e   p a c k a g e   b u t   n o   c o p y   o f   o n e   o r   m o r e   o f   t h e   F o n t   S o f t w a r e   t y p e f a c e s   m a y   b e   s o l d   b y   i t s e l f . 
 
 T H E   F O N T   S O F T W A R E   I S   P R O V I D E D   " A S   I S " ,   W I T H O U T   W A R R A N T Y   O F   A N Y   K I N D ,   E X P R E S S   O R   I M P L I E D ,   I N C L U D I N G   B U T   N O T   L I M I T E D   T O   A N Y   W A R R A N T I E S   O F   M E R C H A N T A B I L I T Y ,   F I T N E S S   F O R   A   P A R T I C U L A R   P U R P O S E   A N D   N O N I N F R I N G E M E N T   O F   C O P Y R I G H T ,   P A T E N T ,   T R A D E M A R K ,   O R   O T H E R   R I G H T .   I N   N O   E V E N T   S H A L L   B I T S T R E A M   O R   T H E   G N O M E   F O U N D A T I O N   B E   L I A B L E   F O R   A N Y   C L A I M ,   D A M A G E S   O R   O T H E R   L I A B I L I T Y ,   I N C L U D I N G   A N Y   G E N E R A L ,   S P E C I A L ,   I N D I R E C T ,   I N C I D E N T A L ,   O R   C O N S E Q U E N T I A L   D A M A G E S ,   W H E T H E R   I N   A N   A C T I O N   O F   C O N T R A C T ,   T O R T   O R   O T H E R W I S E ,   A R I S I N G   F R O M ,   O U T   O F   T H E   U S E   O R   I N A B I L I T Y   T O   U S E   T H E   F O N T   S O F T W A R E   O R   F R O M   O T H E R   D E A L I N G S   I N   T H E   F O N T   S O F T W A R E . 
 
 E x c e p t   a s   c o n t a i n e d   i n   t h i s   n o t i c e ,   t h e   n a m e s   o f   G n o m e ,   t h e   G n o m e   F o u n d a t i o n ,   a n d   B i t s t r e a m   I n c . ,   s h a l l   n o t   b e   u s e d   i n   a d v e r t i s i n g   o r   o t h e r w i s e   t o   p r o m o t e   t h e   s a l e ,   u s e   o r   o t h e r   d e a l i n g s   i n   t h i s   F o n t   S o f t w a r e   w i t h o u t   p r i o r   w r i t t e n   a u t h o r i z a t i o n   f r o m   t h e   G n o m e   F o u n d a t i o n   o r   B i t s t r e a m   I n c . ,   r e s p e c t i v e l y .   F o r   f u r t h e r   i n f o r m a t i o n ,   c o n t a c t :   f o n t s   a t   g n o m e   d o t   o r g .   
  Fonts are (c) Bitstream (see below). DejaVu changes are in public domain.

Bitstream Vera Fonts Copyright
------------------------------

Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved. Bitstream Vera is a trademark of Bitstream, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license ("Fonts") and associated documentation files (the "Font Software"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions:

The above copyright and trademark notices and this permission notice shall be included in all copies of one or more of the Font Software typefaces.

The Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or  or characters may be added to the Fonts, only if the fonts are renamed to names not containing either the words "Bitstream" or the word "Vera".

This License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the "Bitstream Vera" names.

The Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself.

THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL BITSTREAM OR THE GNOME FOUNDATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.

Except as contained in this notice, the names of Gnome, the Gnome Foundation, and Bitstream Inc., shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Font Software without prior written authorization from the Gnome Foundation or Bitstream Inc., respectively. For further information, contact: fonts at gnome dot org. 
  h t t p : / / d e j a v u . s o u r c e f o r g e . n e t / w i k i / i n d e x . p h p / L i c e n s e  http://dejavu.sourceforge.net/wiki/index.php/License          ÿ~ Z                   ô           	 
                        ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a ¬ £   ½  è     © ¤  Ú   ò ó    Ã Þ ñ  ª õ ô ö ¢ ­ É Ç ® b c  d Ë e È Ê Ï Ì Í Î é f Ó Ð Ñ ¯ g ð  Ö Ô Õ h ë í  j i k m l n   o q p r s u t v w ê x z y { } | ¸ ¡  ~   ì î º ý þ	
 ÿ  ø ù !"#$%&'()*+ ú ×,-./0123456789: â ã;<=>?@ABCDEFGHI ° ±JKLMNOPQRS û ü ä åTUVWXYZ[\]^_`abcdefghi »jklm æ çnopqrstuvwxyz{|}~ ¦ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ Ø á Û Ü Ý à Ù ß ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
  !"#$%&'()*+,-./0 123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
 !"#$%&'()*+,-./0123456789:;<=>? ² ³@AB ¶ · ÄC ´ µ ÅD  Â E «F ÆGHIJKLM ¾ ¿NOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ÷ ¡¢£¤¥¦ §¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
 !"#$%&'()*+,-. /01 ¨23456789 :  ï;<=>? ¥@AB CDEFGHI JKLMNOPQRSTUVWXYZ[\ §]^_`abcdefghijklmnopqrs tuv  wxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ	 											
																						 	!	"	#	$	%	&	'	(	)	*	+	,	-	.	/	0	1	2	3	4	5	6	7	8	9	:	;	<	=	>	?	@	A	B	C	D	E	F	G	H	I	J	K	L	M	N	O	P	Q	R	S	T	U	V	W	X	Y	Z	[	\	]	^	_	`	a	b	c	d	e	f	g	h	i	j	k	l	m	n	o	p	q	r	s	t	u	v	w	x	y	z	{	|	}	~																																		 	¡	¢	£	¤	¥	¦	§	¨	©	ª	«	¬	­	®	¯	°	±	²	³	´	µ	¶	·	¸	¹	º	»	¼	½	¾	¿	À	Á	Â	Ã	Ä	Å	Æ	Ç	È	É	Ê	Ë	Ì	Í	Î	Ï	Ð	Ñ	Ò	Ó	Ô	Õ	Ö	×	Ø	Ù	Ú	Û	Ü	Ý	Þ	ß	à	á	â	ã	ä	å	æ	ç	è	é	ê	ë	ì	í	î	ï	ð	ñ	ò	ó	ô	õ	ö	÷	ø	ù	ú	û	ü	ý	þ	ÿ
 








	























 
!
"
#
$
% ¹
&
'
(
)
*
+
,
-
.
/
0
1
2
3
4
5
6
7
8
9
:
;
<
=
>
?
@
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
[
\
]
^
_
`
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
{
|
}
~

































 
¡
¢
£
¤
¥
¦
§
¨
©
ª
«
¬
­
®
¯
°
±
²
³
´
µ
¶
·
¸
¹
º
»
¼
½
¾
¿
À
Á
Â
Ã
Ä
Å
Æ
Ç
È
É
Ê
Ë
Ì
Í
Î
Ï
Ð
Ñ
Ò
Ó
Ô
Õ
Ö
×
Ø
Ù
Ú
Û
Ü
Ý
Þ
ß
à
á
â
ã
ä
å
æ
ç
è
é
ê
ë
ì
í
î
ï
ð
ñ
ò
ó
ô
õ
ö
÷
ø
ù
ú
û
ü
ý
þ
ÿ 	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæ À Áçèéêëìíîïðñòóôõö÷øùúûüýþÿ 	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõ	sfthyphenAmacronamacronAbreveabreveAogonekaogonekCcircumflexccircumflex
Cdotaccent
cdotaccentDcarondcaronDcroatEmacronemacronEbreveebreve
Edotaccent
edotaccentEogonekeogonekEcaronecaronGcircumflexgcircumflex
Gdotaccent
gdotaccentGcommaaccentgcommaaccentHcircumflexhcircumflexHbarhbarItildeitildeImacronimacronIbreveibreveIogonekiogonekIJijJcircumflexjcircumflexKcommaaccentkcommaaccentkgreenlandicLacutelacuteLcommaaccentlcommaaccentLcaronlcaronLdotldotNacutenacuteNcommaaccentncommaaccentNcaronncaronnapostropheEngengOmacronomacronObreveobreveOhungarumlautohungarumlautRacuteracuteRcommaaccentrcommaaccentRcaronrcaronSacutesacuteScircumflexscircumflexTcommaaccenttcommaaccentTcarontcaronTbartbarUtildeutildeUmacronumacronUbreveubreveUringuringUhungarumlautuhungarumlautUogonekuogonekWcircumflexwcircumflexYcircumflexycircumflexZacutezacute
Zdotaccent
zdotaccentlongsuni0180uni0181uni0182uni0183uni0184uni0185uni0186uni0187uni0188uni0189uni018Auni018Buni018Cuni018Duni018Euni018Funi0190uni0191uni0193uni0194uni0195uni0196uni0197uni0198uni0199uni019Auni019Buni019Cuni019Duni019Euni019FOhornohornuni01A2uni01A3uni01A4uni01A5uni01A6uni01A7uni01A8uni01A9uni01AAuni01ABuni01ACuni01ADuni01AEUhornuhornuni01B1uni01B2uni01B3uni01B4uni01B5uni01B6uni01B7uni01B8uni01B9uni01BAuni01BBuni01BCuni01BDuni01BEuni01BFuni01C0uni01C1uni01C2uni01C3uni01CDuni01CEuni01CFuni01D0uni01D1uni01D2uni01D3uni01D4uni01D5uni01D6uni01D7uni01D8uni01D9uni01DAuni01DBuni01DCuni01DDuni01DEuni01DFuni01E0uni01E1uni01E2uni01E3Gcarongcaronuni01E8uni01E9uni01EAuni01EBuni01ECuni01EDuni01EEuni01EFuni01F0uni01F4uni01F5uni01F6uni01F8uni01F9AEacuteaeacuteOslashacuteoslashacuteuni0200uni0201uni0202uni0203uni0204uni0205uni0206uni0207uni0208uni0209uni020Auni020Buni020Cuni020Duni020Euni020Funi0210uni0211uni0212uni0213uni0214uni0215uni0216uni0217Scommaaccentscommaaccentuni021Auni021Buni021Cuni021Duni021Euni021Funi0220uni0221uni0224uni0225uni0226uni0227uni0228uni0229uni022Auni022Buni022Cuni022Duni022Euni022Funi0230uni0231uni0232uni0233uni0234uni0235uni0236dotlessjuni0238uni0239uni023Auni023Buni023Cuni023Duni023Euni023Funi0240uni0241uni0243uni0244uni0245uni024Cuni024Duni0250uni0251uni0252uni0253uni0254uni0255uni0256uni0257uni0258uni0259uni025Auni025Buni025Cuni025Duni025Euni025Funi0260uni0261uni0262uni0263uni0264uni0265uni0266uni0267uni0268uni0269uni026Auni026Buni026Cuni026Duni026Euni026Funi0270uni0271uni0272uni0273uni0274uni0275uni0276uni0277uni0278uni0279uni027Auni027Buni027Cuni027Duni027Euni027Funi0280uni0281uni0282uni0283uni0284uni0285uni0286uni0287uni0288uni0289uni028Auni028Buni028Cuni028Duni028Euni028Funi0290uni0291uni0292uni0293uni0294uni0295uni0296uni0297uni0298uni0299uni029Auni029Buni029Cuni029Duni029Euni029Funi02A0uni02A1uni02A2uni02A3uni02A4uni02A5uni02A6uni02A7uni02A8uni02A9uni02AAuni02ABuni02ACuni02ADuni02AEuni02AFuni02B0uni02B1uni02B2uni02B3uni02B4uni02B5uni02B6uni02B7uni02B8uni02B9uni02BBuni02BCuni02BDuni02BEuni02BFuni02C0uni02C1uni02C8uni02C9uni02CCuni02CDuni02CEuni02CFuni02D0uni02D1uni02D2uni02D3uni02D6uni02D7uni02DEuni02E0uni02E1uni02E2uni02E3uni02E4uni02E5uni02E6uni02E7uni02E8uni02E9uni02EEuni02F3	gravecomb	acutecombuni0302	tildecombuni0304uni0305uni0306uni0307uni0308hookabovecombuni030Auni030Buni030Cuni030Duni030Euni030Funi0310uni0311uni0312uni0313uni0314uni0315uni0316uni0317uni0318uni0319uni031Auni031Buni031Cuni031Duni031Euni031Funi0320uni0321uni0322dotbelowcombuni0324uni0325uni0326uni0327uni0328uni0329uni032Auni032Buni032Cuni032Duni032Euni032Funi0330uni0331uni0332uni0333uni0334uni0335uni0336uni0337uni0338uni0339uni033Auni033Buni033Cuni033Duni033Euni033Funi0343uni0358uni0361uni0374uni0375uni0376uni0377uni037Auni037Buni037Cuni037Duni037Euni037Ftonosdieresistonos
Alphatonos	anoteleiaEpsilontonosEtatonos	IotatonosOmicrontonosUpsilontonos
OmegatonosiotadieresistonosAlphaBetaGammauni0394EpsilonZetaEtaThetaIotaKappaLambdaMuNuXiOmicronPiRhoSigmaTauUpsilonPhiChiPsiIotadieresisUpsilondieresis
alphatonosepsilontonosetatonos	iotatonosupsilondieresistonosalphabetagammadeltaepsilonzetaetathetaiotakappalambdauni03BCnuxiomicronrhosigma1sigmatauupsilonphichipsiomegaiotadieresisupsilondieresisomicrontonosupsilontonos
omegatonosuni03D0theta1Upsilon1uni03D3uni03D4phi1omega1uni03D7uni03D8uni03D9uni03DAuni03DBuni03DCuni03DDuni03DEuni03DFuni03E0uni03E1uni03F0uni03F1uni03F2uni03F3uni03F4uni03F5uni03F6uni03F7uni03F8uni03F9uni03FAuni03FBuni03FCuni03FDuni03FEuni03FFuni0400uni0401uni0402uni0403uni0404uni0405uni0406uni0407uni0408uni0409uni040Auni040Buni040Cuni040Duni040Euni040Funi0410uni0411uni0412uni0413uni0414uni0415uni0416uni0417uni0418uni0419uni041Auni041Buni041Cuni041Duni041Euni041Funi0420uni0421uni0422uni0423uni0424uni0425uni0426uni0427uni0428uni0429uni042Auni042Buni042Cuni042Duni042Euni042Funi0430uni0431uni0432uni0433uni0434uni0435uni0436uni0437uni0438uni0439uni043Auni043Buni043Cuni043Duni043Euni043Funi0440uni0441uni0442uni0443uni0444uni0445uni0446uni0447uni0448uni0449uni044Auni044Buni044Cuni044Duni044Euni044Funi0450uni0451uni0452uni0453uni0454uni0455uni0456uni0457uni0458uni0459uni045Auni045Buni045Cuni045Duni045Euni045Funi0462uni0463uni0472uni0473uni0490uni0491uni0492uni0493uni0494uni0495uni0496uni0497uni0498uni0499uni049Auni049Buni04A2uni04A3uni04A4uni04A5uni04AAuni04ABuni04ACuni04ADuni04AEuni04AFuni04B0uni04B1uni04B2uni04B3uni04BAuni04BBuni04C0uni04C1uni04C2uni04C3uni04C4uni04C7uni04C8uni04CBuni04CCuni04CFuni04D0uni04D1uni04D2uni04D3uni04D4uni04D5uni04D6uni04D7uni04D8uni04D9uni04DAuni04DBuni04DCuni04DDuni04DEuni04DFuni04E0uni04E1uni04E2uni04E3uni04E4uni04E5uni04E6uni04E7uni04E8uni04E9uni04EAuni04EBuni04ECuni04EDuni04EEuni04EFuni04F0uni04F1uni04F2uni04F3uni04F4uni04F5uni04F6uni04F7uni04F8uni04F9uni0510uni0511uni051Auni051Buni051Cuni051Duni0531uni0532uni0533uni0534uni0535uni0536uni0537uni0538uni0539uni053Auni053Buni053Cuni053Duni053Euni053Funi0540uni0541uni0542uni0543uni0544uni0545uni0546uni0547uni0548uni0549uni054Auni054Buni054Cuni054Duni054Euni054Funi0550uni0551uni0552uni0553uni0554uni0555uni0556uni0559uni055Auni055Buni055Cuni055Duni055Euni055Funi0561uni0562uni0563uni0564uni0565uni0566uni0567uni0568uni0569uni056Auni056Buni056Cuni056Duni056Euni056Funi0570uni0571uni0572uni0573uni0574uni0575uni0576uni0577uni0578uni0579uni057Auni057Buni057Cuni057Duni057Euni057Funi0580uni0581uni0582uni0583uni0584uni0585uni0586uni0587uni0589uni058Auni0606uni0607uni0609uni060Auni060Cuni0615uni061Buni061Funi0621uni0622uni0623uni0624uni0625uni0626uni0627uni0628uni0629uni062Auni062Buni062Cuni062Duni062Euni062Funi0630uni0631uni0632uni0633uni0634uni0635uni0636uni0637uni0638uni0639uni063Auni0640uni0641uni0642uni0643uni0644uni0645uni0646uni0647uni0648uni0649uni064Auni064Buni064Cuni064Duni064Euni064Funi0650uni0651uni0652uni0653uni0654uni0655uni065Auni0660uni0661uni0662uni0663uni0664uni0665uni0666uni0667uni0668uni0669uni066Auni066Buni066Cuni066Duni0674uni0679uni067Auni067Buni067Euni067Funi0680uni0683uni0684uni0686uni0687uni0691uni0698uni06A4uni06A9uni06AFuni06BEuni06CCuni06F0uni06F1uni06F2uni06F3uni06F4uni06F5uni06F6uni06F7uni06F8uni06F9uni0E3Funi0E81uni0E82uni0E84uni0E87uni0E88uni0E8Auni0E8Duni0E94uni0E95uni0E96uni0E97uni0E99uni0E9Auni0E9Buni0E9Cuni0E9Duni0E9Euni0E9Funi0EA1uni0EA2uni0EA3uni0EA5uni0EA7uni0EAAuni0EABuni0EADuni0EAEuni0EAFuni0EB0uni0EB1uni0EB2uni0EB3uni0EB4uni0EB5uni0EB6uni0EB7uni0EB8uni0EB9uni0EBBuni0EBCuni0EC8uni0EC9uni0ECAuni0ECBuni0ECCuni0ECDuni10D0uni10D1uni10D2uni10D3uni10D4uni10D5uni10D6uni10D7uni10D8uni10D9uni10DAuni10DBuni10DCuni10DDuni10DEuni10DFuni10E0uni10E1uni10E2uni10E3uni10E4uni10E5uni10E6uni10E7uni10E8uni10E9uni10EAuni10EBuni10ECuni10EDuni10EEuni10EFuni10F0uni10F1uni10F2uni10F3uni10F4uni10F5uni10F6uni10F7uni10F8uni10F9uni10FAuni10FBuni10FCuni1D02uni1D08uni1D09uni1D14uni1D16uni1D17uni1D1Duni1D1Euni1D1Funi1D2Cuni1D2Duni1D2Euni1D30uni1D31uni1D32uni1D33uni1D34uni1D35uni1D36uni1D37uni1D38uni1D39uni1D3Auni1D3Buni1D3Cuni1D3Euni1D3Funi1D40uni1D41uni1D42uni1D43uni1D44uni1D45uni1D46uni1D47uni1D48uni1D49uni1D4Auni1D4Buni1D4Cuni1D4Duni1D4Euni1D4Funi1D50uni1D51uni1D52uni1D53uni1D54uni1D55uni1D56uni1D57uni1D58uni1D59uni1D5Auni1D5Buni1D62uni1D63uni1D64uni1D65uni1D77uni1D78uni1D7Buni1D85uni1D9Buni1D9Cuni1D9Duni1D9Euni1D9Funi1DA0uni1DA1uni1DA2uni1DA3uni1DA4uni1DA5uni1DA6uni1DA7uni1DA8uni1DA9uni1DAAuni1DABuni1DACuni1DADuni1DAEuni1DAFuni1DB0uni1DB1uni1DB2uni1DB3uni1DB4uni1DB5uni1DB6uni1DB7uni1DB9uni1DBAuni1DBBuni1DBCuni1DBDuni1DBEuni1DBFuni1E00uni1E01uni1E02uni1E03uni1E04uni1E05uni1E06uni1E07uni1E08uni1E09uni1E0Auni1E0Buni1E0Cuni1E0Duni1E0Euni1E0Funi1E10uni1E11uni1E12uni1E13uni1E18uni1E19uni1E1Auni1E1Buni1E1Cuni1E1Duni1E1Euni1E1Funi1E20uni1E21uni1E22uni1E23uni1E24uni1E25uni1E26uni1E27uni1E28uni1E29uni1E2Auni1E2Buni1E2Cuni1E2Duni1E30uni1E31uni1E32uni1E33uni1E34uni1E35uni1E36uni1E37uni1E38uni1E39uni1E3Auni1E3Buni1E3Cuni1E3Duni1E3Euni1E3Funi1E40uni1E41uni1E42uni1E43uni1E44uni1E45uni1E46uni1E47uni1E48uni1E49uni1E4Auni1E4Buni1E4Cuni1E4Duni1E54uni1E55uni1E56uni1E57uni1E58uni1E59uni1E5Auni1E5Buni1E5Cuni1E5Duni1E5Euni1E5Funi1E60uni1E61uni1E62uni1E63uni1E68uni1E69uni1E6Auni1E6Buni1E6Cuni1E6Duni1E6Euni1E6Funi1E70uni1E71uni1E72uni1E73uni1E74uni1E75uni1E76uni1E77uni1E78uni1E79uni1E7Cuni1E7Duni1E7Euni1E7FWgravewgraveWacutewacute	Wdieresis	wdieresisuni1E86uni1E87uni1E88uni1E89uni1E8Auni1E8Buni1E8Cuni1E8Duni1E8Euni1E8Funi1E90uni1E91uni1E92uni1E93uni1E94uni1E95uni1E96uni1E97uni1E98uni1E99uni1E9Buni1E9Funi1EA0uni1EA1uni1EACuni1EADuni1EB0uni1EB1uni1EB6uni1EB7uni1EB8uni1EB9uni1EBCuni1EBDuni1EC6uni1EC7uni1ECAuni1ECBuni1ECCuni1ECDuni1ED8uni1ED9uni1EDAuni1EDBuni1EDCuni1EDDuni1EE0uni1EE1uni1EE2uni1EE3uni1EE4uni1EE5uni1EE8uni1EE9uni1EEAuni1EEBuni1EEEuni1EEFuni1EF0uni1EF1Ygraveygraveuni1EF4uni1EF5uni1EF8uni1EF9uni1F00uni1F01uni1F02uni1F03uni1F04uni1F05uni1F06uni1F07uni1F08uni1F09uni1F0Auni1F0Buni1F0Cuni1F0Duni1F0Euni1F0Funi1F10uni1F11uni1F12uni1F13uni1F14uni1F15uni1F18uni1F19uni1F1Auni1F1Buni1F1Cuni1F1Duni1F20uni1F21uni1F22uni1F23uni1F24uni1F25uni1F26uni1F27uni1F28uni1F29uni1F2Auni1F2Buni1F2Cuni1F2Duni1F2Euni1F2Funi1F30uni1F31uni1F32uni1F33uni1F34uni1F35uni1F36uni1F37uni1F38uni1F39uni1F3Auni1F3Buni1F3Cuni1F3Duni1F3Euni1F3Funi1F40uni1F41uni1F42uni1F43uni1F44uni1F45uni1F48uni1F49uni1F4Auni1F4Buni1F4Cuni1F4Duni1F50uni1F51uni1F52uni1F53uni1F54uni1F55uni1F56uni1F57uni1F59uni1F5Buni1F5Duni1F5Funi1F60uni1F61uni1F62uni1F63uni1F64uni1F65uni1F66uni1F67uni1F68uni1F69uni1F6Auni1F6Buni1F6Cuni1F6Duni1F6Euni1F6Funi1F70uni1F71uni1F72uni1F73uni1F74uni1F75uni1F76uni1F77uni1F78uni1F79uni1F7Auni1F7Buni1F7Cuni1F7Duni1F80uni1F81uni1F82uni1F83uni1F84uni1F85uni1F86uni1F87uni1F88uni1F89uni1F8Auni1F8Buni1F8Cuni1F8Duni1F8Euni1F8Funi1F90uni1F91uni1F92uni1F93uni1F94uni1F95uni1F96uni1F97uni1F98uni1F99uni1F9Auni1F9Buni1F9Cuni1F9Duni1F9Euni1F9Funi1FA0uni1FA1uni1FA2uni1FA3uni1FA4uni1FA5uni1FA6uni1FA7uni1FA8uni1FA9uni1FAAuni1FABuni1FACuni1FADuni1FAEuni1FAFuni1FB0uni1FB1uni1FB2uni1FB3uni1FB4uni1FB6uni1FB7uni1FB8uni1FB9uni1FBAuni1FBBuni1FBCuni1FBDuni1FBEuni1FBFuni1FC0uni1FC1uni1FC2uni1FC3uni1FC4uni1FC6uni1FC7uni1FC8uni1FC9uni1FCAuni1FCBuni1FCCuni1FCDuni1FCEuni1FCFuni1FD0uni1FD1uni1FD2uni1FD3uni1FD6uni1FD7uni1FD8uni1FD9uni1FDAuni1FDBuni1FDDuni1FDEuni1FDFuni1FE0uni1FE1uni1FE2uni1FE3uni1FE4uni1FE5uni1FE6uni1FE7uni1FE8uni1FE9uni1FEAuni1FEBuni1FECuni1FEDuni1FEEuni1FEFuni1FF2uni1FF3uni1FF4uni1FF6uni1FF7uni1FF8uni1FF9uni1FFAuni1FFBuni1FFCuni1FFDuni1FFEuni2000uni2001uni2002uni2003uni2004uni2005uni2006uni2007uni2008uni2009uni200Auni2010uni2011
figuredashuni2015uni2016underscoredblquotereverseduni201Funi2023uni202Funi2031minuteseconduni2034uni2035uni2036uni2037	exclamdbluni203Duni203Euni203Funi2045uni2046uni2047uni2048uni2049uni204Buni205Funi2070uni2071uni2074uni2075uni2076uni2077uni2078uni2079uni207Auni207Buni207Cuni207Duni207Euni207Funi2080uni2081uni2082uni2083uni2084uni2085uni2086uni2087uni2088uni2089uni208Auni208Buni208Cuni208Duni208Euni2090uni2091uni2092uni2093uni2094uni2095uni2096uni2097uni2098uni2099uni209Auni209Buni209Cuni20A0colonmonetaryuni20A2lirauni20A5uni20A6pesetauni20A8uni20A9uni20AAdongEurouni20ADuni20AEuni20AFuni20B0uni20B1uni20B2uni20B3uni20B4uni20B5uni20B8uni20B9uni20BAuni20BDuni2102uni2105uni210Duni210Euni210Funi2115uni2116uni2117uni2119uni211Auni211Duni2124uni2126uni212Auni212B	estimateduni2148uni2150uni2151onethird	twothirdsuni2155uni2156uni2157uni2158uni2159uni215A	oneeighththreeeighthsfiveeighthsseveneighthsuni215Funi2189	arrowleftarrowup
arrowright	arrowdown	arrowboth	arrowupdnuni2196uni2197uni2198uni2199uni219Auni219Buni219Cuni219Duni219Euni219Funi21A0uni21A1uni21A2uni21A3uni21A4uni21A5uni21A6uni21A7arrowupdnbseuni21A9uni21AAuni21ABuni21ACuni21ADuni21AEuni21AFuni21B0uni21B1uni21B2uni21B3uni21B4carriagereturnuni21B6uni21B7uni21B8uni21B9uni21BAuni21BBuni21BCuni21BDuni21BEuni21BFuni21C0uni21C1uni21C2uni21C3uni21C4uni21C5uni21C6uni21C7uni21C8uni21C9uni21CAuni21CBuni21CCuni21CDuni21CEuni21CFarrowdblleft
arrowdbluparrowdblrightarrowdbldownarrowdblbothuni21D5uni21D6uni21D7uni21D8uni21D9uni21DAuni21DBuni21DCuni21DDuni21DEuni21DFuni21E0uni21E1uni21E2uni21E3uni21E4uni21E5uni21E6uni21E7uni21E8uni21E9uni21EAuni21EBuni21ECuni21EDuni21EEuni21EFuni21F0uni21F1uni21F2uni21F3uni21F4uni21F5uni21F6uni21F7uni21F8uni21F9uni21FAuni21FBuni21FCuni21FDuni21FEuni21FF	universaluni2201existentialuni2204emptysetgradientelement
notelementuni220Asuchthatuni220Cuni220Duni220Euni2210uni2213uni2215asteriskmathuni2218uni2219uni221Buni221Cproportional
orthogonalangleuni2223
logicaland	logicalorintersectionunionuni222Cuni222D	thereforeuni2235uni2236uni2237uni2238uni2239uni223Auni223Bsimilaruni223Duni2241uni2242uni2243uni2244	congruentuni2246uni2247uni2249uni224Auni224Buni224Cuni224Duni224Euni224Funi2250uni2251uni2252uni2253uni2254uni2255uni2256uni2257uni2258uni2259uni225Auni225Buni225Cuni225Duni225Euni225Fequivalenceuni2262uni2263uni2266uni2267uni2268uni2269uni226Duni226Euni226Funi2270uni2271uni2272uni2273uni2274uni2275uni2276uni2277uni2278uni2279uni227Auni227Buni227Cuni227Duni227Euni227Funi2280uni2281propersubsetpropersuperset	notsubsetuni2285reflexsubsetreflexsupersetuni2288uni2289uni228Auni228Buni228Duni228Euni228Funi2290uni2291uni2292uni2293uni2294
circleplusuni2296circlemultiplyuni2298uni2299uni229Auni229Buni229Cuni229Duni229Euni229Funi22A0uni22A1uni22A2uni22A3uni22A4perpendicularuni22B2uni22B3uni22B4uni22B5uni22B8uni22C2uni22C3uni22C4dotmathuni22C6uni22CDuni22CEuni22CFuni22D0uni22D1uni22DAuni22DBuni22DCuni22DDuni22DEuni22DFuni22E0uni22E1uni22E2uni22E3uni22E4uni22E5uni22E6uni22E7uni22E8uni22E9uni22EFuni2300uni2301houseuni2303uni2304uni2305uni2306uni2308uni2309uni230Auni230Buni230Cuni230Duni230Euni230Frevlogicalnotuni2311uni2312uni2313uni2314uni2315uni2318uni2319uni231Cuni231Duni231Euni231F
integraltp
integralbtuni2325uni2326uni2327uni2328uni232Buni2335uni2336uni2337uni2338uni2339uni233Auni233Buni233Cuni233Duni233Euni233Funi2340uni2341uni2342uni2343uni2344uni2345uni2346uni2347uni2348uni2349uni234Auni234Buni234Cuni234Duni234Euni234Funi2350uni2351uni2352uni2353uni2354uni2355uni2356uni2357uni2358uni2359uni235Auni235Buni235Cuni235Duni235Euni235Funi2360uni2361uni2362uni2363uni2364uni2365uni2366uni2367uni2368uni2369uni236Auni236Buni236Cuni236Duni236Euni236Funi2370uni2371uni2372uni2373uni2374uni2375uni2376uni2377uni2378uni2379uni237Auni237Duni2380uni2381uni2382uni2383uni2388uni2389uni238Auni238Buni2395uni239Buni239Cuni239Duni239Euni239Funi23A0uni23A1uni23A2uni23A3uni23A4uni23A5uni23A6uni23A7uni23A8uni23A9uni23AAuni23ABuni23ACuni23ADuni23AEuni23CEuni23CFuni2423SF100000uni2501SF110000uni2503uni2504uni2505uni2506uni2507uni2508uni2509uni250Auni250BSF010000uni250Duni250Euni250FSF030000uni2511uni2512uni2513SF020000uni2515uni2516uni2517SF040000uni2519uni251Auni251BSF080000uni251Duni251Euni251Funi2520uni2521uni2522uni2523SF090000uni2525uni2526uni2527uni2528uni2529uni252Auni252BSF060000uni252Duni252Euni252Funi2530uni2531uni2532uni2533SF070000uni2535uni2536uni2537uni2538uni2539uni253Auni253BSF050000uni253Duni253Euni253Funi2540uni2541uni2542uni2543uni2544uni2545uni2546uni2547uni2548uni2549uni254Auni254Buni254Cuni254Duni254Euni254FSF430000SF240000SF510000SF520000SF390000SF220000SF210000SF250000SF500000SF490000SF380000SF280000SF270000SF260000SF360000SF370000SF420000SF190000SF200000SF230000SF470000SF480000SF410000SF450000SF460000SF400000SF540000SF530000SF440000uni256Duni256Euni256Funi2570uni2571uni2572uni2573uni2574uni2575uni2576uni2577uni2578uni2579uni257Auni257Buni257Cuni257Duni257Euni257Fupblockuni2581uni2582uni2583dnblockuni2585uni2586uni2587blockuni2589uni258Auni258Blfblockuni258Duni258Euni258Frtblockltshadeshadedkshadeuni2594uni2595uni2596uni2597uni2598uni2599uni259Auni259Buni259Cuni259Duni259Euni259F	filledboxH22073uni25A2uni25A3uni25A4uni25A5uni25A6uni25A7uni25A8uni25A9H18543H18551
filledrectuni25ADuni25AEuni25AFuni25B0uni25B1triagupuni25B3uni25B4uni25B5uni25B6uni25B7uni25B8uni25B9triagrtuni25BBtriagdnuni25BDuni25BEuni25BFuni25C0uni25C1uni25C2uni25C3triaglfuni25C5uni25C6uni25C7uni25C8uni25C9circleuni25CCuni25CDuni25CEH18533uni25D0uni25D1uni25D2uni25D3uni25D4uni25D5uni25D6uni25D7	invbullet	invcircleuni25DAuni25DBuni25DCuni25DDuni25DEuni25DFuni25E0uni25E1uni25E2uni25E3uni25E4uni25E5
openbulletuni25E7uni25E8uni25E9uni25EAuni25EBuni25ECuni25EDuni25EEuni25EFuni25F0uni25F1uni25F2uni25F3uni25F4uni25F5uni25F6uni25F7uni25F8uni25F9uni25FAuni25FBuni25FCuni25FDuni25FEuni25FFuni2600uni2601uni2602uni2603uni2604uni2605uni2606uni2607uni2608uni2609uni260Auni260Buni260Cuni260Duni260Euni260Funi2610uni2611uni2612uni2613uni2614uni2615uni2616uni2617uni2618uni2619uni261Auni261Buni261Cuni261Duni261Euni261Funi2620uni2621uni2622uni2623uni2624uni2625uni2626uni2627uni2628uni2629uni262Auni262Buni262Cuni262Duni262Euni262Funi2638uni2639	smilefaceinvsmilefacesununi263Duni263Euni263Ffemaleuni2641maleuni2643uni2644uni2645uni2646uni2647uni2648uni2649uni264Auni264Buni264Cuni264Duni264Euni264Funi2650uni2651uni2652uni2653uni2654uni2655uni2656uni2657uni2658uni2659uni265Auni265Buni265Cuni265Duni265Euni265Fspadeuni2661uni2662clubuni2664heartdiamonduni2667uni2668uni2669musicalnotemusicalnotedbluni266Cuni266Duni266Euni266Funi2670uni2671uni2672uni2673uni2674uni2675uni2676uni2677uni2678uni2679uni267Auni267Buni267Cuni267Duni267Euni267Funi2680uni2681uni2682uni2683uni2684uni2685uni2686uni2687uni2688uni2689uni268Auni268Buni2690uni2691uni2692uni2693uni2694uni2695uni2696uni2697uni2698uni2699uni269Auni269Buni269Cuni26A0uni26A1uni26B0uni26B1uni2701uni2702uni2703uni2704uni2706uni2707uni2708uni2709uni270Cuni270Duni270Euni270Funi2710uni2711uni2712uni2713uni2714uni2715uni2716uni2717uni2718uni2719uni271Auni271Buni271Cuni271Duni271Euni271Funi2720uni2721uni2722uni2723uni2724uni2725uni2726uni2727uni2729uni272Auni272Buni272Cuni272Duni272Euni272Funi2730uni2731uni2732uni2733uni2734uni2735uni2736uni2737uni2738uni2739uni273Auni273Buni273Cuni273Duni273Euni273Funi2740uni2741uni2742uni2743uni2744uni2745uni2746uni2747uni2748uni2749uni274Auni274Buni274Duni274Funi2750uni2751uni2752uni2756uni2758uni2759uni275Auni275Buni275Cuni275Duni275Euni2761uni2762uni2763uni2764uni2765uni2766uni2767uni2768uni2769uni276Auni276Buni276Cuni276Duni276Euni276Funi2770uni2771uni2772uni2773uni2774uni2775uni2794uni2798uni2799uni279Auni279Buni279Cuni279Duni279Euni279Funi27A0uni27A1uni27A2uni27A3uni27A4uni27A5uni27A6uni27A7uni27A8uni27A9uni27AAuni27ABuni27ACuni27ADuni27AEuni27AFuni27B1uni27B2uni27B3uni27B4uni27B5uni27B6uni27B7uni27B8uni27B9uni27BAuni27BBuni27BCuni27BDuni27BEuni27BFuni27C2uni27C5uni27C6uni27DCuni27E0uni27E6uni27E7uni27E8uni27E9uni27EAuni27EBuni27F5uni27F6uni27F7uni2987uni2988uni2997uni2998uni29EBuni29FAuni29FBuni2A00uni2A2Funi2A6Auni2A6Buni2B05uni2B06uni2B07uni2B08uni2B09uni2B0Auni2B0Buni2B0Cuni2B0Duni2B12uni2B13uni2B14uni2B15uni2B16uni2B17uni2B18uni2B19uni2B1Auni2C64uni2C6Duni2C6Euni2C6Funi2C70uni2C75uni2C76uni2C77uni2C79uni2C7Auni2C7Cuni2C7Duni2C7Euni2C7Funi2E18uni2E1Funi2E22uni2E23uni2E24uni2E25uni2E2EuniA708uniA709uniA70AuniA70BuniA70CuniA70DuniA70EuniA70FuniA710uniA711uniA712uniA713uniA714uniA715uniA716uniA71BuniA71CuniA71DuniA71EuniA71FuniA722uniA723uniA724uniA725uniA726uniA727uniA789uniA78AuniA78BuniA78CuniA78DuniA78EuniA790uniA791uniA7AAuniA7F8uniA7F9uniF6C5uniFB52uniFB53uniFB54uniFB55uniFB56uniFB57uniFB58uniFB59uniFB5AuniFB5BuniFB5CuniFB5DuniFB5EuniFB5FuniFB60uniFB61uniFB62uniFB63uniFB64uniFB65uniFB66uniFB67uniFB68uniFB69uniFB6AuniFB6BuniFB6CuniFB6DuniFB6EuniFB6FuniFB70uniFB71uniFB72uniFB73uniFB74uniFB75uniFB76uniFB77uniFB78uniFB79uniFB7AuniFB7BuniFB7CuniFB7DuniFB7EuniFB7FuniFB80uniFB81uniFB8AuniFB8BuniFB8CuniFB8DuniFB8EuniFB8FuniFB90uniFB91uniFB92uniFB93uniFB94uniFB95uniFB9EuniFB9FuniFBAAuniFBABuniFBACuniFBADuniFBE8uniFBE9uniFBFCuniFBFDuniFBFEuniFBFFuniFE70uniFE71uniFE72uniFE73uniFE74uniFE76uniFE77uniFE78uniFE79uniFE7AuniFE7BuniFE7CuniFE7DuniFE7EuniFE7FuniFE80uniFE81uniFE82uniFE83uniFE84uniFE85uniFE86uniFE87uniFE88uniFE89uniFE8AuniFE8BuniFE8CuniFE8DuniFE8EuniFE8FuniFE90uniFE91uniFE92uniFE93uniFE94uniFE95uniFE96uniFE97uniFE98uniFE99uniFE9AuniFE9BuniFE9CuniFE9DuniFE9EuniFE9FuniFEA0uniFEA1uniFEA2uniFEA3uniFEA4uniFEA5uniFEA6uniFEA7uniFEA8uniFEA9uniFEAAuniFEABuniFEACuniFEADuniFEAEuniFEAFuniFEB0uniFEB1uniFEB2uniFEB3uniFEB4uniFEB5uniFEB6uniFEB7uniFEB8uniFEB9uniFEBAuniFEBBuniFEBCuniFEBDuniFEBEuniFEBFuniFEC0uniFEC1uniFEC2uniFEC3uniFEC4uniFEC5uniFEC6uniFEC7uniFEC8uniFEC9uniFECAuniFECBuniFECCuniFECDuniFECEuniFECFuniFED0uniFED1uniFED2uniFED3uniFED4uniFED5uniFED6uniFED7uniFED8uniFED9uniFEDAuniFEDBuniFEDCuniFEDDuniFEDEuniFEDFuniFEE0uniFEE1uniFEE2uniFEE3uniFEE4uniFEE5uniFEE6uniFEE7uniFEE8uniFEE9uniFEEAuniFEEBuniFEECuniFEEDuniFEEEuniFEEFuniFEF0uniFEF1uniFEF2uniFEF3uniFEF4uniFEF5uniFEF6uniFEF7uniFEF8uniFEF9uniFEFAuniFEFBuniFEFCuniFEFFuniFFF9uniFFFAuniFFFBuniFFFCuniFFFDu1D55A	dlLtcaronDieresisAcuteTildeGrave
CircumflexCaronfractionslashuni0311.caseuni0306.caseuni0307.caseuni030B.caseuni030F.casethinquestionuni0304.caseunderbarunderbar.wideunderbar.smalljotdiaeresis.symbols
arabic_dotarabic_2dotsarabic_3dotsuni066E.finauni06A1.inituni06A1.mediuni066F.finauni06A1.finaarabic_3dots_aarabic_2dots_aarabic_4dotsarabic_gaf_bararabic_gaf_bar_aarabic_ringEng.altuni066Euni066Funi067Cuni067Duni0681uni0682uni0685uni0692uni06A1uni06B5uni06BAuni06C6uni06CEuni06D5exclamdown.casequestiondown.caseuni2E18.case¸@t¾þ»»º»¹ú·ú¶µG¶»µG´2³²2±d°¯®¯k®¬«þª©ªú©¨§¨þ¨À§¦Y§§¦¥&¦Y¦@¥&¤þ£2¢¡ G¡þ¡¸ÿÑ@ÿ A GA2k2þúúþ%þþþþe}f2»þ]»%]@%þe2d~}d|S{f{2zez2yxfxdwþvþtssrq.rþq.pfp}onm»nþml]m»mli%l]l@kkji%j»i@ÿ%hfhdgfgdfefedþcþbþa}`þ^d\[\þ[Z2Y-YXW WþV2UþTSTSRQRQPQPOþNMdNMdLþKþJIJIHúGúF}EDE}DCA?2>=<=þ<;<;:9:989988@76776-6545K4343212d1-10/@0D/.-.-,--¸@@	,+,,¸ @	+*++¸À@	*
**¸@W)K('K&$&$%$%K$ $#""2! 4!>   4þ2¸@	¸@@	¸ @WK 77ú22ú 2X} X
 ¸À@	
¸@		
¸@´	¸ @  ¸d++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++